/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@middleware.io/agent-apm-worker/dist/init.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@middleware.io/agent-apm-worker/dist/init.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.track = exports.init = void 0;\nvar _a = __webpack_require__(/*! @middleware.io/opentelemetry-sdk-workers */ \"./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/index.mjs\"), WorkersSDK = _a.WorkersSDK, OTLPJsonLogExporter = _a.OTLPJsonLogExporter;\nvar OTLPProtoTraceExporter = (__webpack_require__(/*! @middleware.io/opentelemetry-sdk-workers/exporters/OTLPProtoTraceExporter */ \"./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/exporters/OTLPProtoTraceExporter.mjs\").OTLPProtoTraceExporter);\nvar Resource = (__webpack_require__(/*! @opentelemetry/resources */ \"./node_modules/@opentelemetry/resources/build/esm/index.js\").Resource);\nvar api_1 = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\nvar config;\nvar configDefault = {\n    DEBUG: api_1.DiagLogLevel.NONE,\n    projectName: 'Default-Worker-Project',\n    serviceName: 'Default-Worker-Service',\n    consoleLogEnabled: false,\n    accountKey: '',\n    target: '',\n};\nvar init = function (newConfig) {\n    if (newConfig === void 0) { newConfig = {}; }\n    if (!newConfig.accountKey || !newConfig.target) {\n        return 'accountKey and target are required';\n    }\n    else {\n        configDefault.DEBUG = newConfig.DEBUG || api_1.DiagLogLevel.NONE;\n        configDefault.projectName = newConfig.projectName || 'Default-Worker-Project';\n        configDefault.serviceName = newConfig.serviceName || 'Default-Worker-Service';\n        configDefault.consoleLogEnabled = newConfig.consoleLogEnabled || false;\n        configDefault.accountKey = newConfig.accountKey;\n        configDefault.target = newConfig.target;\n        if (configDefault.target) {\n            configDefault.target = new URL(configDefault.target).origin;\n        }\n        api_1.diag.setLogger(new api_1.DiagConsoleLogger(), configDefault.DEBUG ? api_1.DiagLogLevel.DEBUG : api_1.DiagLogLevel.NONE);\n        config = configDefault;\n    }\n};\nexports.init = init;\nvar track = function (request, ctx) {\n    var _a;\n    var resource = new Resource((_a = {},\n        _a['mw_agent'] = true,\n        _a['project.name'] = config.projectName,\n        _a['service.name'] = config.serviceName,\n        _a['mw.account_key'] = config.accountKey,\n        _a));\n    var sdk = new WorkersSDK(request, ctx, {\n        service: config.serviceName,\n        traceExporter: new OTLPProtoTraceExporter({\n            url: config.target + '/v1/traces'\n        }),\n        logExporter: new OTLPJsonLogExporter({\n            url: config.target + '/v1/logs',\n            headers: { origin: 'localhost' }\n        }),\n        resource: resource,\n        consoleLogEnabled: config['consoleLogEnabled']\n    });\n    return sdk;\n};\nexports.track = track;\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@middleware.io/agent-apm-worker/dist/init.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/context.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/context.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextAPI: () => (/* binding */ ContextAPI)\n/* harmony export */ });\n/* harmony import */ var _context_NoopContextManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/NoopContextManager */ \"./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js\");\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new _context_NoopContextManager__WEBPACK_IMPORTED_MODULE_0__.NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.registerGlobal)(API_NAME, contextManager, _diag__WEBPACK_IMPORTED_MODULE_2__.DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], __read(args), false));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.getGlobal)(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_1__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_2__.DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\n\n//# sourceMappingURL=context.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/api/context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/diag.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/diag.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagAPI: () => (/* binding */ DiagAPI)\n/* harmony export */ });\n/* harmony import */ var _diag_ComponentLogger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../diag/ComponentLogger */ \"./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js\");\n/* harmony import */ var _diag_internal_logLevelLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../diag/internal/logLevelLogger */ \"./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js\");\n/* harmony import */ var _diag_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../diag/types */ \"./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n\n\n\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var logger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        var setLogger = function (logger, optionsOrLogLevel) {\n            var _a, _b, _c;\n            if (optionsOrLogLevel === void 0) { optionsOrLogLevel = { logLevel: _diag_types__WEBPACK_IMPORTED_MODULE_1__.DiagLogLevel.INFO }; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            if (typeof optionsOrLogLevel === 'number') {\n                optionsOrLogLevel = {\n                    logLevel: optionsOrLogLevel,\n                };\n            }\n            var oldLogger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('diag');\n            var newLogger = (0,_diag_internal_logLevelLogger__WEBPACK_IMPORTED_MODULE_2__.createLogLevelDiagLogger)((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : _diag_types__WEBPACK_IMPORTED_MODULE_1__.DiagLogLevel.INFO, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n                var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.registerGlobal)('diag', newLogger, self, true);\n        };\n        self.setLogger = setLogger;\n        self.disable = function () {\n            (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.unregisterGlobal)(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new _diag_ComponentLogger__WEBPACK_IMPORTED_MODULE_3__.DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\n\n//# sourceMappingURL=diag.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/api/diag.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/metrics.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/metrics.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MetricsAPI: () => (/* binding */ MetricsAPI)\n/* harmony export */ });\n/* harmony import */ var _metrics_NoopMeterProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../metrics/NoopMeterProvider */ \"./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js\");\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter provider.\n     * Returns true if the meter provider was successfully registered, else false.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.registerGlobal)(API_NAME, provider, _diag__WEBPACK_IMPORTED_MODULE_1__.DiagAPI.instance());\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)(API_NAME) || _metrics_NoopMeterProvider__WEBPACK_IMPORTED_MODULE_2__.NOOP_METER_PROVIDER;\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version, options) {\n        return this.getMeterProvider().getMeter(name, version, options);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_1__.DiagAPI.instance());\n    };\n    return MetricsAPI;\n}());\n\n//# sourceMappingURL=metrics.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/api/metrics.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/propagation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/propagation.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PropagationAPI: () => (/* binding */ PropagationAPI)\n/* harmony export */ });\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _propagation_NoopTextMapPropagator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../propagation/NoopTextMapPropagator */ \"./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js\");\n/* harmony import */ var _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../propagation/TextMapPropagator */ \"./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\");\n/* harmony import */ var _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../baggage/context-helpers */ \"./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js\");\n/* harmony import */ var _baggage_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../baggage/utils */ \"./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new _propagation_NoopTextMapPropagator__WEBPACK_IMPORTED_MODULE_0__.NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = _baggage_utils__WEBPACK_IMPORTED_MODULE_1__.createBaggage;\n        this.getBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.getBaggage;\n        this.getActiveBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.getActiveBaggage;\n        this.setBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.setBaggage;\n        this.deleteBaggage = _baggage_context_helpers__WEBPACK_IMPORTED_MODULE_2__.deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.registerGlobal)(API_NAME, propagator, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__.defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_5__.defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.getGlobal)(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\n\n//# sourceMappingURL=propagation.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/api/propagation.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/api/trace.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/api/trace.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceAPI: () => (/* binding */ TraceAPI)\n/* harmony export */ });\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/* harmony import */ var _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../trace/ProxyTracerProvider */ \"./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\");\n/* harmony import */ var _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../trace/spancontext-utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../trace/context-utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\");\n/* harmony import */ var _diag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_0__.ProxyTracerProvider();\n        this.wrapSpanContext = _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_1__.wrapSpanContext;\n        this.isSpanContextValid = _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_1__.isSpanContextValid;\n        this.deleteSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.deleteSpan;\n        this.getSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getSpan;\n        this.getActiveSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getActiveSpan;\n        this.getSpanContext = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getSpanContext;\n        this.setSpan = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.setSpan;\n        this.setSpanContext = _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        var success = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.registerGlobal)(API_NAME, this._proxyTracerProvider, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());\n        if (success) {\n            this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.getGlobal)(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_3__.unregisterGlobal)(API_NAME, _diag__WEBPACK_IMPORTED_MODULE_4__.DiagAPI.instance());\n        this._proxyTracerProvider = new _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_0__.ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\n\n//# sourceMappingURL=trace.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/api/trace.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteBaggage: () => (/* binding */ deleteBaggage),\n/* harmony export */   getActiveBaggage: () => (/* binding */ getActiveBaggage),\n/* harmony export */   getBaggage: () => (/* binding */ getBaggage),\n/* harmony export */   setBaggage: () => (/* binding */ setBaggage)\n/* harmony export */ });\n/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/context */ \"./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/context */ \"./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = (0,_context_context__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry Baggage Key');\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getActiveBaggage() {\n    return getBaggage(_api_context__WEBPACK_IMPORTED_MODULE_1__.ContextAPI.getInstance().active());\n}\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nfunction setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nfunction deleteBaggage(context) {\n    return context.deleteValue(BAGGAGE_KEY);\n}\n//# sourceMappingURL=context-helpers.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaggageImpl: () => (/* binding */ BaggageImpl)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar BaggageImpl = /** @class */ (function () {\n    function BaggageImpl(entries) {\n        this._entries = entries ? new Map(entries) : new Map();\n    }\n    BaggageImpl.prototype.getEntry = function (key) {\n        var entry = this._entries.get(key);\n        if (!entry) {\n            return undefined;\n        }\n        return Object.assign({}, entry);\n    };\n    BaggageImpl.prototype.getAllEntries = function () {\n        return Array.from(this._entries.entries()).map(function (_a) {\n            var _b = __read(_a, 2), k = _b[0], v = _b[1];\n            return [k, v];\n        });\n    };\n    BaggageImpl.prototype.setEntry = function (key, entry) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.set(key, entry);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntry = function (key) {\n        var newBaggage = new BaggageImpl(this._entries);\n        newBaggage._entries.delete(key);\n        return newBaggage;\n    };\n    BaggageImpl.prototype.removeEntries = function () {\n        var e_1, _a;\n        var keys = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            keys[_i] = arguments[_i];\n        }\n        var newBaggage = new BaggageImpl(this._entries);\n        try {\n            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n                var key = keys_1_1.value;\n                newBaggage._entries.delete(key);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return newBaggage;\n    };\n    BaggageImpl.prototype.clear = function () {\n        return new BaggageImpl();\n    };\n    return BaggageImpl;\n}());\n\n//# sourceMappingURL=baggage-impl.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   baggageEntryMetadataSymbol: () => (/* binding */ baggageEntryMetadataSymbol)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nvar baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n//# sourceMappingURL=symbol.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/baggage/utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/baggage/utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   baggageEntryMetadataFromString: () => (/* binding */ baggageEntryMetadataFromString),\n/* harmony export */   createBaggage: () => (/* binding */ createBaggage)\n/* harmony export */ });\n/* harmony import */ var _api_diag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/* harmony import */ var _internal_baggage_impl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/baggage-impl */ \"./node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js\");\n/* harmony import */ var _internal_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/symbol */ \"./node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar diag = _api_diag__WEBPACK_IMPORTED_MODULE_0__.DiagAPI.instance();\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nfunction createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new _internal_baggage_impl__WEBPACK_IMPORTED_MODULE_1__.BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nfunction baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: _internal_symbol__WEBPACK_IMPORTED_MODULE_2__.baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/baggage/utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/context-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context-api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   context: () => (/* binding */ context)\n/* harmony export */ });\n/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/context */ \"./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for context API */\nvar context = _api_context__WEBPACK_IMPORTED_MODULE_0__.ContextAPI.getInstance();\n//# sourceMappingURL=context-api.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/context-api.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopContextManager: () => (/* binding */ NoopContextManager)\n/* harmony export */ });\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./context */ \"./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nvar NoopContextManager = /** @class */ (function () {\n    function NoopContextManager() {\n    }\n    NoopContextManager.prototype.active = function () {\n        return _context__WEBPACK_IMPORTED_MODULE_0__.ROOT_CONTEXT;\n    };\n    NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n    };\n    NoopContextManager.prototype.bind = function (_context, target) {\n        return target;\n    };\n    NoopContextManager.prototype.enable = function () {\n        return this;\n    };\n    NoopContextManager.prototype.disable = function () {\n        return this;\n    };\n    return NoopContextManager;\n}());\n\n//# sourceMappingURL=NoopContextManager.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/context/context.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/context/context.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ROOT_CONTEXT: () => (/* binding */ ROOT_CONTEXT),\n/* harmony export */   createContextKey: () => (/* binding */ createContextKey)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nfunction createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nvar ROOT_CONTEXT = new BaseContext();\n//# sourceMappingURL=context.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/context/context.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag-api.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag-api.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   diag: () => (/* binding */ diag)\n/* harmony export */ });\n/* harmony import */ var _api_diag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/diag */ \"./node_modules/@opentelemetry/api/build/esm/api/diag.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nvar diag = _api_diag__WEBPACK_IMPORTED_MODULE_0__.DiagAPI.instance();\n//# sourceMappingURL=diag-api.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/diag-api.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagComponentLogger: () => (/* binding */ DiagComponentLogger)\n/* harmony export */ });\n/* harmony import */ var _internal_global_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/global-utils */ \"./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\n\nfunction logProxy(funcName, namespace, args) {\n    var logger = (0,_internal_global_utils__WEBPACK_IMPORTED_MODULE_0__.getGlobal)('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}\n//# sourceMappingURL=ComponentLogger.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagConsoleLogger: () => (/* binding */ DiagConsoleLogger)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    // eslint-disable-next-line no-console\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        // eslint-disable-next-line no-console\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, args);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\n\n//# sourceMappingURL=consoleLogger.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLogLevelDiagLogger: () => (/* binding */ createLogLevelDiagLogger)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types */ \"./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction createLogLevelDiagLogger(maxLevel, logger) {\n    if (maxLevel < _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE) {\n        maxLevel = _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE;\n    }\n    else if (maxLevel > _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL) {\n        maxLevel = _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL;\n    }\n    // In case the logger is null or undefined\n    logger = logger || {};\n    function _filterFunc(funcName, theLevel) {\n        var theFunc = logger[funcName];\n        if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n            return theFunc.bind(logger);\n        }\n        return function () { };\n    }\n    return {\n        error: _filterFunc('error', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ERROR),\n        warn: _filterFunc('warn', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.WARN),\n        info: _filterFunc('info', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO),\n        debug: _filterFunc('debug', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.DEBUG),\n        verbose: _filterFunc('verbose', _types__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.VERBOSE),\n    };\n}\n//# sourceMappingURL=logLevelLogger.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/diag/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/diag/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagLogLevel: () => (/* binding */ DiagLogLevel)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nvar DiagLogLevel;\n(function (DiagLogLevel) {\n    /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n    DiagLogLevel[DiagLogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Identifies an error scenario */\n    DiagLogLevel[DiagLogLevel[\"ERROR\"] = 30] = \"ERROR\";\n    /** Identifies a warning scenario */\n    DiagLogLevel[DiagLogLevel[\"WARN\"] = 50] = \"WARN\";\n    /** General informational log message */\n    DiagLogLevel[DiagLogLevel[\"INFO\"] = 60] = \"INFO\";\n    /** General debug log message */\n    DiagLogLevel[DiagLogLevel[\"DEBUG\"] = 70] = \"DEBUG\";\n    /**\n     * Detailed trace level logging should only be used for development, should only be set\n     * in a development environment.\n     */\n    DiagLogLevel[DiagLogLevel[\"VERBOSE\"] = 80] = \"VERBOSE\";\n    /** Used to set the logging level to include all logging */\n    DiagLogLevel[DiagLogLevel[\"ALL\"] = 9999] = \"ALL\";\n})(DiagLogLevel || (DiagLogLevel = {}));\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/diag/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiagConsoleLogger: () => (/* reexport safe */ _diag_consoleLogger__WEBPACK_IMPORTED_MODULE_2__.DiagConsoleLogger),\n/* harmony export */   DiagLogLevel: () => (/* reexport safe */ _diag_types__WEBPACK_IMPORTED_MODULE_3__.DiagLogLevel),\n/* harmony export */   INVALID_SPANID: () => (/* reexport safe */ _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_15__.INVALID_SPANID),\n/* harmony export */   INVALID_SPAN_CONTEXT: () => (/* reexport safe */ _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_15__.INVALID_SPAN_CONTEXT),\n/* harmony export */   INVALID_TRACEID: () => (/* reexport safe */ _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_15__.INVALID_TRACEID),\n/* harmony export */   ProxyTracer: () => (/* reexport safe */ _trace_ProxyTracer__WEBPACK_IMPORTED_MODULE_7__.ProxyTracer),\n/* harmony export */   ProxyTracerProvider: () => (/* reexport safe */ _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_8__.ProxyTracerProvider),\n/* harmony export */   ROOT_CONTEXT: () => (/* reexport safe */ _context_context__WEBPACK_IMPORTED_MODULE_1__.ROOT_CONTEXT),\n/* harmony export */   SamplingDecision: () => (/* reexport safe */ _trace_SamplingResult__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision),\n/* harmony export */   SpanKind: () => (/* reexport safe */ _trace_span_kind__WEBPACK_IMPORTED_MODULE_10__.SpanKind),\n/* harmony export */   SpanStatusCode: () => (/* reexport safe */ _trace_status__WEBPACK_IMPORTED_MODULE_11__.SpanStatusCode),\n/* harmony export */   TraceFlags: () => (/* reexport safe */ _trace_trace_flags__WEBPACK_IMPORTED_MODULE_12__.TraceFlags),\n/* harmony export */   ValueType: () => (/* reexport safe */ _metrics_Metric__WEBPACK_IMPORTED_MODULE_5__.ValueType),\n/* harmony export */   baggageEntryMetadataFromString: () => (/* reexport safe */ _baggage_utils__WEBPACK_IMPORTED_MODULE_0__.baggageEntryMetadataFromString),\n/* harmony export */   context: () => (/* reexport safe */ _context_api__WEBPACK_IMPORTED_MODULE_16__.context),\n/* harmony export */   createContextKey: () => (/* reexport safe */ _context_context__WEBPACK_IMPORTED_MODULE_1__.createContextKey),\n/* harmony export */   createNoopMeter: () => (/* reexport safe */ _metrics_NoopMeter__WEBPACK_IMPORTED_MODULE_4__.createNoopMeter),\n/* harmony export */   createTraceState: () => (/* reexport safe */ _trace_internal_utils__WEBPACK_IMPORTED_MODULE_13__.createTraceState),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultTextMapGetter: () => (/* reexport safe */ _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_6__.defaultTextMapGetter),\n/* harmony export */   defaultTextMapSetter: () => (/* reexport safe */ _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_6__.defaultTextMapSetter),\n/* harmony export */   diag: () => (/* reexport safe */ _diag_api__WEBPACK_IMPORTED_MODULE_17__.diag),\n/* harmony export */   isSpanContextValid: () => (/* reexport safe */ _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_14__.isSpanContextValid),\n/* harmony export */   isValidSpanId: () => (/* reexport safe */ _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_14__.isValidSpanId),\n/* harmony export */   isValidTraceId: () => (/* reexport safe */ _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_14__.isValidTraceId),\n/* harmony export */   metrics: () => (/* reexport safe */ _metrics_api__WEBPACK_IMPORTED_MODULE_18__.metrics),\n/* harmony export */   propagation: () => (/* reexport safe */ _propagation_api__WEBPACK_IMPORTED_MODULE_19__.propagation),\n/* harmony export */   trace: () => (/* reexport safe */ _trace_api__WEBPACK_IMPORTED_MODULE_20__.trace)\n/* harmony export */ });\n/* harmony import */ var _baggage_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage/utils */ \"./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\");\n/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context/context */ \"./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/* harmony import */ var _diag_consoleLogger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./diag/consoleLogger */ \"./node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js\");\n/* harmony import */ var _diag_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./diag/types */ \"./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/* harmony import */ var _metrics_NoopMeter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./metrics/NoopMeter */ \"./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js\");\n/* harmony import */ var _metrics_Metric__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./metrics/Metric */ \"./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js\");\n/* harmony import */ var _propagation_TextMapPropagator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./propagation/TextMapPropagator */ \"./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js\");\n/* harmony import */ var _trace_ProxyTracer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./trace/ProxyTracer */ \"./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\");\n/* harmony import */ var _trace_ProxyTracerProvider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./trace/ProxyTracerProvider */ \"./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js\");\n/* harmony import */ var _trace_SamplingResult__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./trace/SamplingResult */ \"./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\");\n/* harmony import */ var _trace_span_kind__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./trace/span_kind */ \"./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\");\n/* harmony import */ var _trace_status__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./trace/status */ \"./node_modules/@opentelemetry/api/build/esm/trace/status.js\");\n/* harmony import */ var _trace_trace_flags__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./trace/trace_flags */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _trace_internal_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./trace/internal/utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js\");\n/* harmony import */ var _trace_spancontext_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./trace/spancontext-utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _trace_invalid_span_constants__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./trace/invalid-span-constants */ \"./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/* harmony import */ var _context_api__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./context-api */ \"./node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _diag_api__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./diag-api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _metrics_api__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./metrics-api */ \"./node_modules/@opentelemetry/api/build/esm/metrics-api.js\");\n/* harmony import */ var _propagation_api__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./propagation-api */ \"./node_modules/@opentelemetry/api/build/esm/propagation-api.js\");\n/* harmony import */ var _trace_api__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./trace-api */ \"./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Context APIs\n\n// Diag APIs\n\n\n// Metrics APIs\n\n\n// Propagation APIs\n\n\n\n\n\n\n\n\n\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n\n\n\n\n// Named export.\n\n// Default export.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    context: _context_api__WEBPACK_IMPORTED_MODULE_16__.context,\n    diag: _diag_api__WEBPACK_IMPORTED_MODULE_17__.diag,\n    metrics: _metrics_api__WEBPACK_IMPORTED_MODULE_18__.metrics,\n    propagation: _propagation_api__WEBPACK_IMPORTED_MODULE_19__.propagation,\n    trace: _trace_api__WEBPACK_IMPORTED_MODULE_20__.trace,\n});\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGlobal: () => (/* binding */ getGlobal),\n/* harmony export */   registerGlobal: () => (/* binding */ registerGlobal),\n/* harmony export */   unregisterGlobal: () => (/* binding */ unregisterGlobal)\n/* harmony export */ });\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform */ \"./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version */ \"./node_modules/@opentelemetry/api/build/esm/version.js\");\n/* harmony import */ var _semver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./semver */ \"./node_modules/@opentelemetry/api/build/esm/internal/semver.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar major = _version__WEBPACK_IMPORTED_MODULE_0__.VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _platform__WEBPACK_IMPORTED_MODULE_1__._globalThis;\nfunction registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: _version__WEBPACK_IMPORTED_MODULE_0__.VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== _version__WEBPACK_IMPORTED_MODULE_0__.VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error(\"@opentelemetry/api: Registration of version v\" + api.version + \" for \" + type + \" does not match previously registered API v\" + _version__WEBPACK_IMPORTED_MODULE_0__.VERSION);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + _version__WEBPACK_IMPORTED_MODULE_0__.VERSION + \".\");\n    return true;\n}\nfunction getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !(0,_semver__WEBPACK_IMPORTED_MODULE_2__.isCompatible)(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nfunction unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + _version__WEBPACK_IMPORTED_MODULE_0__.VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\n//# sourceMappingURL=global-utils.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/internal/global-utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/internal/semver.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/internal/semver.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _makeCompatibilityCheck: () => (/* binding */ _makeCompatibilityCheck),\n/* harmony export */   isCompatible: () => (/* binding */ isCompatible)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version */ \"./node_modules/@opentelemetry/api/build/esm/version.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nfunction _makeCompatibilityCheck(ownVersion) {\n    var acceptedVersions = new Set([ownVersion]);\n    var rejectedVersions = new Set();\n    var myVersionMatch = ownVersion.match(re);\n    if (!myVersionMatch) {\n        // we cannot guarantee compatibility so we always return noop\n        return function () { return false; };\n    }\n    var ownVersionParsed = {\n        major: +myVersionMatch[1],\n        minor: +myVersionMatch[2],\n        patch: +myVersionMatch[3],\n        prerelease: myVersionMatch[4],\n    };\n    // if ownVersion has a prerelease tag, versions must match exactly\n    if (ownVersionParsed.prerelease != null) {\n        return function isExactmatch(globalVersion) {\n            return globalVersion === ownVersion;\n        };\n    }\n    function _reject(v) {\n        rejectedVersions.add(v);\n        return false;\n    }\n    function _accept(v) {\n        acceptedVersions.add(v);\n        return true;\n    }\n    return function isCompatible(globalVersion) {\n        if (acceptedVersions.has(globalVersion)) {\n            return true;\n        }\n        if (rejectedVersions.has(globalVersion)) {\n            return false;\n        }\n        var globalVersionMatch = globalVersion.match(re);\n        if (!globalVersionMatch) {\n            // cannot parse other version\n            // we cannot guarantee compatibility so we always noop\n            return _reject(globalVersion);\n        }\n        var globalVersionParsed = {\n            major: +globalVersionMatch[1],\n            minor: +globalVersionMatch[2],\n            patch: +globalVersionMatch[3],\n            prerelease: globalVersionMatch[4],\n        };\n        // if globalVersion has a prerelease tag, versions must match exactly\n        if (globalVersionParsed.prerelease != null) {\n            return _reject(globalVersion);\n        }\n        // major versions must match\n        if (ownVersionParsed.major !== globalVersionParsed.major) {\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.major === 0) {\n            if (ownVersionParsed.minor === globalVersionParsed.minor &&\n                ownVersionParsed.patch <= globalVersionParsed.patch) {\n                return _accept(globalVersion);\n            }\n            return _reject(globalVersion);\n        }\n        if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n            return _accept(globalVersion);\n        }\n        return _reject(globalVersion);\n    };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nvar isCompatible = _makeCompatibilityCheck(_version__WEBPACK_IMPORTED_MODULE_0__.VERSION);\n//# sourceMappingURL=semver.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/internal/semver.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/metrics-api.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics-api.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   metrics: () => (/* binding */ metrics)\n/* harmony export */ });\n/* harmony import */ var _api_metrics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/metrics */ \"./node_modules/@opentelemetry/api/build/esm/api/metrics.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for metrics API */\nvar metrics = _api_metrics__WEBPACK_IMPORTED_MODULE_0__.MetricsAPI.getInstance();\n//# sourceMappingURL=metrics-api.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/metrics-api.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValueType: () => (/* binding */ ValueType)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Type of value. It describes how the data is reported. */\nvar ValueType;\n(function (ValueType) {\n    ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n    ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType || (ValueType = {}));\n//# sourceMappingURL=Metric.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/metrics/Metric.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NOOP_COUNTER_METRIC: () => (/* binding */ NOOP_COUNTER_METRIC),\n/* harmony export */   NOOP_HISTOGRAM_METRIC: () => (/* binding */ NOOP_HISTOGRAM_METRIC),\n/* harmony export */   NOOP_METER: () => (/* binding */ NOOP_METER),\n/* harmony export */   NOOP_OBSERVABLE_COUNTER_METRIC: () => (/* binding */ NOOP_OBSERVABLE_COUNTER_METRIC),\n/* harmony export */   NOOP_OBSERVABLE_GAUGE_METRIC: () => (/* binding */ NOOP_OBSERVABLE_GAUGE_METRIC),\n/* harmony export */   NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC: () => (/* binding */ NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC),\n/* harmony export */   NOOP_UP_DOWN_COUNTER_METRIC: () => (/* binding */ NOOP_UP_DOWN_COUNTER_METRIC),\n/* harmony export */   NoopCounterMetric: () => (/* binding */ NoopCounterMetric),\n/* harmony export */   NoopHistogramMetric: () => (/* binding */ NoopHistogramMetric),\n/* harmony export */   NoopMeter: () => (/* binding */ NoopMeter),\n/* harmony export */   NoopMetric: () => (/* binding */ NoopMetric),\n/* harmony export */   NoopObservableCounterMetric: () => (/* binding */ NoopObservableCounterMetric),\n/* harmony export */   NoopObservableGaugeMetric: () => (/* binding */ NoopObservableGaugeMetric),\n/* harmony export */   NoopObservableMetric: () => (/* binding */ NoopObservableMetric),\n/* harmony export */   NoopObservableUpDownCounterMetric: () => (/* binding */ NoopObservableUpDownCounterMetric),\n/* harmony export */   NoopUpDownCounterMetric: () => (/* binding */ NoopUpDownCounterMetric),\n/* harmony export */   createNoopMeter: () => (/* binding */ createNoopMeter)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */ (function () {\n    function NoopMeter() {\n    }\n    /**\n     * @see {@link Meter.createHistogram}\n     */\n    NoopMeter.prototype.createHistogram = function (_name, _options) {\n        return NOOP_HISTOGRAM_METRIC;\n    };\n    /**\n     * @see {@link Meter.createCounter}\n     */\n    NoopMeter.prototype.createCounter = function (_name, _options) {\n        return NOOP_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createUpDownCounter}\n     */\n    NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n        return NOOP_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableGauge}\n     */\n    NoopMeter.prototype.createObservableGauge = function (_name, _options) {\n        return NOOP_OBSERVABLE_GAUGE_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableCounter}\n     */\n    NoopMeter.prototype.createObservableCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.createObservableUpDownCounter}\n     */\n    NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {\n        return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n    };\n    /**\n     * @see {@link Meter.addBatchObservableCallback}\n     */\n    NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) { };\n    /**\n     * @see {@link Meter.removeBatchObservableCallback}\n     */\n    NoopMeter.prototype.removeBatchObservableCallback = function (_callback) { };\n    return NoopMeter;\n}());\n\nvar NoopMetric = /** @class */ (function () {\n    function NoopMetric() {\n    }\n    return NoopMetric;\n}());\n\nvar NoopCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopCounterMetric, _super);\n    function NoopCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopCounterMetric;\n}(NoopMetric));\n\nvar NoopUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopUpDownCounterMetric, _super);\n    function NoopUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) { };\n    return NoopUpDownCounterMetric;\n}(NoopMetric));\n\nvar NoopHistogramMetric = /** @class */ (function (_super) {\n    __extends(NoopHistogramMetric, _super);\n    function NoopHistogramMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoopHistogramMetric.prototype.record = function (_value, _attributes) { };\n    return NoopHistogramMetric;\n}(NoopMetric));\n\nvar NoopObservableMetric = /** @class */ (function () {\n    function NoopObservableMetric() {\n    }\n    NoopObservableMetric.prototype.addCallback = function (_callback) { };\n    NoopObservableMetric.prototype.removeCallback = function (_callback) { };\n    return NoopObservableMetric;\n}());\n\nvar NoopObservableCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableCounterMetric, _super);\n    function NoopObservableCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableCounterMetric;\n}(NoopObservableMetric));\n\nvar NoopObservableGaugeMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableGaugeMetric, _super);\n    function NoopObservableGaugeMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableGaugeMetric;\n}(NoopObservableMetric));\n\nvar NoopObservableUpDownCounterMetric = /** @class */ (function (_super) {\n    __extends(NoopObservableUpDownCounterMetric, _super);\n    function NoopObservableUpDownCounterMetric() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return NoopObservableUpDownCounterMetric;\n}(NoopObservableMetric));\n\nvar NOOP_METER = new NoopMeter();\n// Synchronous instruments\nvar NOOP_COUNTER_METRIC = new NoopCounterMetric();\nvar NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nvar NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n// Asynchronous instruments\nvar NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nvar NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nvar NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n/**\n * Create a no-op Meter\n */\nfunction createNoopMeter() {\n    return NOOP_METER;\n}\n//# sourceMappingURL=NoopMeter.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NOOP_METER_PROVIDER: () => (/* binding */ NOOP_METER_PROVIDER),\n/* harmony export */   NoopMeterProvider: () => (/* binding */ NoopMeterProvider)\n/* harmony export */ });\n/* harmony import */ var _NoopMeter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopMeter */ \"./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An implementation of the {@link MeterProvider} which returns an impotent Meter\n * for all calls to `getMeter`\n */\nvar NoopMeterProvider = /** @class */ (function () {\n    function NoopMeterProvider() {\n    }\n    NoopMeterProvider.prototype.getMeter = function (_name, _version, _options) {\n        return _NoopMeter__WEBPACK_IMPORTED_MODULE_0__.NOOP_METER;\n    };\n    return NoopMeterProvider;\n}());\n\nvar NOOP_METER_PROVIDER = new NoopMeterProvider();\n//# sourceMappingURL=NoopMeterProvider.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _globalThis: () => (/* binding */ _globalThis)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/core too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nvar _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof __webpack_require__.g === 'object'\n                ? __webpack_require__.g\n                : {};\n//# sourceMappingURL=globalThis.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/propagation-api.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation-api.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   propagation: () => (/* binding */ propagation)\n/* harmony export */ });\n/* harmony import */ var _api_propagation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/propagation */ \"./node_modules/@opentelemetry/api/build/esm/api/propagation.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for propagation API */\nvar propagation = _api_propagation__WEBPACK_IMPORTED_MODULE_0__.PropagationAPI.getInstance();\n//# sourceMappingURL=propagation-api.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/propagation-api.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopTextMapPropagator: () => (/* binding */ NoopTextMapPropagator)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nvar NoopTextMapPropagator = /** @class */ (function () {\n    function NoopTextMapPropagator() {\n    }\n    /** Noop inject function does nothing */\n    NoopTextMapPropagator.prototype.inject = function (_context, _carrier) { };\n    /** Noop extract function does nothing and returns the input context */\n    NoopTextMapPropagator.prototype.extract = function (context, _carrier) {\n        return context;\n    };\n    NoopTextMapPropagator.prototype.fields = function () {\n        return [];\n    };\n    return NoopTextMapPropagator;\n}());\n\n//# sourceMappingURL=NoopTextMapPropagator.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultTextMapGetter: () => (/* binding */ defaultTextMapGetter),\n/* harmony export */   defaultTextMapSetter: () => (/* binding */ defaultTextMapSetter)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nvar defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n//# sourceMappingURL=TextMapPropagator.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace-api.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace-api.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trace: () => (/* binding */ trace)\n/* harmony export */ });\n/* harmony import */ var _api_trace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/trace */ \"./node_modules/@opentelemetry/api/build/esm/api/trace.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\n\n/** Entrypoint for trace API */\nvar trace = _api_trace__WEBPACK_IMPORTED_MODULE_0__.TraceAPI.getInstance();\n//# sourceMappingURL=trace-api.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace-api.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NonRecordingSpan: () => (/* binding */ NonRecordingSpan)\n/* harmony export */ });\n/* harmony import */ var _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalid-span-constants */ \"./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\n\n//# sourceMappingURL=NonRecordingSpan.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopTracer: () => (/* binding */ NoopTracer)\n/* harmony export */ });\n/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/context */ \"./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/* harmony import */ var _trace_context_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../trace/context-utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js\");\n/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NonRecordingSpan */ \"./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\n/* harmony import */ var _spancontext_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./spancontext-utils */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\nvar contextApi = _api_context__WEBPACK_IMPORTED_MODULE_0__.ContextAPI.getInstance();\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        if (context === void 0) { context = contextApi.active(); }\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan();\n        }\n        var parentFromContext = context && (0,_trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.getSpanContext)(context);\n        if (isSpanContext(parentFromContext) &&\n            (0,_spancontext_utils__WEBPACK_IMPORTED_MODULE_3__.isSpanContextValid)(parentFromContext)) {\n            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan(parentFromContext);\n        }\n        else {\n            return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan();\n        }\n    };\n    NoopTracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = (0,_trace_context_utils__WEBPACK_IMPORTED_MODULE_2__.setSpan)(parentContext, span);\n        return contextApi.with(contextWithSpanSet, fn, undefined, span);\n    };\n    return NoopTracer;\n}());\n\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\n//# sourceMappingURL=NoopTracer.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopTracerProvider: () => (/* binding */ NoopTracerProvider)\n/* harmony export */ });\n/* harmony import */ var _NoopTracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracer */ \"./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nvar NoopTracerProvider = /** @class */ (function () {\n    function NoopTracerProvider() {\n    }\n    NoopTracerProvider.prototype.getTracer = function (_name, _version, _options) {\n        return new _NoopTracer__WEBPACK_IMPORTED_MODULE_0__.NoopTracer();\n    };\n    return NoopTracerProvider;\n}());\n\n//# sourceMappingURL=NoopTracerProvider.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProxyTracer: () => (/* binding */ ProxyTracer)\n/* harmony export */ });\n/* harmony import */ var _NoopTracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracer */ \"./node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar NOOP_TRACER = new _NoopTracer__WEBPACK_IMPORTED_MODULE_0__.NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version, options) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n        this.options = options;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n        if (!tracer) {\n            return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\n\n//# sourceMappingURL=ProxyTracer.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProxyTracerProvider: () => (/* binding */ ProxyTracerProvider)\n/* harmony export */ });\n/* harmony import */ var _ProxyTracer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ProxyTracer */ \"./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js\");\n/* harmony import */ var _NoopTracerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopTracerProvider */ \"./node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar NOOP_TRACER_PROVIDER = new _NoopTracerProvider__WEBPACK_IMPORTED_MODULE_0__.NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version, options) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new _ProxyTracer__WEBPACK_IMPORTED_MODULE_1__.ProxyTracer(this, name, version, options));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version, options) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);\n    };\n    return ProxyTracerProvider;\n}());\n\n//# sourceMappingURL=ProxyTracerProvider.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SamplingDecision: () => (/* binding */ SamplingDecision)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=SamplingResult.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deleteSpan: () => (/* binding */ deleteSpan),\n/* harmony export */   getActiveSpan: () => (/* binding */ getActiveSpan),\n/* harmony export */   getSpan: () => (/* binding */ getSpan),\n/* harmony export */   getSpanContext: () => (/* binding */ getSpanContext),\n/* harmony export */   setSpan: () => (/* binding */ setSpan),\n/* harmony export */   setSpanContext: () => (/* binding */ setSpanContext)\n/* harmony export */ });\n/* harmony import */ var _context_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/context */ \"./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NonRecordingSpan */ \"./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\n/* harmony import */ var _api_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/context */ \"./node_modules/@opentelemetry/api/build/esm/api/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * span key\n */\nvar SPAN_KEY = (0,_context_context__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nfunction getSpan(context) {\n    return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Gets the span from the current context, if one exists.\n */\nfunction getActiveSpan() {\n    return getSpan(_api_context__WEBPACK_IMPORTED_MODULE_1__.ContextAPI.getInstance().active());\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nfunction setSpan(context, span) {\n    return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nfunction deleteSpan(context) {\n    return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nfunction setSpanContext(context, spanContext) {\n    return setSpan(context, new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_2__.NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nfunction getSpanContext(context) {\n    var _a;\n    return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}\n//# sourceMappingURL=context-utils.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/context-utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceStateImpl: () => (/* binding */ TraceStateImpl)\n/* harmony export */ });\n/* harmony import */ var _tracestate_validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracestate-validators */ \"./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceStateImpl = /** @class */ (function () {\n    function TraceStateImpl(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceStateImpl.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceStateImpl.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceStateImpl.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceStateImpl.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceStateImpl.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if ((0,_tracestate_validators__WEBPACK_IMPORTED_MODULE_0__.validateKey)(key) && (0,_tracestate_validators__WEBPACK_IMPORTED_MODULE_0__.validateValue)(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceStateImpl.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceStateImpl.prototype._clone = function () {\n        var traceState = new TraceStateImpl();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceStateImpl;\n}());\n\n//# sourceMappingURL=tracestate-impl.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateKey: () => (/* binding */ validateKey),\n/* harmony export */   validateValue: () => (/* binding */ validateValue)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nfunction validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nfunction validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=tracestate-validators.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTraceState: () => (/* binding */ createTraceState)\n/* harmony export */ });\n/* harmony import */ var _tracestate_impl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracestate-impl */ \"./node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction createTraceState(rawTraceState) {\n    return new _tracestate_impl__WEBPACK_IMPORTED_MODULE_0__.TraceStateImpl(rawTraceState);\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INVALID_SPANID: () => (/* binding */ INVALID_SPANID),\n/* harmony export */   INVALID_SPAN_CONTEXT: () => (/* binding */ INVALID_SPAN_CONTEXT),\n/* harmony export */   INVALID_TRACEID: () => (/* binding */ INVALID_TRACEID)\n/* harmony export */ });\n/* harmony import */ var _trace_flags__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trace_flags */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar INVALID_SPANID = '0000000000000000';\nvar INVALID_TRACEID = '00000000000000000000000000000000';\nvar INVALID_SPAN_CONTEXT = {\n    traceId: INVALID_TRACEID,\n    spanId: INVALID_SPANID,\n    traceFlags: _trace_flags__WEBPACK_IMPORTED_MODULE_0__.TraceFlags.NONE,\n};\n//# sourceMappingURL=invalid-span-constants.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpanKind: () => (/* binding */ SpanKind)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SpanKind;\n(function (SpanKind) {\n    /** Default value. Indicates that the span is used internally. */\n    SpanKind[SpanKind[\"INTERNAL\"] = 0] = \"INTERNAL\";\n    /**\n     * Indicates that the span covers server-side handling of an RPC or other\n     * remote request.\n     */\n    SpanKind[SpanKind[\"SERVER\"] = 1] = \"SERVER\";\n    /**\n     * Indicates that the span covers the client-side wrapper around an RPC or\n     * other remote request.\n     */\n    SpanKind[SpanKind[\"CLIENT\"] = 2] = \"CLIENT\";\n    /**\n     * Indicates that the span describes producer sending a message to a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"PRODUCER\"] = 3] = \"PRODUCER\";\n    /**\n     * Indicates that the span describes consumer receiving a message from a\n     * broker. Unlike client and server, there is no direct critical path latency\n     * relationship between producer and consumer spans.\n     */\n    SpanKind[SpanKind[\"CONSUMER\"] = 4] = \"CONSUMER\";\n})(SpanKind || (SpanKind = {}));\n//# sourceMappingURL=span_kind.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSpanContextValid: () => (/* binding */ isSpanContextValid),\n/* harmony export */   isValidSpanId: () => (/* binding */ isValidSpanId),\n/* harmony export */   isValidTraceId: () => (/* binding */ isValidTraceId),\n/* harmony export */   wrapSpanContext: () => (/* binding */ wrapSpanContext)\n/* harmony export */ });\n/* harmony import */ var _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./invalid-span-constants */ \"./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/* harmony import */ var _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NonRecordingSpan */ \"./node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nfunction isValidTraceId(traceId) {\n    return VALID_TRACEID_REGEX.test(traceId) && traceId !== _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_TRACEID;\n}\nfunction isValidSpanId(spanId) {\n    return VALID_SPANID_REGEX.test(spanId) && spanId !== _invalid_span_constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nfunction isSpanContextValid(spanContext) {\n    return (isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId));\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nfunction wrapSpanContext(spanContext) {\n    return new _NonRecordingSpan__WEBPACK_IMPORTED_MODULE_1__.NonRecordingSpan(spanContext);\n}\n//# sourceMappingURL=spancontext-utils.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/status.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/status.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpanStatusCode: () => (/* binding */ SpanStatusCode)\n/* harmony export */ });\n/**\n * An enumeration of status codes.\n */\nvar SpanStatusCode;\n(function (SpanStatusCode) {\n    /**\n     * The default status.\n     */\n    SpanStatusCode[SpanStatusCode[\"UNSET\"] = 0] = \"UNSET\";\n    /**\n     * The operation has been validated by an Application developer or\n     * Operator to have completed successfully.\n     */\n    SpanStatusCode[SpanStatusCode[\"OK\"] = 1] = \"OK\";\n    /**\n     * The operation contains an error.\n     */\n    SpanStatusCode[SpanStatusCode[\"ERROR\"] = 2] = \"ERROR\";\n})(SpanStatusCode || (SpanStatusCode = {}));\n//# sourceMappingURL=status.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/status.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceFlags: () => (/* binding */ TraceFlags)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TraceFlags;\n(function (TraceFlags) {\n    /** Represents no flag set. */\n    TraceFlags[TraceFlags[\"NONE\"] = 0] = \"NONE\";\n    /** Bit to represent whether trace is sampled in trace flags. */\n    TraceFlags[TraceFlags[\"SAMPLED\"] = 1] = \"SAMPLED\";\n})(TraceFlags || (TraceFlags = {}));\n//# sourceMappingURL=trace_flags.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/esm/version.js":
/*!**************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/esm/version.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nvar VERSION = '1.4.1';\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/api/build/esm/version.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/ExportResult.js":
/*!********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/ExportResult.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExportResultCode: () => (/* binding */ ExportResultCode)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/ExportResult.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/baggage/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/baggage/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BAGGAGE_HEADER: () => (/* binding */ BAGGAGE_HEADER),\n/* harmony export */   BAGGAGE_ITEMS_SEPARATOR: () => (/* binding */ BAGGAGE_ITEMS_SEPARATOR),\n/* harmony export */   BAGGAGE_KEY_PAIR_SEPARATOR: () => (/* binding */ BAGGAGE_KEY_PAIR_SEPARATOR),\n/* harmony export */   BAGGAGE_MAX_NAME_VALUE_PAIRS: () => (/* binding */ BAGGAGE_MAX_NAME_VALUE_PAIRS),\n/* harmony export */   BAGGAGE_MAX_PER_NAME_VALUE_PAIRS: () => (/* binding */ BAGGAGE_MAX_PER_NAME_VALUE_PAIRS),\n/* harmony export */   BAGGAGE_MAX_TOTAL_LENGTH: () => (/* binding */ BAGGAGE_MAX_TOTAL_LENGTH),\n/* harmony export */   BAGGAGE_PROPERTIES_SEPARATOR: () => (/* binding */ BAGGAGE_PROPERTIES_SEPARATOR)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nvar BAGGAGE_PROPERTIES_SEPARATOR = ';';\nvar BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nvar BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nvar BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nvar BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nvar BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/baggage/constants.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   W3CBaggagePropagator: () => (/* binding */ W3CBaggagePropagator)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/propagation-api.js\");\n/* harmony import */ var _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../trace/suppress-tracing */ \"./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants */ \"./node_modules/@opentelemetry/core/build/esm/baggage/constants.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"./node_modules/@opentelemetry/core/build/esm/baggage/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar W3CBaggagePropagator = /** @class */ (function () {\n    function W3CBaggagePropagator() {\n    }\n    W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n        var baggage = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.getBaggage(context);\n        if (!baggage || (0,_trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context))\n            return;\n        var keyPairs = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getKeyPairs)(baggage)\n            .filter(function (pair) {\n            return pair.length <= _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        var headerValue = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.serializeKeyPairs)(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_HEADER, headerValue);\n        }\n    };\n    W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n        var headerValue = getter.get(carrier, _constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_HEADER);\n        var baggageString = Array.isArray(headerValue)\n            ? headerValue.join(_constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_ITEMS_SEPARATOR)\n            : headerValue;\n        if (!baggageString)\n            return context;\n        var baggage = {};\n        if (baggageString.length === 0) {\n            return context;\n        }\n        var pairs = baggageString.split(_constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(function (entry) {\n            var keyPair = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.parsePairKeyValue)(entry);\n            if (keyPair) {\n                var baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.setBaggage(context, _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.propagation.createBaggage(baggage));\n    };\n    W3CBaggagePropagator.prototype.fields = function () {\n        return [_constants__WEBPACK_IMPORTED_MODULE_3__.BAGGAGE_HEADER];\n    };\n    return W3CBaggagePropagator;\n}());\n\n//# sourceMappingURL=W3CBaggagePropagator.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/baggage/utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/baggage/utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getKeyPairs: () => (/* binding */ getKeyPairs),\n/* harmony export */   parseKeyPairsIntoRecord: () => (/* binding */ parseKeyPairsIntoRecord),\n/* harmony export */   parsePairKeyValue: () => (/* binding */ parsePairKeyValue),\n/* harmony export */   serializeKeyPairs: () => (/* binding */ serializeKeyPairs)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/baggage/utils.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./node_modules/@opentelemetry/core/build/esm/baggage/constants.js\");\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? _constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > _constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nfunction getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\n        var entry = encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += _constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nfunction parsePairKeyValue(entry) {\n    var valueProps = entry.split(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var separatorIndex = keyPairPart.indexOf(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (separatorIndex <= 0)\n        return;\n    var key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n    var value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.baggageEntryMetadataFromString)(valueProps.join(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nfunction parseKeyPairsIntoRecord(value) {\n    if (typeof value !== 'string' || value.length === 0)\n        return {};\n    return value\n        .split(_constants__WEBPACK_IMPORTED_MODULE_0__.BAGGAGE_ITEMS_SEPARATOR)\n        .map(function (entry) {\n        return parsePairKeyValue(entry);\n    })\n        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })\n        .reduce(function (headers, keyPair) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        headers[keyPair.key] = keyPair.value;\n        return headers;\n    }, {});\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/baggage/utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnchoredClock: () => (/* binding */ AnchoredClock)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A utility for returning wall times anchored to a given point in time. Wall time measurements will\n * not be taken from the system, but instead are computed by adding a monotonic clock time\n * to the anchor point.\n *\n * This is needed because the system time can change and result in unexpected situations like\n * spans ending before they are started. Creating an anchored clock for each local root span\n * ensures that span timings and durations are accurate while preventing span times from drifting\n * too far from the system clock.\n *\n * Only creating an anchored clock once per local trace ensures span times are correct relative\n * to each other. For example, a child span will never have a start time before its parent even\n * if the system clock is corrected during the local trace.\n *\n * Heavily inspired by the OTel Java anchored clock\n * https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/AnchoredClock.java\n */\nvar AnchoredClock = /** @class */ (function () {\n    /**\n     * Create a new AnchoredClock anchored to the current time returned by systemClock.\n     *\n     * @param systemClock should be a clock that returns the number of milliseconds since January 1 1970 such as Date\n     * @param monotonicClock should be a clock that counts milliseconds monotonically such as window.performance or perf_hooks.performance\n     */\n    function AnchoredClock(systemClock, monotonicClock) {\n        this._monotonicClock = monotonicClock;\n        this._epochMillis = systemClock.now();\n        this._performanceMillis = monotonicClock.now();\n    }\n    /**\n     * Returns the current time by adding the number of milliseconds since the\n     * AnchoredClock was created to the creation epoch time\n     */\n    AnchoredClock.prototype.now = function () {\n        var delta = this._monotonicClock.now() - this._performanceMillis;\n        return this._epochMillis + delta;\n    };\n    return AnchoredClock;\n}());\n\n//# sourceMappingURL=anchored-clock.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/common/attributes.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/attributes.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAttributeKey: () => (/* binding */ isAttributeKey),\n/* harmony export */   isAttributeValue: () => (/* binding */ isAttributeValue),\n/* harmony export */   sanitizeAttributes: () => (/* binding */ sanitizeAttributes)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n\nfunction sanitizeAttributes(attributes) {\n    var e_1, _a;\n    var out = {};\n    if (typeof attributes !== 'object' || attributes == null) {\n        return out;\n    }\n    try {\n        for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read(_c.value, 2), key = _d[0], val = _d[1];\n            if (!isAttributeKey(key)) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Invalid attribute key: \" + key);\n                continue;\n            }\n            if (!isAttributeValue(val)) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Invalid attribute value set for key: \" + key);\n                continue;\n            }\n            if (Array.isArray(val)) {\n                out[key] = val.slice();\n            }\n            else {\n                out[key] = val;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return out;\n}\nfunction isAttributeKey(key) {\n    return typeof key === 'string' && key.length > 0;\n}\nfunction isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    var e_2, _a;\n    var type;\n    try {\n        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n            var element = arr_1_1.value;\n            // null/undefined elements are allowed\n            if (element == null)\n                continue;\n            if (!type) {\n                if (isValidPrimitiveAttributeValue(element)) {\n                    type = typeof element;\n                    continue;\n                }\n                // encountered an invalid primitive\n                return false;\n            }\n            if (typeof element === type) {\n                continue;\n            }\n            return false;\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/common/attributes.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   globalErrorHandler: () => (/* binding */ globalErrorHandler),\n/* harmony export */   setGlobalErrorHandler: () => (/* binding */ setGlobalErrorHandler)\n/* harmony export */ });\n/* harmony import */ var _logging_error_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./logging-error-handler */ \"./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The global error handler delegate */\nvar delegateHandler = (0,_logging_error_handler__WEBPACK_IMPORTED_MODULE_0__.loggingErrorHandler)();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nfunction setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nfunction globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch (_a) { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loggingErrorHandler: () => (/* binding */ loggingErrorHandler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nfunction loggingErrorHandler() {\n    return function (ex) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/common/time.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/common/time.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHrTimes: () => (/* binding */ addHrTimes),\n/* harmony export */   getTimeOrigin: () => (/* binding */ getTimeOrigin),\n/* harmony export */   hrTime: () => (/* binding */ hrTime),\n/* harmony export */   hrTimeDuration: () => (/* binding */ hrTimeDuration),\n/* harmony export */   hrTimeToMicroseconds: () => (/* binding */ hrTimeToMicroseconds),\n/* harmony export */   hrTimeToMilliseconds: () => (/* binding */ hrTimeToMilliseconds),\n/* harmony export */   hrTimeToNanoseconds: () => (/* binding */ hrTimeToNanoseconds),\n/* harmony export */   hrTimeToTimeStamp: () => (/* binding */ hrTimeToTimeStamp),\n/* harmony export */   isTimeInput: () => (/* binding */ isTimeInput),\n/* harmony export */   isTimeInputHrTime: () => (/* binding */ isTimeInputHrTime),\n/* harmony export */   millisToHrTime: () => (/* binding */ millisToHrTime),\n/* harmony export */   timeInputToHrTime: () => (/* binding */ timeInputToHrTime)\n/* harmony export */ });\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar NANOSECOND_DIGITS = 9;\nvar NANOSECOND_DIGITS_IN_MILLIS = 6;\nvar MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nfunction millisToHrTime(epochMillis) {\n    var epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    var seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n    var timeOrigin = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        var perf = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nfunction hrTime(performanceNow) {\n    var timeOrigin = millisToHrTime(getTimeOrigin());\n    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nfunction timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return millisToHrTime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return millisToHrTime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nfunction hrTimeDuration(startTime, endTime) {\n    var seconds = endTime[0] - startTime[0];\n    var nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nfunction hrTimeToTimeStamp(time) {\n    var precision = NANOSECOND_DIGITS;\n    var tmp = \"\" + '0'.repeat(precision) + time[1] + \"Z\";\n    var nanoString = tmp.substr(tmp.length - precision - 1);\n    var date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nfunction hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nfunction hrTimeToMilliseconds(time) {\n    return time[0] * 1e3 + time[1] / 1e6;\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nfunction hrTimeToMicroseconds(time) {\n    return time[0] * 1e6 + time[1] / 1e3;\n}\n/**\n * check if time is HrTime\n * @param value\n */\nfunction isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nfunction isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nfunction addHrTimes(time1, time2) {\n    var out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n//# sourceMappingURL=time.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/common/time.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOffSampler: () => (/* reexport safe */ _trace_sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_13__.AlwaysOffSampler),\n/* harmony export */   AlwaysOnSampler: () => (/* reexport safe */ _trace_sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_14__.AlwaysOnSampler),\n/* harmony export */   AnchoredClock: () => (/* reexport safe */ _common_anchored_clock__WEBPACK_IMPORTED_MODULE_1__.AnchoredClock),\n/* harmony export */   BindOnceFuture: () => (/* reexport safe */ _utils_callback__WEBPACK_IMPORTED_MODULE_25__.BindOnceFuture),\n/* harmony export */   CompositePropagator: () => (/* reexport safe */ _propagation_composite__WEBPACK_IMPORTED_MODULE_10__.CompositePropagator),\n/* harmony export */   DEFAULT_ATTRIBUTE_COUNT_LIMIT: () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_19__.DEFAULT_ATTRIBUTE_COUNT_LIMIT),\n/* harmony export */   DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT: () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_19__.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT),\n/* harmony export */   DEFAULT_ENVIRONMENT: () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_19__.DEFAULT_ENVIRONMENT),\n/* harmony export */   DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_19__.DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT),\n/* harmony export */   DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_19__.DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT),\n/* harmony export */   ExportResultCode: () => (/* reexport safe */ _ExportResult__WEBPACK_IMPORTED_MODULE_6__.ExportResultCode),\n/* harmony export */   ParentBasedSampler: () => (/* reexport safe */ _trace_sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_15__.ParentBasedSampler),\n/* harmony export */   RPCType: () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_12__.RPCType),\n/* harmony export */   RandomIdGenerator: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.RandomIdGenerator),\n/* harmony export */   SDK_INFO: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.SDK_INFO),\n/* harmony export */   TRACE_PARENT_HEADER: () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_11__.TRACE_PARENT_HEADER),\n/* harmony export */   TRACE_STATE_HEADER: () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_11__.TRACE_STATE_HEADER),\n/* harmony export */   TimeoutError: () => (/* reexport safe */ _utils_timeout__WEBPACK_IMPORTED_MODULE_22__.TimeoutError),\n/* harmony export */   TraceIdRatioBasedSampler: () => (/* reexport safe */ _trace_sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_16__.TraceIdRatioBasedSampler),\n/* harmony export */   TraceState: () => (/* reexport safe */ _trace_TraceState__WEBPACK_IMPORTED_MODULE_18__.TraceState),\n/* harmony export */   TracesSamplerValues: () => (/* reexport safe */ _utils_sampling__WEBPACK_IMPORTED_MODULE_21__.TracesSamplerValues),\n/* harmony export */   VERSION: () => (/* reexport safe */ _version__WEBPACK_IMPORTED_MODULE_7__.VERSION),\n/* harmony export */   W3CBaggagePropagator: () => (/* reexport safe */ _baggage_propagation_W3CBaggagePropagator__WEBPACK_IMPORTED_MODULE_0__.W3CBaggagePropagator),\n/* harmony export */   W3CTraceContextPropagator: () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_11__.W3CTraceContextPropagator),\n/* harmony export */   _globalThis: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__._globalThis),\n/* harmony export */   addHrTimes: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.addHrTimes),\n/* harmony export */   baggageUtils: () => (/* reexport module object */ _baggage_utils__WEBPACK_IMPORTED_MODULE_8__),\n/* harmony export */   callWithTimeout: () => (/* reexport safe */ _utils_timeout__WEBPACK_IMPORTED_MODULE_22__.callWithTimeout),\n/* harmony export */   deleteRPCMetadata: () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_12__.deleteRPCMetadata),\n/* harmony export */   getEnv: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.getEnv),\n/* harmony export */   getEnvWithoutDefaults: () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_19__.getEnvWithoutDefaults),\n/* harmony export */   getRPCMetadata: () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_12__.getRPCMetadata),\n/* harmony export */   getTimeOrigin: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.getTimeOrigin),\n/* harmony export */   globalErrorHandler: () => (/* reexport safe */ _common_global_error_handler__WEBPACK_IMPORTED_MODULE_3__.globalErrorHandler),\n/* harmony export */   hexToBase64: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.hexToBase64),\n/* harmony export */   hrTime: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTime),\n/* harmony export */   hrTimeDuration: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTimeDuration),\n/* harmony export */   hrTimeToMicroseconds: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTimeToMicroseconds),\n/* harmony export */   hrTimeToMilliseconds: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTimeToMilliseconds),\n/* harmony export */   hrTimeToNanoseconds: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTimeToNanoseconds),\n/* harmony export */   hrTimeToTimeStamp: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.hrTimeToTimeStamp),\n/* harmony export */   internal: () => (/* binding */ internal),\n/* harmony export */   isAttributeKey: () => (/* reexport safe */ _common_attributes__WEBPACK_IMPORTED_MODULE_2__.isAttributeKey),\n/* harmony export */   isAttributeValue: () => (/* reexport safe */ _common_attributes__WEBPACK_IMPORTED_MODULE_2__.isAttributeValue),\n/* harmony export */   isTimeInput: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.isTimeInput),\n/* harmony export */   isTimeInputHrTime: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.isTimeInputHrTime),\n/* harmony export */   isTracingSuppressed: () => (/* reexport safe */ _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_17__.isTracingSuppressed),\n/* harmony export */   isUrlIgnored: () => (/* reexport safe */ _utils_url__WEBPACK_IMPORTED_MODULE_23__.isUrlIgnored),\n/* harmony export */   isWrapped: () => (/* reexport safe */ _utils_wrap__WEBPACK_IMPORTED_MODULE_24__.isWrapped),\n/* harmony export */   loggingErrorHandler: () => (/* reexport safe */ _common_logging_error_handler__WEBPACK_IMPORTED_MODULE_4__.loggingErrorHandler),\n/* harmony export */   merge: () => (/* reexport safe */ _utils_merge__WEBPACK_IMPORTED_MODULE_20__.merge),\n/* harmony export */   millisToHrTime: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.millisToHrTime),\n/* harmony export */   otperformance: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.otperformance),\n/* harmony export */   parseEnvironment: () => (/* reexport safe */ _utils_environment__WEBPACK_IMPORTED_MODULE_19__.parseEnvironment),\n/* harmony export */   parseTraceParent: () => (/* reexport safe */ _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_11__.parseTraceParent),\n/* harmony export */   sanitizeAttributes: () => (/* reexport safe */ _common_attributes__WEBPACK_IMPORTED_MODULE_2__.sanitizeAttributes),\n/* harmony export */   setGlobalErrorHandler: () => (/* reexport safe */ _common_global_error_handler__WEBPACK_IMPORTED_MODULE_3__.setGlobalErrorHandler),\n/* harmony export */   setRPCMetadata: () => (/* reexport safe */ _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_12__.setRPCMetadata),\n/* harmony export */   suppressTracing: () => (/* reexport safe */ _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_17__.suppressTracing),\n/* harmony export */   timeInputToHrTime: () => (/* reexport safe */ _common_time__WEBPACK_IMPORTED_MODULE_5__.timeInputToHrTime),\n/* harmony export */   unrefTimer: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_9__.unrefTimer),\n/* harmony export */   unsuppressTracing: () => (/* reexport safe */ _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_17__.unsuppressTracing),\n/* harmony export */   urlMatches: () => (/* reexport safe */ _utils_url__WEBPACK_IMPORTED_MODULE_23__.urlMatches)\n/* harmony export */ });\n/* harmony import */ var _baggage_propagation_W3CBaggagePropagator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baggage/propagation/W3CBaggagePropagator */ \"./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js\");\n/* harmony import */ var _common_anchored_clock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/anchored-clock */ \"./node_modules/@opentelemetry/core/build/esm/common/anchored-clock.js\");\n/* harmony import */ var _common_attributes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common/attributes */ \"./node_modules/@opentelemetry/core/build/esm/common/attributes.js\");\n/* harmony import */ var _common_global_error_handler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common/global-error-handler */ \"./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _common_logging_error_handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common/logging-error-handler */ \"./node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js\");\n/* harmony import */ var _common_time__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common/time */ \"./node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _ExportResult__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ExportResult */ \"./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version */ \"./node_modules/@opentelemetry/core/build/esm/version.js\");\n/* harmony import */ var _baggage_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./baggage/utils */ \"./node_modules/@opentelemetry/core/build/esm/baggage/utils.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/index.js\");\n/* harmony import */ var _propagation_composite__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./propagation/composite */ \"./node_modules/@opentelemetry/core/build/esm/propagation/composite.js\");\n/* harmony import */ var _trace_W3CTraceContextPropagator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./trace/W3CTraceContextPropagator */ \"./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js\");\n/* harmony import */ var _trace_rpc_metadata__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./trace/rpc-metadata */ \"./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js\");\n/* harmony import */ var _trace_sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./trace/sampler/AlwaysOffSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _trace_sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./trace/sampler/AlwaysOnSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js\");\n/* harmony import */ var _trace_sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./trace/sampler/ParentBasedSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js\");\n/* harmony import */ var _trace_sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./trace/sampler/TraceIdRatioBasedSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js\");\n/* harmony import */ var _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./trace/suppress-tracing */ \"./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _trace_TraceState__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./trace/TraceState */ \"./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js\");\n/* harmony import */ var _utils_environment__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/environment */ \"./node_modules/@opentelemetry/core/build/esm/utils/environment.js\");\n/* harmony import */ var _utils_merge__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils/merge */ \"./node_modules/@opentelemetry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _utils_sampling__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utils/sampling */ \"./node_modules/@opentelemetry/core/build/esm/utils/sampling.js\");\n/* harmony import */ var _utils_timeout__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utils/timeout */ \"./node_modules/@opentelemetry/core/build/esm/utils/timeout.js\");\n/* harmony import */ var _utils_url__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./utils/url */ \"./node_modules/@opentelemetry/core/build/esm/utils/url.js\");\n/* harmony import */ var _utils_wrap__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./utils/wrap */ \"./node_modules/@opentelemetry/core/build/esm/utils/wrap.js\");\n/* harmony import */ var _utils_callback__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./utils/callback */ \"./node_modules/@opentelemetry/core/build/esm/utils/callback.js\");\n/* harmony import */ var _internal_exporter__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./internal/exporter */ \"./node_modules/@opentelemetry/core/build/esm/internal/exporter.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar internal = {\n    _export: _internal_exporter__WEBPACK_IMPORTED_MODULE_26__._export,\n};\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/internal/exporter.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/internal/exporter.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _export: () => (/* binding */ _export)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../trace/suppress-tracing */ \"./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppresion of Traces.\n */\nfunction _export(exporter, arg) {\n    return new Promise(function (resolve) {\n        // prevent downstream exporter calls from generating spans\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.with((0,_trace_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.suppressTracing)(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.context.active()), function () {\n            exporter.export(arg, function (result) {\n                resolve(result);\n            });\n        });\n    });\n}\n//# sourceMappingURL=exporter.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/internal/exporter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/internal/validators.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/internal/validators.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateKey: () => (/* binding */ validateKey),\n/* harmony export */   validateValue: () => (/* binding */ validateValue)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nfunction validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nfunction validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=validators.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/internal/validators.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RandomIdGenerator: () => (/* binding */ RandomIdGenerator)\n/* harmony export */ });\nvar SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n */\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\n\nvar SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes * 2; i++) {\n            SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n            // valid hex characters in the range 48-57 and 97-102\n            if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n                SHARED_CHAR_CODES_ARRAY[i] += 39;\n            }\n        }\n        return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* binding */ getEnv)\n/* harmony export */ });\n/* harmony import */ var _utils_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/environment */ \"./node_modules/@opentelemetry/core/build/esm/utils/environment.js\");\n/* harmony import */ var _globalThis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globalThis */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Gets the environment variables\n */\nfunction getEnv() {\n    var globalEnv = (0,_utils_environment__WEBPACK_IMPORTED_MODULE_0__.parseEnvironment)(_globalThis__WEBPACK_IMPORTED_MODULE_1__._globalThis);\n    return Object.assign({}, _utils_environment__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ENVIRONMENT, globalEnv);\n}\n//# sourceMappingURL=environment.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _globalThis: () => (/* binding */ _globalThis)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/api too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nvar _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof __webpack_require__.g === 'object'\n                ? __webpack_require__.g\n                : {};\n//# sourceMappingURL=globalThis.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hexToBase64: () => (/* binding */ hexToBase64)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction hexToBase64(hexStr) {\n    var hexStrLen = hexStr.length;\n    var hexAsciiCharsStr = '';\n    for (var i = 0; i < hexStrLen; i += 2) {\n        var hexPair = hexStr.substring(i, i + 2);\n        var hexVal = parseInt(hexPair, 16);\n        hexAsciiCharsStr += String.fromCharCode(hexVal);\n    }\n    return btoa(hexAsciiCharsStr);\n}\n//# sourceMappingURL=hex-to-base64.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RandomIdGenerator: () => (/* reexport safe */ _RandomIdGenerator__WEBPACK_IMPORTED_MODULE_3__.RandomIdGenerator),\n/* harmony export */   SDK_INFO: () => (/* reexport safe */ _sdk_info__WEBPACK_IMPORTED_MODULE_5__.SDK_INFO),\n/* harmony export */   _globalThis: () => (/* reexport safe */ _globalThis__WEBPACK_IMPORTED_MODULE_1__._globalThis),\n/* harmony export */   getEnv: () => (/* reexport safe */ _environment__WEBPACK_IMPORTED_MODULE_0__.getEnv),\n/* harmony export */   hexToBase64: () => (/* reexport safe */ _hex_to_base64__WEBPACK_IMPORTED_MODULE_2__.hexToBase64),\n/* harmony export */   otperformance: () => (/* reexport safe */ _performance__WEBPACK_IMPORTED_MODULE_4__.otperformance),\n/* harmony export */   unrefTimer: () => (/* reexport safe */ _timer_util__WEBPACK_IMPORTED_MODULE_6__.unrefTimer)\n/* harmony export */ });\n/* harmony import */ var _environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js\");\n/* harmony import */ var _globalThis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globalThis */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js\");\n/* harmony import */ var _hex_to_base64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hex-to-base64 */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js\");\n/* harmony import */ var _RandomIdGenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RandomIdGenerator */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js\");\n/* harmony import */ var _performance__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./performance */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js\");\n/* harmony import */ var _sdk_info__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sdk-info */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js\");\n/* harmony import */ var _timer_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./timer-util */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   otperformance: () => (/* binding */ otperformance)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar otperformance = performance;\n//# sourceMappingURL=performance.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SDK_INFO: () => (/* binding */ SDK_INFO)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../version */ \"./node_modules/@opentelemetry/core/build/esm/version.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\n\n\n/** Constants describing the SDK in use */\nvar SDK_INFO = (_a = {},\n    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.TELEMETRY_SDK_NAME] = 'opentelemetry',\n    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = 'browser',\n    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.TelemetrySdkLanguageValues.WEBJS,\n    _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_0__.SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = _version__WEBPACK_IMPORTED_MODULE_1__.VERSION,\n    _a);\n//# sourceMappingURL=sdk-info.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unrefTimer: () => (/* binding */ unrefTimer)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction unrefTimer(_timer) { }\n//# sourceMappingURL=timer-util.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/propagation/composite.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/propagation/composite.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompositePropagator: () => (/* binding */ CompositePropagator)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */ (function () {\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    function CompositePropagator(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(function (p) { return (typeof p.fields === 'function' ? p.fields() : []); })\n            .reduce(function (x, y) { return x.concat(y); }, [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    CompositePropagator.prototype.inject = function (context, carrier, setter) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this._propagators), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var propagator = _c.value;\n                try {\n                    propagator.inject(context, carrier, setter);\n                }\n                catch (err) {\n                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    CompositePropagator.prototype.extract = function (context, carrier, getter) {\n        return this._propagators.reduce(function (ctx, propagator) {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n            return ctx;\n        }, context);\n    };\n    CompositePropagator.prototype.fields = function () {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    };\n    return CompositePropagator;\n}());\n\n//# sourceMappingURL=composite.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/propagation/composite.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceState: () => (/* binding */ TraceState)\n/* harmony export */ });\n/* harmony import */ var _internal_validators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/validators */ \"./node_modules/@opentelemetry/core/build/esm/internal/validators.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceState = /** @class */ (function () {\n    function TraceState(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceState.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceState.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceState.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceState.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceState.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if ((0,_internal_validators__WEBPACK_IMPORTED_MODULE_0__.validateKey)(key) && (0,_internal_validators__WEBPACK_IMPORTED_MODULE_0__.validateValue)(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceState.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceState.prototype._clone = function () {\n        var traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceState;\n}());\n\n//# sourceMappingURL=TraceState.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACE_PARENT_HEADER: () => (/* binding */ TRACE_PARENT_HEADER),\n/* harmony export */   TRACE_STATE_HEADER: () => (/* binding */ TRACE_STATE_HEADER),\n/* harmony export */   W3CTraceContextPropagator: () => (/* binding */ W3CTraceContextPropagator),\n/* harmony export */   parseTraceParent: () => (/* binding */ parseTraceParent)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _suppress_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./suppress-tracing */ \"./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _TraceState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./TraceState */ \"./node_modules/@opentelemetry/core/build/esm/trace/TraceState.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar TRACE_PARENT_HEADER = 'traceparent';\nvar TRACE_STATE_HEADER = 'tracestate';\nvar VERSION = '00';\nvar VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nvar TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nvar PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nvar FLAGS_PART = '[\\\\da-f]{2}';\nvar TRACE_PARENT_REGEX = new RegExp(\"^\\\\s?(\" + VERSION_PART + \")-(\" + TRACE_ID_PART + \")-(\" + PARENT_ID_PART + \")-(\" + FLAGS_PART + \")(-.*)?\\\\s?$\");\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nfunction parseTraceParent(traceParent) {\n    var match = TRACE_PARENT_REGEX.exec(traceParent);\n    if (!match)\n        return null;\n    // According to the specification the implementation should be compatible\n    // with future versions. If there are more parts, we only reject it if it's using version 00\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n    if (match[1] === '00' && match[5])\n        return null;\n    return {\n        traceId: match[2],\n        spanId: match[3],\n        traceFlags: parseInt(match[4], 16),\n    };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nvar W3CTraceContextPropagator = /** @class */ (function () {\n    function W3CTraceContextPropagator() {\n    }\n    W3CTraceContextPropagator.prototype.inject = function (context, carrier, setter) {\n        var spanContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.getSpanContext(context);\n        if (!spanContext ||\n            (0,_suppress_tracing__WEBPACK_IMPORTED_MODULE_1__.isTracingSuppressed)(context) ||\n            !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.isSpanContextValid)(spanContext))\n            return;\n        var traceParent = VERSION + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-0\" + Number(spanContext.traceFlags || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.TraceFlags.NONE).toString(16);\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    };\n    W3CTraceContextPropagator.prototype.extract = function (context, carrier, getter) {\n        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        var traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        var spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            var state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new _TraceState__WEBPACK_IMPORTED_MODULE_4__.TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.trace.setSpanContext(context, spanContext);\n    };\n    W3CTraceContextPropagator.prototype.fields = function () {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n    };\n    return W3CTraceContextPropagator;\n}());\n\n//# sourceMappingURL=W3CTraceContextPropagator.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RPCType: () => (/* binding */ RPCType),\n/* harmony export */   deleteRPCMetadata: () => (/* binding */ deleteRPCMetadata),\n/* harmony export */   getRPCMetadata: () => (/* binding */ getRPCMetadata),\n/* harmony export */   setRPCMetadata: () => (/* binding */ setRPCMetadata)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar RPC_METADATA_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry SDK Context Key RPC_METADATA');\nvar RPCType;\n(function (RPCType) {\n    RPCType[\"HTTP\"] = \"http\";\n})(RPCType || (RPCType = {}));\nfunction setRPCMetadata(context, meta) {\n    return context.setValue(RPC_METADATA_KEY, meta);\n}\nfunction deleteRPCMetadata(context) {\n    return context.deleteValue(RPC_METADATA_KEY);\n}\nfunction getRPCMetadata(context) {\n    return context.getValue(RPC_METADATA_KEY);\n}\n//# sourceMappingURL=rpc-metadata.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/trace/rpc-metadata.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOffSampler: () => (/* binding */ AlwaysOffSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples no traces.\n */\nvar AlwaysOffSampler = /** @class */ (function () {\n    function AlwaysOffSampler() {\n    }\n    AlwaysOffSampler.prototype.shouldSample = function () {\n        return {\n            decision: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.NOT_RECORD,\n        };\n    };\n    AlwaysOffSampler.prototype.toString = function () {\n        return 'AlwaysOffSampler';\n    };\n    return AlwaysOffSampler;\n}());\n\n//# sourceMappingURL=AlwaysOffSampler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOnSampler: () => (/* binding */ AlwaysOnSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples all traces.\n */\nvar AlwaysOnSampler = /** @class */ (function () {\n    function AlwaysOnSampler() {\n    }\n    AlwaysOnSampler.prototype.shouldSample = function () {\n        return {\n            decision: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    };\n    AlwaysOnSampler.prototype.toString = function () {\n        return 'AlwaysOnSampler';\n    };\n    return AlwaysOnSampler;\n}());\n\n//# sourceMappingURL=AlwaysOnSampler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParentBasedSampler: () => (/* binding */ ParentBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _common_global_error_handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../common/global-error-handler */ \"./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AlwaysOffSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AlwaysOnSampler */ \"./node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            (0,_common_global_error_handler__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpanContext(context);\n        if (!parentContext || !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.isSpanContextValid)(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n    };\n    return ParentBasedSampler;\n}());\n\n//# sourceMappingURL=ParentBasedSampler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceIdRatioBasedSampler: () => (/* binding */ TraceIdRatioBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples a given fraction of traces based of trace id deterministically.\n */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidTraceId)(traceId) && this._accumulate(traceId) < this._upperBound\n                ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.RECORD_AND_SAMPLED\n                : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\n\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTracingSuppressed: () => (/* binding */ isTracingSuppressed),\n/* harmony export */   suppressTracing: () => (/* binding */ suppressTracing),\n/* harmony export */   unsuppressTracing: () => (/* binding */ unsuppressTracing)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/context/context.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar SUPPRESS_TRACING_KEY = (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.createContextKey)('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nfunction suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nfunction unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nfunction isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/callback.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/callback.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BindOnceFuture: () => (/* binding */ BindOnceFuture)\n/* harmony export */ });\n/* harmony import */ var _promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./promise */ \"./node_modules/@opentelemetry/core/build/esm/utils/promise.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nvar BindOnceFuture = /** @class */ (function () {\n    function BindOnceFuture(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n        this._isCalled = false;\n        this._deferred = new _promise__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n    }\n    Object.defineProperty(BindOnceFuture.prototype, \"isCalled\", {\n        get: function () {\n            return this._isCalled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BindOnceFuture.prototype, \"promise\", {\n        get: function () {\n            return this._deferred.promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BindOnceFuture.prototype.call = function () {\n        var _a;\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this._isCalled) {\n            this._isCalled = true;\n            try {\n                Promise.resolve((_a = this._callback).call.apply(_a, __spreadArray([this._that], __read(args), false))).then(function (val) { return _this._deferred.resolve(val); }, function (err) { return _this._deferred.reject(err); });\n            }\n            catch (err) {\n                this._deferred.reject(err);\n            }\n        }\n        return this._deferred.promise;\n    };\n    return BindOnceFuture;\n}());\n\n//# sourceMappingURL=callback.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/utils/callback.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/environment.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/environment.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ATTRIBUTE_COUNT_LIMIT: () => (/* binding */ DEFAULT_ATTRIBUTE_COUNT_LIMIT),\n/* harmony export */   DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT: () => (/* binding */ DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT),\n/* harmony export */   DEFAULT_ENVIRONMENT: () => (/* binding */ DEFAULT_ENVIRONMENT),\n/* harmony export */   DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: () => (/* binding */ DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT),\n/* harmony export */   DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: () => (/* binding */ DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT),\n/* harmony export */   getEnvWithoutDefaults: () => (/* binding */ getEnvWithoutDefaults),\n/* harmony export */   parseEnvironment: () => (/* binding */ parseEnvironment)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/* harmony import */ var _sampling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sampling */ \"./node_modules/@opentelemetry/core/build/esm/utils/sampling.js\");\n/* harmony import */ var _platform_browser_globalThis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../platform/browser/globalThis */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'];\nfunction isEnvVarABoolean(key) {\n    return (ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_BLRP_EXPORT_TIMEOUT',\n    'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BLRP_MAX_QUEUE_SIZE',\n    'OTEL_BLRP_SCHEDULE_DELAY',\n    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n    'OTEL_EXPORTER_OTLP_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n    'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nvar DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nvar DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nvar DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nvar DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nvar DEFAULT_ENVIRONMENT = {\n    OTEL_SDK_DISABLED: false,\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n    OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BLRP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    OTEL_TRACES_EXPORTER: '',\n    OTEL_TRACES_SAMPLER: _sampling__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n    OTEL_LOGS_EXPORTER: '',\n    OTEL_EXPORTER_OTLP_INSECURE: '',\n    OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n    OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(key, environment, values) {\n    if (typeof values[key] === 'undefined') {\n        return;\n    }\n    var value = String(values[key]);\n    // support case-insensitive \"true\"\n    environment[key] = value.toLowerCase() === 'true';\n}\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL,\n    VERBOSE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.VERBOSE,\n    DEBUG: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.DEBUG,\n    INFO: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO,\n    WARN: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.WARN,\n    ERROR: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ERROR,\n    NONE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nfunction parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarABoolean(key)) {\n                    parseBoolean(key, environment, values);\n                }\n                else if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n/**\n * Get environment in node or browser without\n * populating default values.\n */\nfunction getEnvWithoutDefaults() {\n    return typeof process !== 'undefined' && process && process.env\n        ? parseEnvironment(process.env)\n        : parseEnvironment(_platform_browser_globalThis__WEBPACK_IMPORTED_MODULE_2__._globalThis);\n}\n//# sourceMappingURL=environment.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/utils/environment.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nvar objectTag = '[object Object]';\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\nvar funcProto = Function.prototype;\nvar funcToString = funcProto.toString;\nvar objectCtorString = funcToString.call(Object);\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\nvar objectProto = Object.prototype;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nvar nativeObjectToString = objectProto.toString;\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n    return function (arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    var proto = getPrototype(value);\n    if (proto === null) {\n        return true;\n    }\n    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString);\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value)\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    var unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch (e) {\n        // silence\n    }\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n//# sourceMappingURL=lodash.merge.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/merge.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/merge.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   merge: () => (/* binding */ merge)\n/* harmony export */ });\n/* harmony import */ var _lodash_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lodash.merge */ \"./node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nvar MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nfunction merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var result = args.shift();\n    var objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level, objects) {\n    if (level === void 0) { level = 0; }\n    var result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (var i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                var twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    var obj1 = result[key];\n                    var obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            var arr1 = objects.get(obj1) || [];\n                            var arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key: key });\n                            arr2.push({ obj: two, key: key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    var arr = objects.get(obj[key]) || [];\n    for (var i = 0, j = arr.length; i < j; i++) {\n        var info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return (!isPrimitive(value) &&\n        !isArray(value) &&\n        !isFunction(value) &&\n        typeof value === 'object');\n}\nfunction isPrimitive(value) {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null);\n}\nfunction shouldMerge(one, two) {\n    if (!(0,_lodash_merge__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(one) || !(0,_lodash_merge__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(two)) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=merge.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/utils/merge.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/promise.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/promise.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deferred: () => (/* binding */ Deferred)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this._promise = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n    }\n    Object.defineProperty(Deferred.prototype, \"promise\", {\n        get: function () {\n            return this._promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Deferred.prototype.resolve = function (val) {\n        this._resolve(val);\n    };\n    Deferred.prototype.reject = function (err) {\n        this._reject(err);\n    };\n    return Deferred;\n}());\n\n//# sourceMappingURL=promise.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/utils/promise.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/sampling.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/sampling.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TracesSamplerValues: () => (/* binding */ TracesSamplerValues)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n//# sourceMappingURL=sampling.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/utils/sampling.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/timeout.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/timeout.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TimeoutError: () => (/* binding */ TimeoutError),\n/* harmony export */   callWithTimeout: () => (/* binding */ callWithTimeout)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Error that is thrown on timeouts.\n */\nvar TimeoutError = /** @class */ (function (_super) {\n    __extends(TimeoutError, _super);\n    function TimeoutError(message) {\n        var _this = _super.call(this, message) || this;\n        // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(_this, TimeoutError.prototype);\n        return _this;\n    }\n    return TimeoutError;\n}(Error));\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nfunction callWithTimeout(promise, timeout) {\n    var timeoutHandle;\n    var timeoutPromise = new Promise(function timeoutFunction(_resolve, reject) {\n        timeoutHandle = setTimeout(function timeoutHandler() {\n            reject(new TimeoutError('Operation timed out.'));\n        }, timeout);\n    });\n    return Promise.race([promise, timeoutPromise]).then(function (result) {\n        clearTimeout(timeoutHandle);\n        return result;\n    }, function (reason) {\n        clearTimeout(timeoutHandle);\n        throw reason;\n    });\n}\n//# sourceMappingURL=timeout.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/utils/timeout.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/url.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/url.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isUrlIgnored: () => (/* binding */ isUrlIgnored),\n/* harmony export */   urlMatches: () => (/* binding */ urlMatches)\n/* harmony export */ });\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction urlMatches(url, urlToMatch) {\n    if (typeof urlToMatch === 'string') {\n        return url === urlToMatch;\n    }\n    else {\n        return !!url.match(urlToMatch);\n    }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nfunction isUrlIgnored(url, ignoredUrls) {\n    var e_1, _a;\n    if (!ignoredUrls) {\n        return false;\n    }\n    try {\n        for (var ignoredUrls_1 = __values(ignoredUrls), ignoredUrls_1_1 = ignoredUrls_1.next(); !ignoredUrls_1_1.done; ignoredUrls_1_1 = ignoredUrls_1.next()) {\n            var ignoreUrl = ignoredUrls_1_1.value;\n            if (urlMatches(url, ignoreUrl)) {\n                return true;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (ignoredUrls_1_1 && !ignoredUrls_1_1.done && (_a = ignoredUrls_1.return)) _a.call(ignoredUrls_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return false;\n}\n//# sourceMappingURL=url.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/utils/url.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/utils/wrap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/utils/wrap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isWrapped: () => (/* binding */ isWrapped)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nfunction isWrapped(func) {\n    return (typeof func === 'function' &&\n        typeof func.__original === 'function' &&\n        typeof func.__unwrap === 'function' &&\n        func.__wrapped === true);\n}\n//# sourceMappingURL=wrap.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/utils/wrap.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/core/build/esm/version.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opentelemetry/core/build/esm/version.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nvar VERSION = '1.15.2';\n//# sourceMappingURL=version.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/core/build/esm/version.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OTLPExporterError: () => (/* binding */ OTLPExporterError)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * Interface for handling error\n */\nvar OTLPExporterError = /** @class */ (function (_super) {\n    __extends(OTLPExporterError, _super);\n    function OTLPExporterError(message, code, data) {\n        var _this = _super.call(this, message) || this;\n        _this.name = 'OTLPExporterError';\n        _this.data = data;\n        _this.code = code;\n        return _this;\n    }\n    return OTLPExporterError;\n}(Error));\n\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendResourcePathToUrl: () => (/* binding */ appendResourcePathToUrl),\n/* harmony export */   appendRootPathToUrlIfNeeded: () => (/* binding */ appendRootPathToUrlIfNeeded),\n/* harmony export */   configureExporterTimeout: () => (/* binding */ configureExporterTimeout),\n/* harmony export */   invalidTimeout: () => (/* binding */ invalidTimeout),\n/* harmony export */   parseHeaders: () => (/* binding */ parseHeaders)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n\n\nvar DEFAULT_TRACE_TIMEOUT = 10000;\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nfunction parseHeaders(partialHeaders) {\n    if (partialHeaders === void 0) { partialHeaders = {}; }\n    var headers = {};\n    Object.entries(partialHeaders).forEach(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\n        if (typeof value !== 'undefined') {\n            headers[key] = String(value);\n        }\n        else {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Header \\\"\" + key + \"\\\" has wrong value and will be ignored\");\n        }\n    });\n    return headers;\n}\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nfunction appendResourcePathToUrl(url, path) {\n    if (!url.endsWith('/')) {\n        url = url + '/';\n    }\n    return url + path;\n}\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nfunction appendRootPathToUrlIfNeeded(url) {\n    try {\n        var parsedUrl = new URL(url);\n        if (parsedUrl.pathname === '') {\n            parsedUrl.pathname = parsedUrl.pathname + '/';\n        }\n        return parsedUrl.toString();\n    }\n    catch (_a) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Could not parse export URL: '\" + url + \"'\");\n        return url;\n    }\n}\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nfunction configureExporterTimeout(timeoutMillis) {\n    if (typeof timeoutMillis === 'number') {\n        if (timeoutMillis <= 0) {\n            // OTLP exporter configured timeout - using default value of 10000ms\n            return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n        }\n        return timeoutMillis;\n    }\n    else {\n        return getExporterTimeoutFromEnv();\n    }\n}\nfunction getExporterTimeoutFromEnv() {\n    var _a;\n    var definedTimeout = Number((_a = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT) !== null && _a !== void 0 ? _a : (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnv)().OTEL_EXPORTER_OTLP_TIMEOUT);\n    if (definedTimeout <= 0) {\n        // OTLP exporter configured timeout - using default value of 10000ms\n        return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n    }\n    else {\n        return definedTimeout;\n    }\n}\n// OTLP exporter configured timeout - using default value of 10000ms\nfunction invalidTimeout(timeout, defaultTimeout) {\n    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn('Timeout must be greater than 0', timeout);\n    return defaultTimeout;\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* binding */ getEnv)\n/* harmony export */ });\n/* harmony import */ var _utils_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/environment */ \"./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/utils/environment.js\");\n/* harmony import */ var _globalThis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globalThis */ \"./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Gets the environment variables\n */\nfunction getEnv() {\n    var globalEnv = (0,_utils_environment__WEBPACK_IMPORTED_MODULE_0__.parseEnvironment)(_globalThis__WEBPACK_IMPORTED_MODULE_1__._globalThis);\n    return Object.assign({}, _utils_environment__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ENVIRONMENT, globalEnv);\n}\n//# sourceMappingURL=environment.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _globalThis: () => (/* binding */ _globalThis)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Updates to this file should also be replicated to @opentelemetry/api too.\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nvar _globalThis = typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n        ? self\n        : typeof window === 'object'\n            ? window\n            : typeof __webpack_require__.g === 'object'\n                ? __webpack_require__.g\n                : {};\n//# sourceMappingURL=globalThis.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/utils/environment.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/utils/environment.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ATTRIBUTE_COUNT_LIMIT: () => (/* binding */ DEFAULT_ATTRIBUTE_COUNT_LIMIT),\n/* harmony export */   DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT: () => (/* binding */ DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT),\n/* harmony export */   DEFAULT_ENVIRONMENT: () => (/* binding */ DEFAULT_ENVIRONMENT),\n/* harmony export */   getEnvWithoutDefaults: () => (/* binding */ getEnvWithoutDefaults),\n/* harmony export */   parseEnvironment: () => (/* binding */ parseEnvironment)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag/types.js\");\n/* harmony import */ var _sampling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sampling */ \"./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/utils/sampling.js\");\n/* harmony import */ var _platform_browser_globalThis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../platform/browser/globalThis */ \"./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'];\nfunction isEnvVarABoolean(key) {\n    return (ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n    'OTEL_EXPORTER_OTLP_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n    'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nvar DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nvar DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nvar DEFAULT_ENVIRONMENT = {\n    OTEL_SDK_DISABLED: false,\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_TRACES_EXPORTER: '',\n    OTEL_TRACES_SAMPLER: _sampling__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n    OTEL_EXPORTER_OTLP_INSECURE: '',\n    OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n    OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(key, environment, values) {\n    if (typeof values[key] === 'undefined') {\n        return;\n    }\n    var value = String(values[key]);\n    // support case-insensitive \"true\"\n    environment[key] = value.toLowerCase() === 'true';\n}\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ALL,\n    VERBOSE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.VERBOSE,\n    DEBUG: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.DEBUG,\n    INFO: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.INFO,\n    WARN: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.WARN,\n    ERROR: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.ERROR,\n    NONE: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nfunction parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarABoolean(key)) {\n                    parseBoolean(key, environment, values);\n                }\n                else if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n/**\n * Get environment in node or browser without\n * populating default values.\n */\nfunction getEnvWithoutDefaults() {\n    return typeof process !== 'undefined'\n        ? parseEnvironment(process.env)\n        : parseEnvironment(_platform_browser_globalThis__WEBPACK_IMPORTED_MODULE_2__._globalThis);\n}\n//# sourceMappingURL=environment.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/utils/environment.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/utils/sampling.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/utils/sampling.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TracesSamplerValues: () => (/* binding */ TracesSamplerValues)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n//# sourceMappingURL=sampling.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-exporter-base/node_modules/@opentelemetry/core/build/esm/utils/sampling.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bufToHex: () => (/* binding */ bufToHex),\n/* harmony export */   hexToBuf: () => (/* binding */ hexToBuf),\n/* harmony export */   toAnyValue: () => (/* binding */ toAnyValue),\n/* harmony export */   toAttributes: () => (/* binding */ toAttributes),\n/* harmony export */   toKeyValue: () => (/* binding */ toKeyValue)\n/* harmony export */ });\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nfunction toAttributes(attributes) {\n    return Object.keys(attributes).map(function (key) { return toKeyValue(key, attributes[key]); });\n}\nfunction toKeyValue(key, value) {\n    return {\n        key: key,\n        value: toAnyValue(value),\n    };\n}\nfunction toAnyValue(value) {\n    var t = typeof value;\n    if (t === 'string')\n        return { stringValue: value };\n    if (t === 'number') {\n        if (!Number.isInteger(value))\n            return { doubleValue: value };\n        return { intValue: value };\n    }\n    if (t === 'boolean')\n        return { boolValue: value };\n    if (value instanceof Uint8Array)\n        return { bytesValue: value };\n    if (Array.isArray(value))\n        return { arrayValue: { values: value.map(toAnyValue) } };\n    if (t === 'object' && value != null)\n        return {\n            kvlistValue: {\n                values: Object.entries(value).map(function (_a) {\n                    var _b = __read(_a, 2), k = _b[0], v = _b[1];\n                    return toKeyValue(k, v);\n                }),\n            },\n        };\n    return {};\n}\nfunction hexToBuf(hex) {\n    var _a;\n    var ints = (_a = hex.match(/[\\da-f]{2}/gi)) === null || _a === void 0 ? void 0 : _a.map(function (h) { return parseInt(h, 16); });\n    return ints && new Uint8Array(ints);\n}\nfunction i2hex(i) {\n    return ('0' + i.toString(16)).slice(-2);\n}\nfunction bufToHex(buf) {\n    if (buf == null || buf.length === 0)\n        return undefined;\n    return Array.from(buf).map(i2hex).join('');\n}\n//# sourceMappingURL=internal.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createExportTraceServiceRequest: () => (/* binding */ createExportTraceServiceRequest)\n/* harmony export */ });\n/* harmony import */ var _common_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/internal */ \"./node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js\");\n/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal */ \"./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js\");\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n\n\nfunction createExportTraceServiceRequest(spans, useHex) {\n    return {\n        resourceSpans: spanRecordsToResourceSpans(spans, useHex),\n    };\n}\nfunction createResourceMap(readableSpans) {\n    var e_1, _a;\n    var resourceMap = new Map();\n    try {\n        for (var readableSpans_1 = __values(readableSpans), readableSpans_1_1 = readableSpans_1.next(); !readableSpans_1_1.done; readableSpans_1_1 = readableSpans_1.next()) {\n            var record = readableSpans_1_1.value;\n            var ilmMap = resourceMap.get(record.resource);\n            if (!ilmMap) {\n                ilmMap = new Map();\n                resourceMap.set(record.resource, ilmMap);\n            }\n            // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n            var instrumentationLibraryKey = record.instrumentationLibrary.name + \"@\" + (record.instrumentationLibrary.version || '') + \":\" + (record.instrumentationLibrary.schemaUrl || '');\n            var records = ilmMap.get(instrumentationLibraryKey);\n            if (!records) {\n                records = [];\n                ilmMap.set(instrumentationLibraryKey, records);\n            }\n            records.push(record);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (readableSpans_1_1 && !readableSpans_1_1.done && (_a = readableSpans_1.return)) _a.call(readableSpans_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return resourceMap;\n}\nfunction spanRecordsToResourceSpans(readableSpans, useHex) {\n    var resourceMap = createResourceMap(readableSpans);\n    var out = [];\n    var entryIterator = resourceMap.entries();\n    var entry = entryIterator.next();\n    while (!entry.done) {\n        var _a = __read(entry.value, 2), resource = _a[0], ilmMap = _a[1];\n        var scopeResourceSpans = [];\n        var ilmIterator = ilmMap.values();\n        var ilmEntry = ilmIterator.next();\n        while (!ilmEntry.done) {\n            var scopeSpans = ilmEntry.value;\n            if (scopeSpans.length > 0) {\n                var _b = scopeSpans[0].instrumentationLibrary, name_1 = _b.name, version = _b.version, schemaUrl = _b.schemaUrl;\n                var spans = scopeSpans.map(function (readableSpan) {\n                    return (0,_internal__WEBPACK_IMPORTED_MODULE_0__.sdkSpanToOtlpSpan)(readableSpan, useHex);\n                });\n                scopeResourceSpans.push({\n                    scope: { name: name_1, version: version },\n                    spans: spans,\n                    schemaUrl: schemaUrl,\n                });\n            }\n            ilmEntry = ilmIterator.next();\n        }\n        // TODO SDK types don't provide resource schema URL at this time\n        var transformedSpans = {\n            resource: {\n                attributes: (0,_common_internal__WEBPACK_IMPORTED_MODULE_1__.toAttributes)(resource.attributes),\n                droppedAttributesCount: 0,\n            },\n            scopeSpans: scopeResourceSpans,\n            schemaUrl: undefined,\n        };\n        out.push(transformedSpans);\n        entry = entryIterator.next();\n    }\n    return out;\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sdkSpanToOtlpSpan: () => (/* binding */ sdkSpanToOtlpSpan),\n/* harmony export */   toOtlpLink: () => (/* binding */ toOtlpLink),\n/* harmony export */   toOtlpSpanEvent: () => (/* binding */ toOtlpSpanEvent)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _common_internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/internal */ \"./node_modules/@opentelemetry/otlp-transformer/build/esm/common/internal.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js\");\n\n\n\nfunction sdkSpanToOtlpSpan(span, useHex) {\n    var _a;\n    var ctx = span.spanContext();\n    var status = span.status;\n    var parentSpanId = useHex\n        ? span.parentSpanId\n        : span.parentSpanId != null\n            ? _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hexToBase64(span.parentSpanId)\n            : undefined;\n    return {\n        traceId: useHex ? ctx.traceId : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hexToBase64(ctx.traceId),\n        spanId: useHex ? ctx.spanId : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hexToBase64(ctx.spanId),\n        parentSpanId: parentSpanId,\n        traceState: (_a = ctx.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n        name: span.name,\n        // Span kind is offset by 1 because the API does not define a value for unset\n        kind: span.kind == null ? 0 : span.kind + 1,\n        startTimeUnixNano: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)(span.startTime),\n        endTimeUnixNano: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)(span.endTime),\n        attributes: (0,_common_internal__WEBPACK_IMPORTED_MODULE_2__.toAttributes)(span.attributes),\n        droppedAttributesCount: 0,\n        events: span.events.map(toOtlpSpanEvent),\n        droppedEventsCount: 0,\n        status: {\n            // API and proto enums share the same values\n            code: status.code,\n            message: status.message,\n        },\n        links: span.links.map(function (link) { return toOtlpLink(link, useHex); }),\n        droppedLinksCount: 0,\n    };\n}\nfunction toOtlpLink(link, useHex) {\n    var _a;\n    return {\n        attributes: link.attributes ? (0,_common_internal__WEBPACK_IMPORTED_MODULE_2__.toAttributes)(link.attributes) : [],\n        spanId: useHex\n            ? link.context.spanId\n            : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hexToBase64(link.context.spanId),\n        traceId: useHex\n            ? link.context.traceId\n            : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hexToBase64(link.context.traceId),\n        traceState: (_a = link.context.traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n        droppedAttributesCount: 0,\n    };\n}\nfunction toOtlpSpanEvent(timedEvent) {\n    return {\n        attributes: timedEvent.attributes\n            ? (0,_common_internal__WEBPACK_IMPORTED_MODULE_2__.toAttributes)(timedEvent.attributes)\n            : [],\n        name: timedEvent.name,\n        timeUnixNano: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)(timedEvent.time),\n        droppedAttributesCount: 0,\n    };\n}\n//# sourceMappingURL=internal.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/internal.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/build/src/common/internal.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/build/src/common/internal.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bufToHex = exports.hexToBuf = exports.toAnyValue = exports.toKeyValue = exports.toAttributes = void 0;\nfunction toAttributes(attributes) {\n    return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\nexports.toAttributes = toAttributes;\nfunction toKeyValue(key, value) {\n    return {\n        key: key,\n        value: toAnyValue(value),\n    };\n}\nexports.toKeyValue = toKeyValue;\nfunction toAnyValue(value) {\n    const t = typeof value;\n    if (t === 'string')\n        return { stringValue: value };\n    if (t === 'number') {\n        if (!Number.isInteger(value))\n            return { doubleValue: value };\n        return { intValue: value };\n    }\n    if (t === 'boolean')\n        return { boolValue: value };\n    if (value instanceof Uint8Array)\n        return { bytesValue: value };\n    if (Array.isArray(value))\n        return { arrayValue: { values: value.map(toAnyValue) } };\n    if (t === 'object' && value != null)\n        return {\n            kvlistValue: {\n                values: Object.entries(value).map(([k, v]) => toKeyValue(k, v)),\n            },\n        };\n    return {};\n}\nexports.toAnyValue = toAnyValue;\nfunction hexToBuf(hex) {\n    var _a;\n    const ints = (_a = hex.match(/[\\da-f]{2}/gi)) === null || _a === void 0 ? void 0 : _a.map(h => parseInt(h, 16));\n    return ints && new Uint8Array(ints);\n}\nexports.hexToBuf = hexToBuf;\nfunction i2hex(i) {\n    return ('0' + i.toString(16)).slice(-2);\n}\nfunction bufToHex(buf) {\n    if (buf == null || buf.length === 0)\n        return undefined;\n    return Array.from(buf).map(i2hex).join('');\n}\nexports.bufToHex = bufToHex;\n//# sourceMappingURL=internal.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-transformer/build/src/common/internal.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/common/time.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/common/time.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addHrTimes: () => (/* binding */ addHrTimes),\n/* harmony export */   getTimeOrigin: () => (/* binding */ getTimeOrigin),\n/* harmony export */   hrTime: () => (/* binding */ hrTime),\n/* harmony export */   hrTimeDuration: () => (/* binding */ hrTimeDuration),\n/* harmony export */   hrTimeToMicroseconds: () => (/* binding */ hrTimeToMicroseconds),\n/* harmony export */   hrTimeToMilliseconds: () => (/* binding */ hrTimeToMilliseconds),\n/* harmony export */   hrTimeToNanoseconds: () => (/* binding */ hrTimeToNanoseconds),\n/* harmony export */   hrTimeToTimeStamp: () => (/* binding */ hrTimeToTimeStamp),\n/* harmony export */   isTimeInput: () => (/* binding */ isTimeInput),\n/* harmony export */   isTimeInputHrTime: () => (/* binding */ isTimeInputHrTime),\n/* harmony export */   millisToHrTime: () => (/* binding */ millisToHrTime),\n/* harmony export */   timeInputToHrTime: () => (/* binding */ timeInputToHrTime)\n/* harmony export */ });\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../platform */ \"./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar NANOSECOND_DIGITS = 9;\nvar NANOSECOND_DIGITS_IN_MILLIS = 6;\nvar MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nfunction millisToHrTime(epochMillis) {\n    var epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    var seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n    var timeOrigin = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        var perf = _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nfunction hrTime(performanceNow) {\n    var timeOrigin = millisToHrTime(getTimeOrigin());\n    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : _platform__WEBPACK_IMPORTED_MODULE_0__.otperformance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nfunction timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return millisToHrTime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return millisToHrTime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nfunction hrTimeDuration(startTime, endTime) {\n    var seconds = endTime[0] - startTime[0];\n    var nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nfunction hrTimeToTimeStamp(time) {\n    var precision = NANOSECOND_DIGITS;\n    var tmp = \"\" + '0'.repeat(precision) + time[1] + \"Z\";\n    var nanoString = tmp.substr(tmp.length - precision - 1);\n    var date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nfunction hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nfunction hrTimeToMilliseconds(time) {\n    return Math.round(time[0] * 1e3 + time[1] / 1e6);\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nfunction hrTimeToMicroseconds(time) {\n    return Math.round(time[0] * 1e6 + time[1] / 1e3);\n}\n/**\n * check if time is HrTime\n * @param value\n */\nfunction isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nfunction isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nfunction addHrTimes(time1, time2) {\n    var out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n//# sourceMappingURL=time.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/common/time.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js ***!
  \***********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hexToBase64: () => (/* binding */ hexToBase64)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction hexToBase64(hexStr) {\n    var hexStrLen = hexStr.length;\n    var hexAsciiCharsStr = '';\n    for (var i = 0; i < hexStrLen; i += 2) {\n        var hexPair = hexStr.substring(i, i + 2);\n        var hexVal = parseInt(hexPair, 16);\n        hexAsciiCharsStr += String.fromCharCode(hexVal);\n    }\n    return btoa(hexAsciiCharsStr);\n}\n//# sourceMappingURL=hex-to-base64.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js":
/*!*********************************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   otperformance: () => (/* binding */ otperformance)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar otperformance = performance;\n//# sourceMappingURL=performance.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/otlp-transformer/node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/Resource.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/Resource.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Resource: () => (/* binding */ Resource)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n\n\n\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes, asyncAttributesPromise) {\n        var _this = this;\n        var _a;\n        this._attributes = attributes;\n        this.asyncAttributesPending = asyncAttributesPromise != null;\n        this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {\n            _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);\n            _this.asyncAttributesPending = false;\n            return asyncAttributes;\n        }, function (err) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n            _this.asyncAttributesPending = false;\n            return {};\n        });\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that identifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.SERVICE_NAME] = (0,_platform__WEBPACK_IMPORTED_MODULE_2__.defaultServiceName)(),\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.TELEMETRY_SDK_NAME] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.SDK_INFO[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n            _a));\n    };\n    Object.defineProperty(Resource.prototype, \"attributes\", {\n        get: function () {\n            var _a;\n            if (this.asyncAttributesPending) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error('Accessing resource attributes before async attributes settled');\n            }\n            return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n     * this Resource's attributes. This is useful in exporters to block until resource detection\n     * has finished.\n     */\n    Resource.prototype.waitForAsyncAttributes = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.asyncAttributesPending) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._asyncAttributesPromise];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        var _this = this;\n        var _a;\n        if (!other)\n            return this;\n        // SpanAttributes from other resource overwrite attributes from this resource.\n        var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), ((_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes));\n        if (!this._asyncAttributesPromise &&\n            !other._asyncAttributesPromise) {\n            return new Resource(mergedSyncAttributes);\n        }\n        var mergedAttributesPromise = Promise.all([\n            this._asyncAttributesPromise,\n            other._asyncAttributesPromise,\n        ]).then(function (_a) {\n            var _b;\n            var _c = __read(_a, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];\n            return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), ((_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes)), otherAsyncAttributes);\n        });\n        return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\n\n//# sourceMappingURL=Resource.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/Resource.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/detect-resources.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detect-resources.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectResources: () => (/* binding */ detectResources),\n/* harmony export */   detectResourcesSync: () => (/* binding */ detectResourcesSync)\n/* harmony export */ });\n/* harmony import */ var _Resource__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Resource */ \"./node_modules/@opentelemetry/resources/build/esm/Resource.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./node_modules/@opentelemetry/resources/build/esm/utils.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n/**\n * Runs all resource detectors and returns the results merged into a single Resource. Promise\n * does not resolve until all the underlying detectors have resolved, unlike\n * detectResourcesSync.\n *\n * @deprecated use detectResourcesSync() instead.\n * @param config Configuration for resource detection\n */\nvar detectResources = function (config) {\n    if (config === void 0) { config = {}; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var resources;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, Promise.all((config.detectors || []).map(function (d) { return __awaiter(void 0, void 0, void 0, function () {\n                        var resource, e_1;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    _a.trys.push([0, 2, , 3]);\n                                    return [4 /*yield*/, d.detect(config)];\n                                case 1:\n                                    resource = _a.sent();\n                                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(d.constructor.name + \" found resource.\", resource);\n                                    return [2 /*return*/, resource];\n                                case 2:\n                                    e_1 = _a.sent();\n                                    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(d.constructor.name + \" failed: \" + e_1.message);\n                                    return [2 /*return*/, _Resource__WEBPACK_IMPORTED_MODULE_1__.Resource.empty()];\n                                case 3: return [2 /*return*/];\n                            }\n                        });\n                    }); }))];\n                case 1:\n                    resources = _a.sent();\n                    // Future check if verbose logging is enabled issue #1903\n                    logResources(resources);\n                    return [2 /*return*/, resources.reduce(function (acc, resource) { return acc.merge(resource); }, _Resource__WEBPACK_IMPORTED_MODULE_1__.Resource.empty())];\n            }\n        });\n    });\n};\n/**\n * Runs all resource detectors synchronously, merging their results. In case of attribute collision later resources will take precedence.\n *\n * @param config Configuration for resource detection\n */\nvar detectResourcesSync = function (config) {\n    var _a;\n    if (config === void 0) { config = {}; }\n    var resources = ((_a = config.detectors) !== null && _a !== void 0 ? _a : []).map(function (d) {\n        try {\n            var resourceOrPromise_1 = d.detect(config);\n            var resource_1;\n            if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.isPromiseLike)(resourceOrPromise_1)) {\n                var createPromise = function () { return __awaiter(void 0, void 0, void 0, function () {\n                    var resolvedResource;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, resourceOrPromise_1];\n                            case 1:\n                                resolvedResource = _a.sent();\n                                return [2 /*return*/, resolvedResource.attributes];\n                        }\n                    });\n                }); };\n                resource_1 = new _Resource__WEBPACK_IMPORTED_MODULE_1__.Resource({}, createPromise());\n            }\n            else {\n                resource_1 = resourceOrPromise_1;\n            }\n            if (resource_1.waitForAsyncAttributes) {\n                void resource_1\n                    .waitForAsyncAttributes()\n                    .then(function () {\n                    return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(d.constructor.name + \" found resource.\", resource_1);\n                });\n            }\n            else {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(d.constructor.name + \" found resource.\", resource_1);\n            }\n            return resource_1;\n        }\n        catch (e) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.error(d.constructor.name + \" failed: \" + e.message);\n            return _Resource__WEBPACK_IMPORTED_MODULE_1__.Resource.empty();\n        }\n    });\n    var mergedResources = resources.reduce(function (acc, resource) { return acc.merge(resource); }, _Resource__WEBPACK_IMPORTED_MODULE_1__.Resource.empty());\n    if (mergedResources.waitForAsyncAttributes) {\n        void mergedResources.waitForAsyncAttributes().then(function () {\n            // Future check if verbose logging is enabled issue #1903\n            logResources(resources);\n        });\n    }\n    return mergedResources;\n};\n/**\n * Writes debug information about the detected resources to the logger defined in the resource detection config, if one is provided.\n *\n * @param resources The array of {@link Resource} that should be logged. Empty entries will be ignored.\n */\nvar logResources = function (resources) {\n    resources.forEach(function (resource) {\n        // Print only populated resources\n        if (Object.keys(resource.attributes).length > 0) {\n            var resourceDebugString = JSON.stringify(resource.attributes, null, 4);\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.verbose(resourceDebugString);\n        }\n    });\n};\n//# sourceMappingURL=detect-resources.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/detect-resources.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetector.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetector.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserDetector: () => (/* binding */ browserDetector)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetectorSync.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * BrowserDetector will be used to detect the resources related to browser.\n */\nvar BrowserDetector = /** @class */ (function () {\n    function BrowserDetector() {\n    }\n    BrowserDetector.prototype.detect = function (config) {\n        return Promise.resolve(___WEBPACK_IMPORTED_MODULE_0__.browserDetectorSync.detect(config));\n    };\n    return BrowserDetector;\n}());\nvar browserDetector = new BrowserDetector();\n//# sourceMappingURL=BrowserDetector.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetector.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetectorSync.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetectorSync.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserDetectorSync: () => (/* binding */ browserDetectorSync)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ \"./node_modules/@opentelemetry/resources/build/esm/Resource.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (undefined && undefined.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n\n\n\n/**\n * BrowserDetectorSync will be used to detect the resources related to browser.\n */\nvar BrowserDetectorSync = /** @class */ (function () {\n    function BrowserDetectorSync() {\n    }\n    BrowserDetectorSync.prototype.detect = function (config) {\n        var _a;\n        var isBrowser = typeof navigator !== 'undefined';\n        if (!isBrowser) {\n            return ___WEBPACK_IMPORTED_MODULE_0__.Resource.empty();\n        }\n        var browserResource = (_a = {},\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = 'browser',\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION] = 'Web Browser',\n            _a[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] = navigator.userAgent,\n            _a);\n        return this._getResourceAttributes(browserResource, config);\n    };\n    /**\n     * Validates process resource attribute map from process variables\n     *\n     * @param browserResource The un-sanitized resource attributes from process as key/value pairs.\n     * @param config: Config\n     * @returns The sanitized resource attributes.\n     */\n    BrowserDetectorSync.prototype._getResourceAttributes = function (browserResource, _config) {\n        if (browserResource[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_1__.SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === '') {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.debug('BrowserDetector failed: Unable to find required browser resources. ');\n            return ___WEBPACK_IMPORTED_MODULE_0__.Resource.empty();\n        }\n        else {\n            return new ___WEBPACK_IMPORTED_MODULE_0__.Resource(__assign({}, browserResource));\n        }\n    };\n    return BrowserDetectorSync;\n}());\nvar browserDetectorSync = new BrowserDetectorSync();\n//# sourceMappingURL=BrowserDetectorSync.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetectorSync.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   envDetector: () => (/* binding */ envDetector)\n/* harmony export */ });\n/* harmony import */ var _EnvDetectorSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EnvDetectorSync */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetectorSync.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nvar EnvDetector = /** @class */ (function () {\n    function EnvDetector() {\n    }\n    /**\n     * Returns a {@link Resource} populated with attributes from the\n     * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n     * function to conform to the Detector interface.\n     *\n     * @param config The resource detection config\n     */\n    EnvDetector.prototype.detect = function (config) {\n        return Promise.resolve(_EnvDetectorSync__WEBPACK_IMPORTED_MODULE_0__.envDetectorSync.detect(config));\n    };\n    return EnvDetector;\n}());\nvar envDetector = new EnvDetector();\n//# sourceMappingURL=EnvDetector.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetectorSync.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetectorSync.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   envDetectorSync: () => (/* binding */ envDetectorSync)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\");\n/* harmony import */ var _Resource__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Resource */ \"./node_modules/@opentelemetry/resources/build/esm/Resource.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n\n\n\n\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nvar EnvDetectorSync = /** @class */ (function () {\n    function EnvDetectorSync() {\n        // Type, attribute keys, and attribute values should not exceed 256 characters.\n        this._MAX_LENGTH = 255;\n        // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n        this._COMMA_SEPARATOR = ',';\n        // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n        this._LABEL_KEY_VALUE_SPLITTER = '=';\n        this._ERROR_MESSAGE_INVALID_CHARS = 'should be a ASCII string with a length greater than 0 and not exceed ' +\n            this._MAX_LENGTH +\n            ' characters.';\n        this._ERROR_MESSAGE_INVALID_VALUE = 'should be a ASCII string with a length not exceed ' +\n            this._MAX_LENGTH +\n            ' characters.';\n    }\n    /**\n     * Returns a {@link Resource} populated with attributes from the\n     * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n     * function to conform to the Detector interface.\n     *\n     * @param config The resource detection config\n     */\n    EnvDetectorSync.prototype.detect = function (_config) {\n        var attributes = {};\n        var env = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)();\n        var rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n        var serviceName = env.OTEL_SERVICE_NAME;\n        if (rawAttributes) {\n            try {\n                var parsedAttributes = this._parseResourceAttributes(rawAttributes);\n                Object.assign(attributes, parsedAttributes);\n            }\n            catch (e) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.diag.debug(\"EnvDetector failed: \" + e.message);\n            }\n        }\n        if (serviceName) {\n            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_2__.SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n        }\n        return new _Resource__WEBPACK_IMPORTED_MODULE_3__.Resource(attributes);\n    };\n    /**\n     * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n     * variable.\n     *\n     * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n     * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n     * paths are accepted as attribute keys. Values may be quoted or unquoted in\n     * general. If a value contains whitespaces, =, or \" characters, it must\n     * always be quoted.\n     *\n     * @param rawEnvAttributes The resource attributes as a comma-seperated list\n     * of key/value pairs.\n     * @returns The sanitized resource attributes.\n     */\n    EnvDetectorSync.prototype._parseResourceAttributes = function (rawEnvAttributes) {\n        var e_1, _a;\n        if (!rawEnvAttributes)\n            return {};\n        var attributes = {};\n        var rawAttributes = rawEnvAttributes.split(this._COMMA_SEPARATOR, -1);\n        try {\n            for (var rawAttributes_1 = __values(rawAttributes), rawAttributes_1_1 = rawAttributes_1.next(); !rawAttributes_1_1.done; rawAttributes_1_1 = rawAttributes_1.next()) {\n                var rawAttribute = rawAttributes_1_1.value;\n                var keyValuePair = rawAttribute.split(this._LABEL_KEY_VALUE_SPLITTER, -1);\n                if (keyValuePair.length !== 2) {\n                    continue;\n                }\n                var _b = __read(keyValuePair, 2), key = _b[0], value = _b[1];\n                // Leading and trailing whitespaces are trimmed.\n                key = key.trim();\n                value = value.trim().split(/^\"|\"$/).join('');\n                if (!this._isValidAndNotEmpty(key)) {\n                    throw new Error(\"Attribute key \" + this._ERROR_MESSAGE_INVALID_CHARS);\n                }\n                if (!this._isValid(value)) {\n                    throw new Error(\"Attribute value \" + this._ERROR_MESSAGE_INVALID_VALUE);\n                }\n                attributes[key] = decodeURIComponent(value);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (rawAttributes_1_1 && !rawAttributes_1_1.done && (_a = rawAttributes_1.return)) _a.call(rawAttributes_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return attributes;\n    };\n    /**\n     * Determines whether the given String is a valid printable ASCII string with\n     * a length not exceed _MAX_LENGTH characters.\n     *\n     * @param str The String to be validated.\n     * @returns Whether the String is valid.\n     */\n    EnvDetectorSync.prototype._isValid = function (name) {\n        return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n    };\n    // https://www.w3.org/TR/baggage/#definition\n    EnvDetectorSync.prototype._isBaggageOctetString = function (str) {\n        for (var i = 0; i < str.length; i++) {\n            var ch = str.charCodeAt(i);\n            if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Determines whether the given String is a valid printable ASCII string with\n     * a length greater than 0 and not exceed _MAX_LENGTH characters.\n     *\n     * @param str The String to be validated.\n     * @returns Whether the String is valid and not empty.\n     */\n    EnvDetectorSync.prototype._isValidAndNotEmpty = function (str) {\n        return str.length > 0 && this._isValid(str);\n    };\n    return EnvDetectorSync;\n}());\nvar envDetectorSync = new EnvDetectorSync();\n//# sourceMappingURL=EnvDetectorSync.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetectorSync.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetector.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetector.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopDetector: () => (/* binding */ NoopDetector),\n/* harmony export */   noopDetector: () => (/* binding */ noopDetector)\n/* harmony export */ });\n/* harmony import */ var _NoopDetectorSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NoopDetectorSync */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetectorSync.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar NoopDetector = /** @class */ (function () {\n    function NoopDetector() {\n    }\n    NoopDetector.prototype.detect = function () {\n        return Promise.resolve(_NoopDetectorSync__WEBPACK_IMPORTED_MODULE_0__.noopDetectorSync.detect());\n    };\n    return NoopDetector;\n}());\n\nvar noopDetector = new NoopDetector();\n//# sourceMappingURL=NoopDetector.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetector.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetectorSync.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetectorSync.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopDetectorSync: () => (/* binding */ NoopDetectorSync),\n/* harmony export */   noopDetectorSync: () => (/* binding */ noopDetectorSync)\n/* harmony export */ });\n/* harmony import */ var _Resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Resource */ \"./node_modules/@opentelemetry/resources/build/esm/Resource.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar NoopDetectorSync = /** @class */ (function () {\n    function NoopDetectorSync() {\n    }\n    NoopDetectorSync.prototype.detect = function () {\n        return new _Resource__WEBPACK_IMPORTED_MODULE_0__.Resource({});\n    };\n    return NoopDetectorSync;\n}());\n\nvar noopDetectorSync = new NoopDetectorSync();\n//# sourceMappingURL=NoopDetectorSync.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetectorSync.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/detectors/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/detectors/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   browserDetector: () => (/* reexport safe */ _BrowserDetector__WEBPACK_IMPORTED_MODULE_0__.browserDetector),\n/* harmony export */   browserDetectorSync: () => (/* reexport safe */ _BrowserDetectorSync__WEBPACK_IMPORTED_MODULE_2__.browserDetectorSync),\n/* harmony export */   envDetector: () => (/* reexport safe */ _EnvDetector__WEBPACK_IMPORTED_MODULE_1__.envDetector),\n/* harmony export */   envDetectorSync: () => (/* reexport safe */ _EnvDetectorSync__WEBPACK_IMPORTED_MODULE_3__.envDetectorSync)\n/* harmony export */ });\n/* harmony import */ var _BrowserDetector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BrowserDetector */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetector.js\");\n/* harmony import */ var _EnvDetector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EnvDetector */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetector.js\");\n/* harmony import */ var _BrowserDetectorSync__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BrowserDetectorSync */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/BrowserDetectorSync.js\");\n/* harmony import */ var _EnvDetectorSync__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EnvDetectorSync */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/EnvDetectorSync.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/detectors/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Resource: () => (/* reexport safe */ _Resource__WEBPACK_IMPORTED_MODULE_0__.Resource),\n/* harmony export */   browserDetector: () => (/* reexport safe */ _detectors__WEBPACK_IMPORTED_MODULE_2__.browserDetector),\n/* harmony export */   browserDetectorSync: () => (/* reexport safe */ _detectors__WEBPACK_IMPORTED_MODULE_2__.browserDetectorSync),\n/* harmony export */   defaultServiceName: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.defaultServiceName),\n/* harmony export */   detectResources: () => (/* reexport safe */ _detect_resources__WEBPACK_IMPORTED_MODULE_3__.detectResources),\n/* harmony export */   detectResourcesSync: () => (/* reexport safe */ _detect_resources__WEBPACK_IMPORTED_MODULE_3__.detectResourcesSync),\n/* harmony export */   envDetector: () => (/* reexport safe */ _detectors__WEBPACK_IMPORTED_MODULE_2__.envDetector),\n/* harmony export */   envDetectorSync: () => (/* reexport safe */ _detectors__WEBPACK_IMPORTED_MODULE_2__.envDetectorSync),\n/* harmony export */   hostDetector: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.hostDetector),\n/* harmony export */   hostDetectorSync: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.hostDetectorSync),\n/* harmony export */   osDetector: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.osDetector),\n/* harmony export */   osDetectorSync: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.osDetectorSync),\n/* harmony export */   processDetector: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.processDetector),\n/* harmony export */   processDetectorSync: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.processDetectorSync)\n/* harmony export */ });\n/* harmony import */ var _Resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Resource */ \"./node_modules/@opentelemetry/resources/build/esm/Resource.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js\");\n/* harmony import */ var _detectors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detectors */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/index.js\");\n/* harmony import */ var _detect_resources__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./detect-resources */ \"./node_modules/@opentelemetry/resources/build/esm/detect-resources.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/HostDetector.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/HostDetector.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hostDetector: () => (/* binding */ hostDetector)\n/* harmony export */ });\n/* harmony import */ var _detectors_NoopDetector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../detectors/NoopDetector */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetector.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar hostDetector = _detectors_NoopDetector__WEBPACK_IMPORTED_MODULE_0__.noopDetector;\n//# sourceMappingURL=HostDetector.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/platform/browser/HostDetector.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/HostDetectorSync.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/HostDetectorSync.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hostDetectorSync: () => (/* binding */ hostDetectorSync)\n/* harmony export */ });\n/* harmony import */ var _detectors_NoopDetectorSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../detectors/NoopDetectorSync */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetectorSync.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar hostDetectorSync = _detectors_NoopDetectorSync__WEBPACK_IMPORTED_MODULE_0__.noopDetectorSync;\n//# sourceMappingURL=HostDetectorSync.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/platform/browser/HostDetectorSync.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/OSDetector.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/OSDetector.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   osDetector: () => (/* binding */ osDetector)\n/* harmony export */ });\n/* harmony import */ var _detectors_NoopDetector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../detectors/NoopDetector */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetector.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar osDetector = _detectors_NoopDetector__WEBPACK_IMPORTED_MODULE_0__.noopDetector;\n//# sourceMappingURL=OSDetector.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/platform/browser/OSDetector.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/OSDetectorSync.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/OSDetectorSync.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   osDetectorSync: () => (/* binding */ osDetectorSync)\n/* harmony export */ });\n/* harmony import */ var _detectors_NoopDetectorSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../detectors/NoopDetectorSync */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetectorSync.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar osDetectorSync = _detectors_NoopDetectorSync__WEBPACK_IMPORTED_MODULE_0__.noopDetectorSync;\n//# sourceMappingURL=OSDetectorSync.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/platform/browser/OSDetectorSync.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/ProcessDetector.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/ProcessDetector.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processDetector: () => (/* binding */ processDetector)\n/* harmony export */ });\n/* harmony import */ var _detectors_NoopDetector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../detectors/NoopDetector */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetector.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar processDetector = _detectors_NoopDetector__WEBPACK_IMPORTED_MODULE_0__.noopDetector;\n//# sourceMappingURL=ProcessDetector.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/platform/browser/ProcessDetector.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/ProcessDetectorSync.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/ProcessDetectorSync.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processDetectorSync: () => (/* binding */ processDetectorSync)\n/* harmony export */ });\n/* harmony import */ var _detectors_NoopDetector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../detectors/NoopDetector */ \"./node_modules/@opentelemetry/resources/build/esm/detectors/NoopDetector.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar processDetectorSync = _detectors_NoopDetector__WEBPACK_IMPORTED_MODULE_0__.noopDetector;\n//# sourceMappingURL=ProcessDetectorSync.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/platform/browser/ProcessDetectorSync.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultServiceName: () => (/* binding */ defaultServiceName)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction defaultServiceName() {\n    return 'unknown_service';\n}\n//# sourceMappingURL=default-service-name.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultServiceName: () => (/* reexport safe */ _default_service_name__WEBPACK_IMPORTED_MODULE_0__.defaultServiceName),\n/* harmony export */   hostDetector: () => (/* reexport safe */ _HostDetector__WEBPACK_IMPORTED_MODULE_1__.hostDetector),\n/* harmony export */   hostDetectorSync: () => (/* reexport safe */ _HostDetectorSync__WEBPACK_IMPORTED_MODULE_3__.hostDetectorSync),\n/* harmony export */   osDetector: () => (/* reexport safe */ _OSDetector__WEBPACK_IMPORTED_MODULE_2__.osDetector),\n/* harmony export */   osDetectorSync: () => (/* reexport safe */ _OSDetectorSync__WEBPACK_IMPORTED_MODULE_4__.osDetectorSync),\n/* harmony export */   processDetector: () => (/* reexport safe */ _ProcessDetector__WEBPACK_IMPORTED_MODULE_5__.processDetector),\n/* harmony export */   processDetectorSync: () => (/* reexport safe */ _ProcessDetectorSync__WEBPACK_IMPORTED_MODULE_6__.processDetectorSync)\n/* harmony export */ });\n/* harmony import */ var _default_service_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./default-service-name */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js\");\n/* harmony import */ var _HostDetector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HostDetector */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/HostDetector.js\");\n/* harmony import */ var _OSDetector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OSDetector */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/OSDetector.js\");\n/* harmony import */ var _HostDetectorSync__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HostDetectorSync */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/HostDetectorSync.js\");\n/* harmony import */ var _OSDetectorSync__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./OSDetectorSync */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/OSDetectorSync.js\");\n/* harmony import */ var _ProcessDetector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ProcessDetector */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/ProcessDetector.js\");\n/* harmony import */ var _ProcessDetectorSync__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ProcessDetectorSync */ \"./node_modules/@opentelemetry/resources/build/esm/platform/browser/ProcessDetectorSync.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/resources/build/esm/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/resources/build/esm/utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar isPromiseLike = function (val) {\n    return (val !== null && typeof val === 'object' && typeof val.then === 'function');\n};\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/resources/build/esm/utils.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasicTracerProvider: () => (/* binding */ BasicTracerProvider),\n/* harmony export */   ForceFlushState: () => (/* binding */ ForceFlushState)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/propagation-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/propagation/composite.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js\");\n/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/resources */ \"./node_modules/@opentelemetry/resources/build/esm/Resource.js\");\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! . */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\");\n/* harmony import */ var _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MultiSpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js\");\n/* harmony import */ var _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./export/NoopSpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js\");\n/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utility */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\nvar ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */ (function () {\n    function BasicTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._registeredSpanProcessors = [];\n        this._tracers = new Map();\n        var mergedConfig = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.merge)({}, (0,_config__WEBPACK_IMPORTED_MODULE_1__.loadDefaultConfig)(), (0,_utility__WEBPACK_IMPORTED_MODULE_2__.reconfigureLimits)(config));\n        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__.Resource.empty();\n        this.resource = _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__.Resource.default().merge(this.resource);\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n        var defaultExporter = this._buildExporterFromEnv();\n        if (defaultExporter !== undefined) {\n            var batchProcessor = new _platform__WEBPACK_IMPORTED_MODULE_4__.BatchSpanProcessor(defaultExporter);\n            this.activeSpanProcessor = batchProcessor;\n        }\n        else {\n            this.activeSpanProcessor = new _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_5__.NoopSpanProcessor();\n        }\n    }\n    BasicTracerProvider.prototype.getTracer = function (name, version, options) {\n        var key = name + \"@\" + (version || '') + \":\" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || '');\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new ___WEBPACK_IMPORTED_MODULE_6__.Tracer({ name: name, version: version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._config, this));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    };\n    /**\n     * Adds a new {@link SpanProcessor} to this tracer.\n     * @param spanProcessor the new SpanProcessor to be added.\n     */\n    BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n        if (this._registeredSpanProcessors.length === 0) {\n            // since we might have enabled by default a batchProcessor, we disable it\n            // before adding the new one\n            this.activeSpanProcessor\n                .shutdown()\n                .catch(function (err) {\n                return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.diag.error('Error while trying to shutdown current span processor', err);\n            });\n        }\n        this._registeredSpanProcessors.push(spanProcessor);\n        this.activeSpanProcessor = new _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_8__.MultiSpanProcessor(this._registeredSpanProcessors);\n    };\n    BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n        return this.activeSpanProcessor;\n    };\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    BasicTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.trace.setGlobalTracerProvider(this);\n        if (config.propagator === undefined) {\n            config.propagator = this._buildPropagatorFromEnv();\n        }\n        if (config.contextManager) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.context.setGlobalContextManager(config.contextManager);\n        }\n        if (config.propagator) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_11__.propagation.setGlobalPropagator(config.propagator);\n        }\n    };\n    BasicTracerProvider.prototype.forceFlush = function () {\n        var timeout = this._config.forceFlushTimeoutMillis;\n        var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n            return new Promise(function (resolve) {\n                var state;\n                var timeoutInterval = setTimeout(function () {\n                    resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(function () {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(function (error) {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises)\n                .then(function (results) {\n                var errors = results.filter(function (result) { return result !== ForceFlushState.resolved; });\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(function (error) { return reject([error]); });\n        });\n    };\n    BasicTracerProvider.prototype.shutdown = function () {\n        return this.activeSpanProcessor.shutdown();\n    };\n    /**\n     * TS cannot yet infer the type of this.constructor:\n     * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n     * There is no need to override either of the getters in your child class.\n     * The type of the registered component maps should be the same across all\n     * classes in the inheritance tree.\n     */\n    BasicTracerProvider.prototype._getPropagator = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._getSpanExporter = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n        var _this = this;\n        // per spec, propagators from env must be deduplicated\n        var uniquePropagatorNames = Array.from(new Set((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__.getEnv)().OTEL_PROPAGATORS));\n        var propagators = uniquePropagatorNames.map(function (name) {\n            var propagator = _this._getPropagator(name);\n            if (!propagator) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n            }\n            return propagator;\n        });\n        var validPropagators = propagators.reduce(function (list, item) {\n            if (item) {\n                list.push(item);\n            }\n            return list;\n        }, []);\n        if (validPropagators.length === 0) {\n            return;\n        }\n        else if (uniquePropagatorNames.length === 1) {\n            return validPropagators[0];\n        }\n        else {\n            return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_13__.CompositePropagator({\n                propagators: validPropagators,\n            });\n        }\n    };\n    BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n        var exporterName = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__.getEnv)().OTEL_TRACES_EXPORTER;\n        if (exporterName === 'none' || exporterName === '')\n            return;\n        var exporter = this._getSpanExporter(exporterName);\n        if (!exporter) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n        }\n        return exporter;\n    };\n    BasicTracerProvider._registeredPropagators = new Map([\n        ['tracecontext', function () { return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_14__.W3CTraceContextPropagator(); }],\n        ['baggage', function () { return new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_15__.W3CBaggagePropagator(); }],\n    ]);\n    BasicTracerProvider._registeredExporters = new Map();\n    return BasicTracerProvider;\n}());\n\n//# sourceMappingURL=BasicTracerProvider.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiSpanProcessor: () => (/* binding */ MultiSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */ (function () {\n    function MultiSpanProcessor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    MultiSpanProcessor.prototype.forceFlush = function () {\n        var e_1, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.forceFlush());\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return new Promise(function (resolve) {\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(function (error) {\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    };\n    MultiSpanProcessor.prototype.onStart = function (span, context) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onStart(span, context);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.onEnd = function (span) {\n        var e_3, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onEnd(span);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.shutdown = function () {\n        var e_4, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.shutdown());\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function () {\n                resolve();\n            }, reject);\n        });\n    };\n    return MultiSpanProcessor;\n}());\n\n//# sourceMappingURL=MultiSpanProcessor.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SamplingDecision: () => (/* binding */ SamplingDecision)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=Sampler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Span: () => (/* binding */ Span)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/status.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/performance.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/common/attributes.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js\");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enums */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n\n\n\n\n/**\n * This class represents a span.\n */\nvar Span = /** @class */ (function () {\n    /**\n     * Constructs a new Span instance.\n     *\n     * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n     * */\n    function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, _deprecatedClock // keeping this argument even though it is unused to ensure backwards compatibility\n    ) {\n        if (links === void 0) { links = []; }\n        this.attributes = {};\n        this.links = [];\n        this.events = [];\n        this._droppedAttributesCount = 0;\n        this._droppedEventsCount = 0;\n        this._droppedLinksCount = 0;\n        this.status = {\n            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanStatusCode.UNSET,\n        };\n        this.endTime = [0, 0];\n        this._ended = false;\n        this._duration = [-1, -1];\n        this.name = spanName;\n        this._spanContext = spanContext;\n        this.parentSpanId = parentSpanId;\n        this.kind = kind;\n        this.links = links;\n        var now = Date.now();\n        this._performanceStartTime = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now();\n        this._performanceOffset =\n            now - (this._performanceStartTime + (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.getTimeOrigin)());\n        this._startTimeProvided = startTime != null;\n        this.startTime = this._getTime(startTime !== null && startTime !== void 0 ? startTime : now);\n        this.resource = parentTracer.resource;\n        this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n        this._spanLimits = parentTracer.getSpanLimits();\n        this._spanProcessor = parentTracer.getActiveSpanProcessor();\n        this._spanProcessor.onStart(this, context);\n        this._attributeValueLengthLimit =\n            this._spanLimits.attributeValueLengthLimit || 0;\n    }\n    Span.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    Span.prototype.setAttribute = function (key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(\"Invalid attribute key: \" + key);\n            return this;\n        }\n        if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.isAttributeValue)(value)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(\"Invalid attribute value set for key: \" + key);\n            return this;\n        }\n        if (Object.keys(this.attributes).length >=\n            this._spanLimits.attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            this._droppedAttributesCount++;\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    };\n    Span.prototype.setAttributes = function (attributes) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\n                this.setAttribute(k, v);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [timeStamp] Specified time stamp for the event\n     */\n    Span.prototype.addEvent = function (name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n            return this;\n        if (this._spanLimits.eventCountLimit === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn('No events allowed.');\n            this._droppedEventsCount++;\n            return this;\n        }\n        if (this.events.length >= this._spanLimits.eventCountLimit) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn('Dropping extra events.');\n            this.events.shift();\n            this._droppedEventsCount++;\n        }\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInput)(attributesOrStartTime)) {\n            if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInput)(timeStamp)) {\n                timeStamp = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        var attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.sanitizeAttributes)(attributesOrStartTime);\n        this.events.push({\n            name: name,\n            attributes: attributes,\n            time: this._getTime(timeStamp),\n            droppedAttributesCount: 0,\n        });\n        return this;\n    };\n    Span.prototype.setStatus = function (status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = status;\n        return this;\n    };\n    Span.prototype.updateName = function (name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    };\n    Span.prototype.end = function (endTime) {\n        if (this._isSpanEnded()) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.error(this.name + \" \" + this._spanContext.traceId + \"-\" + this._spanContext.spanId + \" - You can only call end() on a span once.\");\n            return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeDuration)(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        this._spanProcessor.onEnd(this);\n    };\n    Span.prototype._getTime = function (inp) {\n        if (typeof inp === 'number' && inp < _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now()) {\n            // must be a performance timestamp\n            // apply correction and convert to hrtime\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTime)(inp + this._performanceOffset);\n        }\n        if (typeof inp === 'number') {\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(inp);\n        }\n        if (inp instanceof Date) {\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(inp.getTime());\n        }\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInputHrTime)(inp)) {\n            return inp;\n        }\n        if (this._startTimeProvided) {\n            // if user provided a time for the start manually\n            // we can't use duration to calculate event/end times\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(Date.now());\n        }\n        var msDuration = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now() - this._performanceStartTime;\n        return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.addHrTimes)(this.startTime, (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(msDuration));\n    };\n    Span.prototype.isRecording = function () {\n        return this._ended === false;\n    };\n    Span.prototype.recordException = function (exception, time) {\n        var attributes = {};\n        if (typeof exception === 'string') {\n            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SemanticAttributes.EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SemanticAttributes.EXCEPTION_TYPE] =\n                    exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SemanticAttributes.EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SemanticAttributes.EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SemanticAttributes.EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SemanticAttributes.EXCEPTION_TYPE] ||\n            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.SemanticAttributes.EXCEPTION_MESSAGE]) {\n            this.addEvent(_enums__WEBPACK_IMPORTED_MODULE_6__.ExceptionEventName, attributes, time);\n        }\n        else {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(\"Failed to record an exception \" + exception);\n        }\n    };\n    Object.defineProperty(Span.prototype, \"duration\", {\n        get: function () {\n            return this._duration;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"ended\", {\n        get: function () {\n            return this._ended;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedAttributesCount\", {\n        get: function () {\n            return this._droppedAttributesCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedEventsCount\", {\n        get: function () {\n            return this._droppedEventsCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedLinksCount\", {\n        get: function () {\n            return this._droppedLinksCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Span.prototype._isSpanEnded = function () {\n        if (this._ended) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(\"Can not execute the operation on ended Span {traceId: \" + this._spanContext.traceId + \", spanId: \" + this._spanContext.spanId + \"}\");\n        }\n        return this._ended;\n    };\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    Span.prototype._truncateToLimitUtil = function (value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substr(0, limit);\n    };\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with trucated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    Span.prototype._truncateToSize = function (value) {\n        var _this = this;\n        var limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(\"Attribute value limit must be positive, got \" + limit);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(function (val) {\n                return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val;\n            });\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    };\n    return Span;\n}());\n\n//# sourceMappingURL=Span.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tracer: () => (/* binding */ Tracer)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/common/attributes.js\");\n/* harmony import */ var _Span__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Span */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\");\n/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utility */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * This class represents a basic tracer.\n */\nvar Tracer = /** @class */ (function () {\n    /**\n     * Constructs a new Tracer instance.\n     */\n    function Tracer(instrumentationLibrary, config, _tracerProvider) {\n        this._tracerProvider = _tracerProvider;\n        var localConfig = (0,_utility__WEBPACK_IMPORTED_MODULE_0__.mergeConfig)(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new _platform__WEBPACK_IMPORTED_MODULE_1__.RandomIdGenerator();\n        this.resource = _tracerProvider.resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    Tracer.prototype.startSpan = function (name, options, context) {\n        var _a, _b, _c;\n        if (options === void 0) { options = {}; }\n        if (context === void 0) { context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.active(); }\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.deleteSpan(context);\n        }\n        var parentSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpan(context);\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.isTracingSuppressed)(context)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.debug('Instrumentation suppressed, returning Noop Span');\n            var nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.wrapSpanContext(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        var parentSpanContext = parentSpan === null || parentSpan === void 0 ? void 0 : parentSpan.spanContext();\n        var spanId = this._idGenerator.generateSpanId();\n        var traceId;\n        var traceState;\n        var parentSpanId;\n        if (!parentSpanContext ||\n            !_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            parentSpanId = parentSpanContext.spanId;\n        }\n        var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.SpanKind.INTERNAL;\n        var links = ((_b = options.links) !== null && _b !== void 0 ? _b : []).map(function (link) {\n            return {\n                context: link.context,\n                attributes: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(link.attributes),\n            };\n        });\n        var attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(options.attributes);\n        // make sampling decision\n        var samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = (_c = samplingResult.traceState) !== null && _c !== void 0 ? _c : traceState;\n        var traceFlags = samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision.RECORD_AND_SAMPLED\n            ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.TraceFlags.SAMPLED\n            : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.TraceFlags.NONE;\n        var spanContext = { traceId: traceId, spanId: spanId, traceFlags: traceFlags, traceState: traceState };\n        if (samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision.NOT_RECORD) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.debug('Recording is off, propagating context in a non-recording span');\n            var nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        var span = new _Span__WEBPACK_IMPORTED_MODULE_11__.Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime);\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        var initAttributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(Object.assign(attributes, samplingResult.attributes));\n        span.setAttributes(initAttributes);\n        return span;\n    };\n    Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.setSpan(parentContext, span);\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    /** Returns the active {@link GeneralLimits}. */\n    Tracer.prototype.getGeneralLimits = function () {\n        return this._generalLimits;\n    };\n    /** Returns the active {@link SpanLimits}. */\n    Tracer.prototype.getSpanLimits = function () {\n        return this._spanLimits;\n    };\n    Tracer.prototype.getActiveSpanProcessor = function () {\n        return this._tracerProvider.getActiveSpanProcessor();\n    };\n    return Tracer;\n}());\n\n//# sourceMappingURL=Tracer.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildSamplerFromEnv: () => (/* binding */ buildSamplerFromEnv),\n/* harmony export */   loadDefaultConfig: () => (/* binding */ loadDefaultConfig)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/utils/sampling.js\");\n/* harmony import */ var _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sampler/AlwaysOffSampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sampler/AlwaysOnSampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\");\n/* harmony import */ var _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sampler/ParentBasedSampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\");\n/* harmony import */ var _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sampler/TraceIdRatioBasedSampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar env = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)();\nvar FALLBACK_OTEL_TRACES_SAMPLER = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nfunction loadDefaultConfig() {\n    return {\n        sampler: buildSamplerFromEnv(env),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)().OTEL_ATTRIBUTE_COUNT_LIMIT,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n            linkCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)().OTEL_SPAN_LINK_COUNT_LIMIT,\n            eventCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)().OTEL_SPAN_EVENT_COUNT_LIMIT,\n            attributePerEventCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n            attributePerLinkCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n        },\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nfunction buildSamplerFromEnv(environment) {\n    if (environment === void 0) { environment = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)(); }\n    switch (environment.OTEL_TRACES_SAMPLER) {\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.AlwaysOn:\n            return new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOnSampler();\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.AlwaysOff:\n            return new _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_3__.AlwaysOffSampler();\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.ParentBasedAlwaysOn:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__.ParentBasedSampler({\n                root: new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOnSampler(),\n            });\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.ParentBasedAlwaysOff:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__.ParentBasedSampler({\n                root: new _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_3__.AlwaysOffSampler(),\n            });\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.TraceIdRatio:\n            return new _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_5__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n        case _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_4__.ParentBasedSampler({\n                root: new _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_5__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),\n            });\n        default:\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n            return new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOnSampler();\n    }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n    if (environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n        environment.OTEL_TRACES_SAMPLER_ARG === '') {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n    if (isNaN(probability)) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExceptionEventName: () => (/* binding */ ExceptionEventName)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nvar ExceptionEventName = 'exception';\n//# sourceMappingURL=enums.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchSpanProcessorBase: () => (/* binding */ BatchSpanProcessorBase)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/environment.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/utils/callback.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/timer-util.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */ (function () {\n    function BatchSpanProcessorBase(_exporter, config) {\n        this._exporter = _exporter;\n        this._finishedSpans = [];\n        this._droppedSpansCount = 0;\n        var env = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getEnv)();\n        this._maxExportBatchSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number'\n                ? config.maxExportBatchSize\n                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number'\n                ? config.maxQueueSize\n                : env.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number'\n                ? config.scheduledDelayMillis\n                : env.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number'\n                ? config.exportTimeoutMillis\n                : env.OTEL_BSP_EXPORT_TIMEOUT;\n        this._shutdownOnce = new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    BatchSpanProcessorBase.prototype.forceFlush = function () {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    };\n    // does nothing.\n    BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) { };\n    BatchSpanProcessorBase.prototype.onEnd = function (span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    };\n    BatchSpanProcessorBase.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    BatchSpanProcessorBase.prototype._shutdown = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.onShutdown();\n        })\n            .then(function () {\n            return _this._flushAll();\n        })\n            .then(function () {\n            return _this._exporter.shutdown();\n        });\n    };\n    /** Add a span in the buffer. */\n    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            if (this._droppedSpansCount === 0) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.debug('maxQueueSize reached, dropping spans');\n            }\n            this._droppedSpansCount++;\n            return;\n        }\n        if (this._droppedSpansCount > 0) {\n            // some spans were dropped, log once with count of spans dropped\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.warn(\"Dropped \" + this._droppedSpansCount + \" spans because maxQueueSize reached\");\n            this._droppedSpansCount = 0;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    };\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    BatchSpanProcessorBase.prototype._flushAll = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var promises = [];\n            // calculate number of batches\n            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n            for (var i = 0, j = count; i < j; i++) {\n                promises.push(_this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(reject);\n        });\n    };\n    BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timer = setTimeout(function () {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, _this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.context.with((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_5__.suppressTracing)(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.context.active()), function () {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside the execution of this callback.\n                var spans = _this._finishedSpans.splice(0, _this._maxExportBatchSize);\n                var doExport = function () {\n                    return _this._exporter.export(spans, function (result) {\n                        var _a;\n                        clearTimeout(timer);\n                        if (result.code === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_6__.ExportResultCode.SUCCESS) {\n                            resolve();\n                        }\n                        else {\n                            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n                        }\n                    });\n                };\n                var pendingResources = spans\n                    .map(function (span) { return span.resource; })\n                    .filter(function (resource) { return resource.asyncAttributesPending; });\n                // Avoid scheduling a promise to make the behavior more predictable and easier to test\n                if (pendingResources.length === 0) {\n                    doExport();\n                }\n                else {\n                    Promise.all(pendingResources.map(function (resource) { var _a; return (_a = resource.waitForAsyncAttributes) === null || _a === void 0 ? void 0 : _a.call(resource); })).then(doExport, function (err) {\n                        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__.globalErrorHandler)(err);\n                        reject(err);\n                    });\n                }\n            });\n        });\n    };\n    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n        var _this = this;\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(function () {\n            _this._flushOneBatch()\n                .then(function () {\n                if (_this._finishedSpans.length > 0) {\n                    _this._clearTimer();\n                    _this._maybeStartTimer();\n                }\n            })\n                .catch(function (e) {\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__.globalErrorHandler)(e);\n            });\n        }, this._scheduledDelayMillis);\n        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.unrefTimer)(this._timer);\n    };\n    BatchSpanProcessorBase.prototype._clearTimer = function () {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    };\n    return BatchSpanProcessorBase;\n}());\n\n//# sourceMappingURL=BatchSpanProcessorBase.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleSpanExporter: () => (/* binding */ ConsoleSpanExporter)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (undefined && undefined.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n/* eslint-disable no-console */\nvar ConsoleSpanExporter = /** @class */ (function () {\n    function ConsoleSpanExporter() {\n    }\n    /**\n     * Export spans.\n     * @param spans\n     * @param resultCallback\n     */\n    ConsoleSpanExporter.prototype.export = function (spans, resultCallback) {\n        return this._sendSpans(spans, resultCallback);\n    };\n    /**\n     * Shutdown the exporter.\n     */\n    ConsoleSpanExporter.prototype.shutdown = function () {\n        this._sendSpans([]);\n        return this.forceFlush();\n    };\n    /**\n     * Exports any pending spans in exporter\n     */\n    ConsoleSpanExporter.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    /**\n     * converts span info into more readable format\n     * @param span\n     */\n    ConsoleSpanExporter.prototype._exportInfo = function (span) {\n        var _a;\n        return {\n            traceId: span.spanContext().traceId,\n            parentId: span.parentSpanId,\n            traceState: (_a = span.spanContext().traceState) === null || _a === void 0 ? void 0 : _a.serialize(),\n            name: span.name,\n            id: span.spanContext().spanId,\n            kind: span.kind,\n            timestamp: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToMicroseconds)(span.startTime),\n            duration: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToMicroseconds)(span.duration),\n            attributes: span.attributes,\n            status: span.status,\n            events: span.events,\n            links: span.links,\n        };\n    };\n    /**\n     * Showing spans in console\n     * @param spans\n     * @param done\n     */\n    ConsoleSpanExporter.prototype._sendSpans = function (spans, done) {\n        var e_1, _a;\n        try {\n            for (var spans_1 = __values(spans), spans_1_1 = spans_1.next(); !spans_1_1.done; spans_1_1 = spans_1.next()) {\n                var span = spans_1_1.value;\n                console.dir(this._exportInfo(span), { depth: 3 });\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (spans_1_1 && !spans_1_1.done && (_a = spans_1.return)) _a.call(spans_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (done) {\n            return done({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.SUCCESS });\n        }\n    };\n    return ConsoleSpanExporter;\n}());\n\n//# sourceMappingURL=ConsoleSpanExporter.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemorySpanExporter: () => (/* binding */ InMemorySpanExporter)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nvar InMemorySpanExporter = /** @class */ (function () {\n    function InMemorySpanExporter() {\n        this._finishedSpans = [];\n        /**\n         * Indicates if the exporter has been \"shutdown.\"\n         * When false, exported spans will not be stored in-memory.\n         */\n        this._stopped = false;\n    }\n    InMemorySpanExporter.prototype.export = function (spans, resultCallback) {\n        var _a;\n        if (this._stopped)\n            return resultCallback({\n                code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.FAILED,\n                error: new Error('Exporter has been stopped'),\n            });\n        (_a = this._finishedSpans).push.apply(_a, __spreadArray([], __read(spans), false));\n        setTimeout(function () { return resultCallback({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.SUCCESS }); }, 0);\n    };\n    InMemorySpanExporter.prototype.shutdown = function () {\n        this._stopped = true;\n        this._finishedSpans = [];\n        return this.forceFlush();\n    };\n    /**\n     * Exports any pending spans in the exporter\n     */\n    InMemorySpanExporter.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    InMemorySpanExporter.prototype.reset = function () {\n        this._finishedSpans = [];\n    };\n    InMemorySpanExporter.prototype.getFinishedSpans = function () {\n        return this._finishedSpans;\n    };\n    return InMemorySpanExporter;\n}());\n\n//# sourceMappingURL=InMemorySpanExporter.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopSpanProcessor: () => (/* binding */ NoopSpanProcessor)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nvar NoopSpanProcessor = /** @class */ (function () {\n    function NoopSpanProcessor() {\n    }\n    NoopSpanProcessor.prototype.onStart = function (_span, _context) { };\n    NoopSpanProcessor.prototype.onEnd = function (_span) { };\n    NoopSpanProcessor.prototype.shutdown = function () {\n        return Promise.resolve();\n    };\n    NoopSpanProcessor.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    return NoopSpanProcessor;\n}());\n\n//# sourceMappingURL=NoopSpanProcessor.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleSpanProcessor: () => (/* binding */ SimpleSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/utils/callback.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n */\nvar SimpleSpanProcessor = /** @class */ (function () {\n    function SimpleSpanProcessor(_exporter) {\n        this._exporter = _exporter;\n        this._shutdownOnce = new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.BindOnceFuture(this._shutdown, this);\n        this._unresolvedExports = new Set();\n    }\n    SimpleSpanProcessor.prototype.forceFlush = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // await unresolved resources before resolving\n                    return [4 /*yield*/, Promise.all(Array.from(this._unresolvedExports))];\n                    case 1:\n                        // await unresolved resources before resolving\n                        _a.sent();\n                        if (!this._exporter.forceFlush) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this._exporter.forceFlush()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SimpleSpanProcessor.prototype.onStart = function (_span, _parentContext) { };\n    SimpleSpanProcessor.prototype.onEnd = function (span) {\n        var _this = this;\n        var _a, _b;\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        var doExport = function () {\n            return _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.internal\n                ._export(_this._exporter, [span])\n                .then(function (result) {\n                var _a;\n                if (result.code !== _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.ExportResultCode.SUCCESS) {\n                    (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.globalErrorHandler)((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n                }\n            })\n                .catch(function (error) {\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.globalErrorHandler)(error);\n            });\n        };\n        // Avoid scheduling a promise to make the behavior more predictable and easier to test\n        if (span.resource.asyncAttributesPending) {\n            var exportPromise_1 = (_b = (_a = span.resource).waitForAsyncAttributes) === null || _b === void 0 ? void 0 : _b.call(_a).then(function () {\n                if (exportPromise_1 != null) {\n                    _this._unresolvedExports.delete(exportPromise_1);\n                }\n                return doExport();\n            }, function (err) { return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.globalErrorHandler)(err); });\n            // store the unresolved exports\n            if (exportPromise_1 != null) {\n                this._unresolvedExports.add(exportPromise_1);\n            }\n        }\n        else {\n            void doExport();\n        }\n    };\n    SimpleSpanProcessor.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    SimpleSpanProcessor.prototype._shutdown = function () {\n        return this._exporter.shutdown();\n    };\n    return SimpleSpanProcessor;\n}());\n\n//# sourceMappingURL=SimpleSpanProcessor.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOffSampler: () => (/* reexport safe */ _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_7__.AlwaysOffSampler),\n/* harmony export */   AlwaysOnSampler: () => (/* reexport safe */ _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_8__.AlwaysOnSampler),\n/* harmony export */   BasicTracerProvider: () => (/* reexport safe */ _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_1__.BasicTracerProvider),\n/* harmony export */   BatchSpanProcessor: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_2__.BatchSpanProcessor),\n/* harmony export */   ConsoleSpanExporter: () => (/* reexport safe */ _export_ConsoleSpanExporter__WEBPACK_IMPORTED_MODULE_3__.ConsoleSpanExporter),\n/* harmony export */   ForceFlushState: () => (/* reexport safe */ _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_1__.ForceFlushState),\n/* harmony export */   InMemorySpanExporter: () => (/* reexport safe */ _export_InMemorySpanExporter__WEBPACK_IMPORTED_MODULE_4__.InMemorySpanExporter),\n/* harmony export */   NoopSpanProcessor: () => (/* reexport safe */ _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__.NoopSpanProcessor),\n/* harmony export */   ParentBasedSampler: () => (/* reexport safe */ _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_9__.ParentBasedSampler),\n/* harmony export */   RandomIdGenerator: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_2__.RandomIdGenerator),\n/* harmony export */   SamplingDecision: () => (/* reexport safe */ _Sampler__WEBPACK_IMPORTED_MODULE_11__.SamplingDecision),\n/* harmony export */   SimpleSpanProcessor: () => (/* reexport safe */ _export_SimpleSpanProcessor__WEBPACK_IMPORTED_MODULE_5__.SimpleSpanProcessor),\n/* harmony export */   Span: () => (/* reexport safe */ _Span__WEBPACK_IMPORTED_MODULE_12__.Span),\n/* harmony export */   TraceIdRatioBasedSampler: () => (/* reexport safe */ _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_10__.TraceIdRatioBasedSampler),\n/* harmony export */   Tracer: () => (/* reexport safe */ _Tracer__WEBPACK_IMPORTED_MODULE_0__.Tracer)\n/* harmony export */ });\n/* harmony import */ var _Tracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tracer */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js\");\n/* harmony import */ var _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BasicTracerProvider */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js\");\n/* harmony import */ var _export_ConsoleSpanExporter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./export/ConsoleSpanExporter */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js\");\n/* harmony import */ var _export_InMemorySpanExporter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./export/InMemorySpanExporter */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js\");\n/* harmony import */ var _export_SimpleSpanProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./export/SimpleSpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js\");\n/* harmony import */ var _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./export/NoopSpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\");\n/* harmony import */ var _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sampler/AlwaysOffSampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sampler/AlwaysOnSampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\");\n/* harmony import */ var _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sampler/ParentBasedSampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\");\n/* harmony import */ var _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./sampler/TraceIdRatioBasedSampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\");\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Sampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/* harmony import */ var _Span__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Span */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RandomIdGenerator: () => (/* binding */ RandomIdGenerator)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\n\nvar SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes * 2; i++) {\n            SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n            // valid hex characters in the range 48-57 and 97-102\n            if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n                SHARED_CHAR_CODES_ARRAY[i] += 39;\n            }\n        }\n        return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchSpanProcessor: () => (/* binding */ BatchSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../export/BatchSpanProcessorBase */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\nvar BatchSpanProcessor = /** @class */ (function (_super) {\n    __extends(BatchSpanProcessor, _super);\n    function BatchSpanProcessor(_exporter, config) {\n        var _this = _super.call(this, _exporter, config) || this;\n        _this.onInit(config);\n        return _this;\n    }\n    BatchSpanProcessor.prototype.onInit = function (config) {\n        var _this = this;\n        if ((config === null || config === void 0 ? void 0 : config.disableAutoFlushOnDocumentHide) !== true &&\n            typeof document !== 'undefined') {\n            this._visibilityChangeListener = function () {\n                if (document.visibilityState === 'hidden') {\n                    void _this.forceFlush();\n                }\n            };\n            this._pageHideListener = function () {\n                void _this.forceFlush();\n            };\n            document.addEventListener('visibilitychange', this._visibilityChangeListener);\n            // use 'pagehide' event as a fallback for Safari; see https://bugs.webkit.org/show_bug.cgi?id=116769\n            document.addEventListener('pagehide', this._pageHideListener);\n        }\n    };\n    BatchSpanProcessor.prototype.onShutdown = function () {\n        if (typeof document !== 'undefined') {\n            if (this._visibilityChangeListener) {\n                document.removeEventListener('visibilitychange', this._visibilityChangeListener);\n            }\n            if (this._pageHideListener) {\n                document.removeEventListener('pagehide', this._pageHideListener);\n            }\n        }\n    };\n    return BatchSpanProcessor;\n}(_export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_0__.BatchSpanProcessorBase));\n\n//# sourceMappingURL=BatchSpanProcessor.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchSpanProcessor: () => (/* reexport safe */ _export_BatchSpanProcessor__WEBPACK_IMPORTED_MODULE_0__.BatchSpanProcessor),\n/* harmony export */   RandomIdGenerator: () => (/* reexport safe */ _RandomIdGenerator__WEBPACK_IMPORTED_MODULE_1__.RandomIdGenerator)\n/* harmony export */ });\n/* harmony import */ var _export_BatchSpanProcessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./export/BatchSpanProcessor */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/export/BatchSpanProcessor.js\");\n/* harmony import */ var _RandomIdGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RandomIdGenerator */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/RandomIdGenerator.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/browser/index.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOffSampler: () => (/* binding */ AlwaysOffSampler)\n/* harmony export */ });\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Sampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */ (function () {\n    function AlwaysOffSampler() {\n    }\n    AlwaysOffSampler.prototype.shouldSample = function () {\n        return {\n            decision: _Sampler__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.NOT_RECORD,\n        };\n    };\n    AlwaysOffSampler.prototype.toString = function () {\n        return 'AlwaysOffSampler';\n    };\n    return AlwaysOffSampler;\n}());\n\n//# sourceMappingURL=AlwaysOffSampler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOnSampler: () => (/* binding */ AlwaysOnSampler)\n/* harmony export */ });\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Sampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */ (function () {\n    function AlwaysOnSampler() {\n    }\n    AlwaysOnSampler.prototype.shouldSample = function () {\n        return {\n            decision: _Sampler__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    };\n    AlwaysOnSampler.prototype.toString = function () {\n        return 'AlwaysOnSampler';\n    };\n    return AlwaysOnSampler;\n}());\n\n//# sourceMappingURL=AlwaysOnSampler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParentBasedSampler: () => (/* binding */ ParentBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AlwaysOffSampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AlwaysOnSampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpanContext(context);\n        if (!parentContext || !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.isSpanContextValid)(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n    };\n    return ParentBasedSampler;\n}());\n\n//# sourceMappingURL=ParentBasedSampler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceIdRatioBasedSampler: () => (/* binding */ TraceIdRatioBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Sampler */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidTraceId)(traceId) && this._accumulate(traceId) < this._upperBound\n                ? _Sampler__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.RECORD_AND_SAMPLED\n                : _Sampler__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\n\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeConfig: () => (/* binding */ mergeConfig),\n/* harmony export */   reconfigureLimits: () => (/* binding */ reconfigureLimits)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/utils/environment.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nfunction mergeConfig(userConfig) {\n    var perInstanceDefaults = {\n        sampler: (0,_config__WEBPACK_IMPORTED_MODULE_0__.buildSamplerFromEnv)(),\n    };\n    var DEFAULT_CONFIG = (0,_config__WEBPACK_IMPORTED_MODULE_0__.loadDefaultConfig)();\n    var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nfunction reconfigureLimits(userConfig) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    var spanLimits = Object.assign({}, userConfig.spanLimits);\n    var parsedEnvConfig = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getEnvWithoutDefaults)();\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        (_f = (_e = (_d = (_b = (_a = userConfig.spanLimits) === null || _a === void 0 ? void 0 : _a.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits: spanLimits });\n}\n//# sourceMappingURL=utility.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AwsEcsLaunchtypeValues: () => (/* binding */ AwsEcsLaunchtypeValues),\n/* harmony export */   CloudPlatformValues: () => (/* binding */ CloudPlatformValues),\n/* harmony export */   CloudProviderValues: () => (/* binding */ CloudProviderValues),\n/* harmony export */   HostArchValues: () => (/* binding */ HostArchValues),\n/* harmony export */   OsTypeValues: () => (/* binding */ OsTypeValues),\n/* harmony export */   SemanticResourceAttributes: () => (/* binding */ SemanticResourceAttributes),\n/* harmony export */   TelemetrySdkLanguageValues: () => (/* binding */ TelemetrySdkLanguageValues)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nvar SemanticResourceAttributes = {\n    /**\n     * Name of the cloud provider.\n     */\n    CLOUD_PROVIDER: 'cloud.provider',\n    /**\n     * The cloud account ID the resource is assigned to.\n     */\n    CLOUD_ACCOUNT_ID: 'cloud.account.id',\n    /**\n     * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n     */\n    CLOUD_REGION: 'cloud.region',\n    /**\n     * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n     *\n     * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n     */\n    CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone',\n    /**\n     * The cloud platform in use.\n     *\n     * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n     */\n    CLOUD_PLATFORM: 'cloud.platform',\n    /**\n     * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n     */\n    AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn',\n    /**\n     * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n     */\n    AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn',\n    /**\n     * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n     */\n    AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype',\n    /**\n     * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n     */\n    AWS_ECS_TASK_ARN: 'aws.ecs.task.arn',\n    /**\n     * The task definition family this task definition is a member of.\n     */\n    AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family',\n    /**\n     * The revision for this task definition.\n     */\n    AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision',\n    /**\n     * The ARN of an EKS cluster.\n     */\n    AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn',\n    /**\n     * The name(s) of the AWS log group(s) an application is writing to.\n     *\n     * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n     */\n    AWS_LOG_GROUP_NAMES: 'aws.log.group.names',\n    /**\n     * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n     *\n     * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n     */\n    AWS_LOG_GROUP_ARNS: 'aws.log.group.arns',\n    /**\n     * The name(s) of the AWS log stream(s) an application is writing to.\n     */\n    AWS_LOG_STREAM_NAMES: 'aws.log.stream.names',\n    /**\n     * The ARN(s) of the AWS log stream(s).\n     *\n     * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n     */\n    AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns',\n    /**\n     * Container name.\n     */\n    CONTAINER_NAME: 'container.name',\n    /**\n     * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n     */\n    CONTAINER_ID: 'container.id',\n    /**\n     * The container runtime managing this container.\n     */\n    CONTAINER_RUNTIME: 'container.runtime',\n    /**\n     * Name of the image the container was built on.\n     */\n    CONTAINER_IMAGE_NAME: 'container.image.name',\n    /**\n     * Container image tag.\n     */\n    CONTAINER_IMAGE_TAG: 'container.image.tag',\n    /**\n     * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n     */\n    DEPLOYMENT_ENVIRONMENT: 'deployment.environment',\n    /**\n     * A unique identifier representing the device.\n     *\n     * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n     */\n    DEVICE_ID: 'device.id',\n    /**\n     * The model identifier for the device.\n     *\n     * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n     */\n    DEVICE_MODEL_IDENTIFIER: 'device.model.identifier',\n    /**\n     * The marketing name for the device model.\n     *\n     * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n     */\n    DEVICE_MODEL_NAME: 'device.model.name',\n    /**\n     * The name of the single function that this runtime instance executes.\n     *\n     * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n     */\n    FAAS_NAME: 'faas.name',\n    /**\n    * The unique ID of the single function that this runtime instance executes.\n    *\n    * Note: Depending on the cloud provider, use:\n  \n  * **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\n  Take care not to use the &#34;invoked ARN&#34; directly but replace any\n  [alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\n  different aliases.\n  * **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n  * **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n  \n  On some providers, it may not be possible to determine the full ID at startup,\n  which is why this field cannot be made required. For example, on AWS the account ID\n  part of the ARN is not available without calling another AWS API\n  which may be deemed too slow for a short-running lambda function.\n  As an alternative, consider setting `faas.id` as a span attribute instead.\n    */\n    FAAS_ID: 'faas.id',\n    /**\n    * The immutable version of the function being executed.\n    *\n    * Note: Depending on the cloud provider and platform, use:\n  \n  * **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n    (an integer represented as a decimal string).\n  * **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n    (i.e., the function name plus the revision suffix).\n  * **Google Cloud Functions:** The value of the\n    [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n  * **Azure Functions:** Not applicable. Do not set this attribute.\n    */\n    FAAS_VERSION: 'faas.version',\n    /**\n     * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n     *\n     * Note: * **AWS Lambda:** Use the (full) log stream name.\n     */\n    FAAS_INSTANCE: 'faas.instance',\n    /**\n     * The amount of memory available to the serverless function in MiB.\n     *\n     * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n     */\n    FAAS_MAX_MEMORY: 'faas.max_memory',\n    /**\n     * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n     */\n    HOST_ID: 'host.id',\n    /**\n     * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n     */\n    HOST_NAME: 'host.name',\n    /**\n     * Type of host. For Cloud, this must be the machine type.\n     */\n    HOST_TYPE: 'host.type',\n    /**\n     * The CPU architecture the host system is running on.\n     */\n    HOST_ARCH: 'host.arch',\n    /**\n     * Name of the VM image or OS install the host was instantiated from.\n     */\n    HOST_IMAGE_NAME: 'host.image.name',\n    /**\n     * VM image ID. For Cloud, this value is from the provider.\n     */\n    HOST_IMAGE_ID: 'host.image.id',\n    /**\n     * The version string of the VM image as defined in [Version SpanAttributes](README.md#version-attributes).\n     */\n    HOST_IMAGE_VERSION: 'host.image.version',\n    /**\n     * The name of the cluster.\n     */\n    K8S_CLUSTER_NAME: 'k8s.cluster.name',\n    /**\n     * The name of the Node.\n     */\n    K8S_NODE_NAME: 'k8s.node.name',\n    /**\n     * The UID of the Node.\n     */\n    K8S_NODE_UID: 'k8s.node.uid',\n    /**\n     * The name of the namespace that the pod is running in.\n     */\n    K8S_NAMESPACE_NAME: 'k8s.namespace.name',\n    /**\n     * The UID of the Pod.\n     */\n    K8S_POD_UID: 'k8s.pod.uid',\n    /**\n     * The name of the Pod.\n     */\n    K8S_POD_NAME: 'k8s.pod.name',\n    /**\n     * The name of the Container in a Pod template.\n     */\n    K8S_CONTAINER_NAME: 'k8s.container.name',\n    /**\n     * The UID of the ReplicaSet.\n     */\n    K8S_REPLICASET_UID: 'k8s.replicaset.uid',\n    /**\n     * The name of the ReplicaSet.\n     */\n    K8S_REPLICASET_NAME: 'k8s.replicaset.name',\n    /**\n     * The UID of the Deployment.\n     */\n    K8S_DEPLOYMENT_UID: 'k8s.deployment.uid',\n    /**\n     * The name of the Deployment.\n     */\n    K8S_DEPLOYMENT_NAME: 'k8s.deployment.name',\n    /**\n     * The UID of the StatefulSet.\n     */\n    K8S_STATEFULSET_UID: 'k8s.statefulset.uid',\n    /**\n     * The name of the StatefulSet.\n     */\n    K8S_STATEFULSET_NAME: 'k8s.statefulset.name',\n    /**\n     * The UID of the DaemonSet.\n     */\n    K8S_DAEMONSET_UID: 'k8s.daemonset.uid',\n    /**\n     * The name of the DaemonSet.\n     */\n    K8S_DAEMONSET_NAME: 'k8s.daemonset.name',\n    /**\n     * The UID of the Job.\n     */\n    K8S_JOB_UID: 'k8s.job.uid',\n    /**\n     * The name of the Job.\n     */\n    K8S_JOB_NAME: 'k8s.job.name',\n    /**\n     * The UID of the CronJob.\n     */\n    K8S_CRONJOB_UID: 'k8s.cronjob.uid',\n    /**\n     * The name of the CronJob.\n     */\n    K8S_CRONJOB_NAME: 'k8s.cronjob.name',\n    /**\n     * The operating system type.\n     */\n    OS_TYPE: 'os.type',\n    /**\n     * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n     */\n    OS_DESCRIPTION: 'os.description',\n    /**\n     * Human readable operating system name.\n     */\n    OS_NAME: 'os.name',\n    /**\n     * The version string of the operating system as defined in [Version SpanAttributes](../../resource/semantic_conventions/README.md#version-attributes).\n     */\n    OS_VERSION: 'os.version',\n    /**\n     * Process identifier (PID).\n     */\n    PROCESS_PID: 'process.pid',\n    /**\n     * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n     */\n    PROCESS_EXECUTABLE_NAME: 'process.executable.name',\n    /**\n     * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n     */\n    PROCESS_EXECUTABLE_PATH: 'process.executable.path',\n    /**\n     * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n     */\n    PROCESS_COMMAND: 'process.command',\n    /**\n     * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n     */\n    PROCESS_COMMAND_LINE: 'process.command_line',\n    /**\n     * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n     */\n    PROCESS_COMMAND_ARGS: 'process.command_args',\n    /**\n     * The username of the user that owns the process.\n     */\n    PROCESS_OWNER: 'process.owner',\n    /**\n     * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n     */\n    PROCESS_RUNTIME_NAME: 'process.runtime.name',\n    /**\n     * The version of the runtime of this process, as returned by the runtime without modification.\n     */\n    PROCESS_RUNTIME_VERSION: 'process.runtime.version',\n    /**\n     * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n     */\n    PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description',\n    /**\n     * Logical name of the service.\n     *\n     * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n     */\n    SERVICE_NAME: 'service.name',\n    /**\n     * A namespace for `service.name`.\n     *\n     * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n     */\n    SERVICE_NAMESPACE: 'service.namespace',\n    /**\n     * The string ID of the service instance.\n     *\n     * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n     */\n    SERVICE_INSTANCE_ID: 'service.instance.id',\n    /**\n     * The version string of the service API or implementation.\n     */\n    SERVICE_VERSION: 'service.version',\n    /**\n     * The name of the telemetry SDK as defined above.\n     */\n    TELEMETRY_SDK_NAME: 'telemetry.sdk.name',\n    /**\n     * The language of the telemetry SDK.\n     */\n    TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language',\n    /**\n     * The version string of the telemetry SDK.\n     */\n    TELEMETRY_SDK_VERSION: 'telemetry.sdk.version',\n    /**\n     * The version string of the auto instrumentation agent, if used.\n     */\n    TELEMETRY_AUTO_VERSION: 'telemetry.auto.version',\n    /**\n     * The name of the web engine.\n     */\n    WEBENGINE_NAME: 'webengine.name',\n    /**\n     * The version of the web engine.\n     */\n    WEBENGINE_VERSION: 'webengine.version',\n    /**\n     * Additional description of the web engine (e.g. detailed version and edition information).\n     */\n    WEBENGINE_DESCRIPTION: 'webengine.description',\n};\nvar CloudProviderValues = {\n    /** Alibaba Cloud. */\n    ALIBABA_CLOUD: 'alibaba_cloud',\n    /** Amazon Web Services. */\n    AWS: 'aws',\n    /** Microsoft Azure. */\n    AZURE: 'azure',\n    /** Google Cloud Platform. */\n    GCP: 'gcp',\n};\nvar CloudPlatformValues = {\n    /** Alibaba Cloud Elastic Compute Service. */\n    ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs',\n    /** Alibaba Cloud Function Compute. */\n    ALIBABA_CLOUD_FC: 'alibaba_cloud_fc',\n    /** AWS Elastic Compute Cloud. */\n    AWS_EC2: 'aws_ec2',\n    /** AWS Elastic Container Service. */\n    AWS_ECS: 'aws_ecs',\n    /** AWS Elastic Kubernetes Service. */\n    AWS_EKS: 'aws_eks',\n    /** AWS Lambda. */\n    AWS_LAMBDA: 'aws_lambda',\n    /** AWS Elastic Beanstalk. */\n    AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk',\n    /** Azure Virtual Machines. */\n    AZURE_VM: 'azure_vm',\n    /** Azure Container Instances. */\n    AZURE_CONTAINER_INSTANCES: 'azure_container_instances',\n    /** Azure Kubernetes Service. */\n    AZURE_AKS: 'azure_aks',\n    /** Azure Functions. */\n    AZURE_FUNCTIONS: 'azure_functions',\n    /** Azure App Service. */\n    AZURE_APP_SERVICE: 'azure_app_service',\n    /** Google Cloud Compute Engine (GCE). */\n    GCP_COMPUTE_ENGINE: 'gcp_compute_engine',\n    /** Google Cloud Run. */\n    GCP_CLOUD_RUN: 'gcp_cloud_run',\n    /** Google Cloud Kubernetes Engine (GKE). */\n    GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine',\n    /** Google Cloud Functions (GCF). */\n    GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions',\n    /** Google Cloud App Engine (GAE). */\n    GCP_APP_ENGINE: 'gcp_app_engine',\n};\nvar AwsEcsLaunchtypeValues = {\n    /** ec2. */\n    EC2: 'ec2',\n    /** fargate. */\n    FARGATE: 'fargate',\n};\nvar HostArchValues = {\n    /** AMD64. */\n    AMD64: 'amd64',\n    /** ARM32. */\n    ARM32: 'arm32',\n    /** ARM64. */\n    ARM64: 'arm64',\n    /** Itanium. */\n    IA64: 'ia64',\n    /** 32-bit PowerPC. */\n    PPC32: 'ppc32',\n    /** 64-bit PowerPC. */\n    PPC64: 'ppc64',\n    /** 32-bit x86. */\n    X86: 'x86',\n};\nvar OsTypeValues = {\n    /** Microsoft Windows. */\n    WINDOWS: 'windows',\n    /** Linux. */\n    LINUX: 'linux',\n    /** Apple Darwin. */\n    DARWIN: 'darwin',\n    /** FreeBSD. */\n    FREEBSD: 'freebsd',\n    /** NetBSD. */\n    NETBSD: 'netbsd',\n    /** OpenBSD. */\n    OPENBSD: 'openbsd',\n    /** DragonFly BSD. */\n    DRAGONFLYBSD: 'dragonflybsd',\n    /** HP-UX (Hewlett Packard Unix). */\n    HPUX: 'hpux',\n    /** AIX (Advanced Interactive eXecutive). */\n    AIX: 'aix',\n    /** Oracle Solaris. */\n    SOLARIS: 'solaris',\n    /** IBM z/OS. */\n    Z_OS: 'z_os',\n};\nvar TelemetrySdkLanguageValues = {\n    /** cpp. */\n    CPP: 'cpp',\n    /** dotnet. */\n    DOTNET: 'dotnet',\n    /** erlang. */\n    ERLANG: 'erlang',\n    /** go. */\n    GO: 'go',\n    /** java. */\n    JAVA: 'java',\n    /** nodejs. */\n    NODEJS: 'nodejs',\n    /** php. */\n    PHP: 'php',\n    /** python. */\n    PYTHON: 'python',\n    /** ruby. */\n    RUBY: 'ruby',\n    /** webjs. */\n    WEBJS: 'webjs',\n};\n//# sourceMappingURL=SemanticResourceAttributes.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js?");

/***/ }),

/***/ "./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DbCassandraConsistencyLevelValues: () => (/* binding */ DbCassandraConsistencyLevelValues),\n/* harmony export */   DbSystemValues: () => (/* binding */ DbSystemValues),\n/* harmony export */   FaasDocumentOperationValues: () => (/* binding */ FaasDocumentOperationValues),\n/* harmony export */   FaasInvokedProviderValues: () => (/* binding */ FaasInvokedProviderValues),\n/* harmony export */   FaasTriggerValues: () => (/* binding */ FaasTriggerValues),\n/* harmony export */   HttpFlavorValues: () => (/* binding */ HttpFlavorValues),\n/* harmony export */   MessageTypeValues: () => (/* binding */ MessageTypeValues),\n/* harmony export */   MessagingDestinationKindValues: () => (/* binding */ MessagingDestinationKindValues),\n/* harmony export */   MessagingOperationValues: () => (/* binding */ MessagingOperationValues),\n/* harmony export */   NetHostConnectionSubtypeValues: () => (/* binding */ NetHostConnectionSubtypeValues),\n/* harmony export */   NetHostConnectionTypeValues: () => (/* binding */ NetHostConnectionTypeValues),\n/* harmony export */   NetTransportValues: () => (/* binding */ NetTransportValues),\n/* harmony export */   RpcGrpcStatusCodeValues: () => (/* binding */ RpcGrpcStatusCodeValues),\n/* harmony export */   SemanticAttributes: () => (/* binding */ SemanticAttributes)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\nvar SemanticAttributes = {\n    /**\n     * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n     *\n     * Note: This may be different from `faas.id` if an alias is involved.\n     */\n    AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn',\n    /**\n     * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n     */\n    DB_SYSTEM: 'db.system',\n    /**\n     * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n     */\n    DB_CONNECTION_STRING: 'db.connection_string',\n    /**\n     * Username for accessing the database.\n     */\n    DB_USER: 'db.user',\n    /**\n     * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n     */\n    DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname',\n    /**\n     * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n     *\n     * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n     */\n    DB_NAME: 'db.name',\n    /**\n     * The database statement being executed.\n     *\n     * Note: The value may be sanitized to exclude sensitive information.\n     */\n    DB_STATEMENT: 'db.statement',\n    /**\n     * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n     *\n     * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n     */\n    DB_OPERATION: 'db.operation',\n    /**\n     * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n     *\n     * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n     */\n    DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name',\n    /**\n     * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n     */\n    DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace',\n    /**\n     * The fetch size used for paging, i.e. how many rows will be returned at once.\n     */\n    DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size',\n    /**\n     * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n     */\n    DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level',\n    /**\n     * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n     *\n     * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n     */\n    DB_CASSANDRA_TABLE: 'db.cassandra.table',\n    /**\n     * Whether or not the query is idempotent.\n     */\n    DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence',\n    /**\n     * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n     */\n    DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: 'db.cassandra.speculative_execution_count',\n    /**\n     * The ID of the coordinating node for a query.\n     */\n    DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id',\n    /**\n     * The data center of the coordinating node for a query.\n     */\n    DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc',\n    /**\n     * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n     */\n    DB_HBASE_NAMESPACE: 'db.hbase.namespace',\n    /**\n     * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n     */\n    DB_REDIS_DATABASE_INDEX: 'db.redis.database_index',\n    /**\n     * The collection being accessed within the database stated in `db.name`.\n     */\n    DB_MONGODB_COLLECTION: 'db.mongodb.collection',\n    /**\n     * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n     *\n     * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n     */\n    DB_SQL_TABLE: 'db.sql.table',\n    /**\n     * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n     */\n    EXCEPTION_TYPE: 'exception.type',\n    /**\n     * The exception message.\n     */\n    EXCEPTION_MESSAGE: 'exception.message',\n    /**\n     * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n     */\n    EXCEPTION_STACKTRACE: 'exception.stacktrace',\n    /**\n    * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n    *\n    * Note: An exception is considered to have escaped (or left) the scope of a span,\n  if that span is ended while the exception is still logically &#34;in flight&#34;.\n  This may be actually &#34;in flight&#34; in some languages (e.g. if the exception\n  is passed to a Context manager&#39;s `__exit__` method in Python) but will\n  usually be caught at the point of recording the exception in most languages.\n  \n  It is usually not possible to determine at the point where an exception is thrown\n  whether it will escape the scope of a span.\n  However, it is trivial to know that an exception\n  will escape, if one checks for an active exception just before ending the span,\n  as done in the [example above](#exception-end-example).\n  \n  It follows that an exception may still escape the scope of the span\n  even if the `exception.escaped` attribute was not set or set to false,\n  since the event might have been recorded at a time where it was not\n  clear whether the exception will escape.\n    */\n    EXCEPTION_ESCAPED: 'exception.escaped',\n    /**\n     * Type of the trigger on which the function is executed.\n     */\n    FAAS_TRIGGER: 'faas.trigger',\n    /**\n     * The execution ID of the current function execution.\n     */\n    FAAS_EXECUTION: 'faas.execution',\n    /**\n     * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n     */\n    FAAS_DOCUMENT_COLLECTION: 'faas.document.collection',\n    /**\n     * Describes the type of the operation that was performed on the data.\n     */\n    FAAS_DOCUMENT_OPERATION: 'faas.document.operation',\n    /**\n     * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n     */\n    FAAS_DOCUMENT_TIME: 'faas.document.time',\n    /**\n     * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n     */\n    FAAS_DOCUMENT_NAME: 'faas.document.name',\n    /**\n     * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n     */\n    FAAS_TIME: 'faas.time',\n    /**\n     * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n     */\n    FAAS_CRON: 'faas.cron',\n    /**\n     * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n     */\n    FAAS_COLDSTART: 'faas.coldstart',\n    /**\n     * The name of the invoked function.\n     *\n     * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n     */\n    FAAS_INVOKED_NAME: 'faas.invoked_name',\n    /**\n     * The cloud provider of the invoked function.\n     *\n     * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n     */\n    FAAS_INVOKED_PROVIDER: 'faas.invoked_provider',\n    /**\n     * The cloud region of the invoked function.\n     *\n     * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n     */\n    FAAS_INVOKED_REGION: 'faas.invoked_region',\n    /**\n     * Transport protocol used. See note below.\n     */\n    NET_TRANSPORT: 'net.transport',\n    /**\n     * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n     */\n    NET_PEER_IP: 'net.peer.ip',\n    /**\n     * Remote port number.\n     */\n    NET_PEER_PORT: 'net.peer.port',\n    /**\n     * Remote hostname or similar, see note below.\n     */\n    NET_PEER_NAME: 'net.peer.name',\n    /**\n     * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n     */\n    NET_HOST_IP: 'net.host.ip',\n    /**\n     * Like `net.peer.port` but for the host port.\n     */\n    NET_HOST_PORT: 'net.host.port',\n    /**\n     * Local hostname or similar, see note below.\n     */\n    NET_HOST_NAME: 'net.host.name',\n    /**\n     * The internet connection type currently being used by the host.\n     */\n    NET_HOST_CONNECTION_TYPE: 'net.host.connection.type',\n    /**\n     * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n     */\n    NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype',\n    /**\n     * The name of the mobile carrier.\n     */\n    NET_HOST_CARRIER_NAME: 'net.host.carrier.name',\n    /**\n     * The mobile carrier country code.\n     */\n    NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc',\n    /**\n     * The mobile carrier network code.\n     */\n    NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc',\n    /**\n     * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n     */\n    NET_HOST_CARRIER_ICC: 'net.host.carrier.icc',\n    /**\n     * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n     */\n    PEER_SERVICE: 'peer.service',\n    /**\n     * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n     */\n    ENDUSER_ID: 'enduser.id',\n    /**\n     * Actual/assumed role the client is making the request under extracted from token or application security context.\n     */\n    ENDUSER_ROLE: 'enduser.role',\n    /**\n     * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n     */\n    ENDUSER_SCOPE: 'enduser.scope',\n    /**\n     * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n     */\n    THREAD_ID: 'thread.id',\n    /**\n     * Current thread name.\n     */\n    THREAD_NAME: 'thread.name',\n    /**\n     * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n     */\n    CODE_FUNCTION: 'code.function',\n    /**\n     * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n     */\n    CODE_NAMESPACE: 'code.namespace',\n    /**\n     * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n     */\n    CODE_FILEPATH: 'code.filepath',\n    /**\n     * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n     */\n    CODE_LINENO: 'code.lineno',\n    /**\n     * HTTP request method.\n     */\n    HTTP_METHOD: 'http.method',\n    /**\n     * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n     *\n     * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n     */\n    HTTP_URL: 'http.url',\n    /**\n     * The full request target as passed in a HTTP request line or equivalent.\n     */\n    HTTP_TARGET: 'http.target',\n    /**\n     * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n     *\n     * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n     */\n    HTTP_HOST: 'http.host',\n    /**\n     * The URI scheme identifying the used protocol.\n     */\n    HTTP_SCHEME: 'http.scheme',\n    /**\n     * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n     */\n    HTTP_STATUS_CODE: 'http.status_code',\n    /**\n     * Kind of HTTP protocol used.\n     *\n     * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n     */\n    HTTP_FLAVOR: 'http.flavor',\n    /**\n     * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n     */\n    HTTP_USER_AGENT: 'http.user_agent',\n    /**\n     * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n     */\n    HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length',\n    /**\n     * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n     */\n    HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: 'http.request_content_length_uncompressed',\n    /**\n     * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n     */\n    HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length',\n    /**\n     * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n     */\n    HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: 'http.response_content_length_uncompressed',\n    /**\n     * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n     *\n     * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n     */\n    HTTP_SERVER_NAME: 'http.server_name',\n    /**\n     * The matched route (path template).\n     */\n    HTTP_ROUTE: 'http.route',\n    /**\n    * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n    *\n    * Note: This is not necessarily the same as `net.peer.ip`, which would\n  identify the network-level peer, which may be a proxy.\n  \n  This attribute should be set when a source of information different\n  from the one used for `net.peer.ip`, is available even if that other\n  source just confirms the same value as `net.peer.ip`.\n  Rationale: For `net.peer.ip`, one typically does not know if it\n  comes from a proxy, reverse proxy, or the actual client. Setting\n  `http.client_ip` when it&#39;s the same as `net.peer.ip` means that\n  one is at least somewhat confident that the address is not that of\n  the closest proxy.\n    */\n    HTTP_CLIENT_IP: 'http.client_ip',\n    /**\n     * The keys in the `RequestItems` object field.\n     */\n    AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names',\n    /**\n     * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n     */\n    AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity',\n    /**\n     * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n     */\n    AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics',\n    /**\n     * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n     */\n    AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: 'aws.dynamodb.provisioned_read_capacity',\n    /**\n     * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n     */\n    AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: 'aws.dynamodb.provisioned_write_capacity',\n    /**\n     * The value of the `ConsistentRead` request parameter.\n     */\n    AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read',\n    /**\n     * The value of the `ProjectionExpression` request parameter.\n     */\n    AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection',\n    /**\n     * The value of the `Limit` request parameter.\n     */\n    AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit',\n    /**\n     * The value of the `AttributesToGet` request parameter.\n     */\n    AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get',\n    /**\n     * The value of the `IndexName` request parameter.\n     */\n    AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name',\n    /**\n     * The value of the `Select` request parameter.\n     */\n    AWS_DYNAMODB_SELECT: 'aws.dynamodb.select',\n    /**\n     * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n     */\n    AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: 'aws.dynamodb.global_secondary_indexes',\n    /**\n     * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n     */\n    AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes',\n    /**\n     * The value of the `ExclusiveStartTableName` request parameter.\n     */\n    AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table',\n    /**\n     * The the number of items in the `TableNames` response parameter.\n     */\n    AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count',\n    /**\n     * The value of the `ScanIndexForward` request parameter.\n     */\n    AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward',\n    /**\n     * The value of the `Segment` request parameter.\n     */\n    AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment',\n    /**\n     * The value of the `TotalSegments` request parameter.\n     */\n    AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments',\n    /**\n     * The value of the `Count` response parameter.\n     */\n    AWS_DYNAMODB_COUNT: 'aws.dynamodb.count',\n    /**\n     * The value of the `ScannedCount` response parameter.\n     */\n    AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count',\n    /**\n     * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n     */\n    AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions',\n    /**\n     * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n     */\n    AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: 'aws.dynamodb.global_secondary_index_updates',\n    /**\n     * A string identifying the messaging system.\n     */\n    MESSAGING_SYSTEM: 'messaging.system',\n    /**\n     * The message destination name. This might be equal to the span name but is required nevertheless.\n     */\n    MESSAGING_DESTINATION: 'messaging.destination',\n    /**\n     * The kind of message destination.\n     */\n    MESSAGING_DESTINATION_KIND: 'messaging.destination_kind',\n    /**\n     * A boolean that is true if the message destination is temporary.\n     */\n    MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination',\n    /**\n     * The name of the transport protocol.\n     */\n    MESSAGING_PROTOCOL: 'messaging.protocol',\n    /**\n     * The version of the transport protocol.\n     */\n    MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version',\n    /**\n     * Connection string.\n     */\n    MESSAGING_URL: 'messaging.url',\n    /**\n     * A value used by the messaging system as an identifier for the message, represented as a string.\n     */\n    MESSAGING_MESSAGE_ID: 'messaging.message_id',\n    /**\n     * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n     */\n    MESSAGING_CONVERSATION_ID: 'messaging.conversation_id',\n    /**\n     * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n     */\n    MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes',\n    /**\n     * The compressed size of the message payload in bytes.\n     */\n    MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: 'messaging.message_payload_compressed_size_bytes',\n    /**\n     * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n     */\n    MESSAGING_OPERATION: 'messaging.operation',\n    /**\n     * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n     */\n    MESSAGING_CONSUMER_ID: 'messaging.consumer_id',\n    /**\n     * RabbitMQ message routing key.\n     */\n    MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key',\n    /**\n     * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n     *\n     * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n     */\n    MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key',\n    /**\n     * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n     */\n    MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group',\n    /**\n     * Client Id for the Consumer or Producer that is handling the message.\n     */\n    MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id',\n    /**\n     * Partition the message is sent to.\n     */\n    MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition',\n    /**\n     * A boolean that is true if the message is a tombstone.\n     */\n    MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone',\n    /**\n     * A string identifying the remoting system.\n     */\n    RPC_SYSTEM: 'rpc.system',\n    /**\n     * The full (logical) name of the service being called, including its package name, if applicable.\n     *\n     * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n     */\n    RPC_SERVICE: 'rpc.service',\n    /**\n     * The name of the (logical) method being called, must be equal to the $method part in the span name.\n     *\n     * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n     */\n    RPC_METHOD: 'rpc.method',\n    /**\n     * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n     */\n    RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code',\n    /**\n     * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n     */\n    RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version',\n    /**\n     * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n     */\n    RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id',\n    /**\n     * `error.code` property of response if it is an error response.\n     */\n    RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code',\n    /**\n     * `error.message` property of response if it is an error response.\n     */\n    RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message',\n    /**\n     * Whether this is a received or sent message.\n     */\n    MESSAGE_TYPE: 'message.type',\n    /**\n     * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n     *\n     * Note: This way we guarantee that the values will be consistent between different implementations.\n     */\n    MESSAGE_ID: 'message.id',\n    /**\n     * Compressed size of the message in bytes.\n     */\n    MESSAGE_COMPRESSED_SIZE: 'message.compressed_size',\n    /**\n     * Uncompressed size of the message in bytes.\n     */\n    MESSAGE_UNCOMPRESSED_SIZE: 'message.uncompressed_size',\n};\nvar DbSystemValues = {\n    /** Some other SQL database. Fallback only. See notes. */\n    OTHER_SQL: 'other_sql',\n    /** Microsoft SQL Server. */\n    MSSQL: 'mssql',\n    /** MySQL. */\n    MYSQL: 'mysql',\n    /** Oracle Database. */\n    ORACLE: 'oracle',\n    /** IBM Db2. */\n    DB2: 'db2',\n    /** PostgreSQL. */\n    POSTGRESQL: 'postgresql',\n    /** Amazon Redshift. */\n    REDSHIFT: 'redshift',\n    /** Apache Hive. */\n    HIVE: 'hive',\n    /** Cloudscape. */\n    CLOUDSCAPE: 'cloudscape',\n    /** HyperSQL DataBase. */\n    HSQLDB: 'hsqldb',\n    /** Progress Database. */\n    PROGRESS: 'progress',\n    /** SAP MaxDB. */\n    MAXDB: 'maxdb',\n    /** SAP HANA. */\n    HANADB: 'hanadb',\n    /** Ingres. */\n    INGRES: 'ingres',\n    /** FirstSQL. */\n    FIRSTSQL: 'firstsql',\n    /** EnterpriseDB. */\n    EDB: 'edb',\n    /** InterSystems Caché. */\n    CACHE: 'cache',\n    /** Adabas (Adaptable Database System). */\n    ADABAS: 'adabas',\n    /** Firebird. */\n    FIREBIRD: 'firebird',\n    /** Apache Derby. */\n    DERBY: 'derby',\n    /** FileMaker. */\n    FILEMAKER: 'filemaker',\n    /** Informix. */\n    INFORMIX: 'informix',\n    /** InstantDB. */\n    INSTANTDB: 'instantdb',\n    /** InterBase. */\n    INTERBASE: 'interbase',\n    /** MariaDB. */\n    MARIADB: 'mariadb',\n    /** Netezza. */\n    NETEZZA: 'netezza',\n    /** Pervasive PSQL. */\n    PERVASIVE: 'pervasive',\n    /** PointBase. */\n    POINTBASE: 'pointbase',\n    /** SQLite. */\n    SQLITE: 'sqlite',\n    /** Sybase. */\n    SYBASE: 'sybase',\n    /** Teradata. */\n    TERADATA: 'teradata',\n    /** Vertica. */\n    VERTICA: 'vertica',\n    /** H2. */\n    H2: 'h2',\n    /** ColdFusion IMQ. */\n    COLDFUSION: 'coldfusion',\n    /** Apache Cassandra. */\n    CASSANDRA: 'cassandra',\n    /** Apache HBase. */\n    HBASE: 'hbase',\n    /** MongoDB. */\n    MONGODB: 'mongodb',\n    /** Redis. */\n    REDIS: 'redis',\n    /** Couchbase. */\n    COUCHBASE: 'couchbase',\n    /** CouchDB. */\n    COUCHDB: 'couchdb',\n    /** Microsoft Azure Cosmos DB. */\n    COSMOSDB: 'cosmosdb',\n    /** Amazon DynamoDB. */\n    DYNAMODB: 'dynamodb',\n    /** Neo4j. */\n    NEO4J: 'neo4j',\n    /** Apache Geode. */\n    GEODE: 'geode',\n    /** Elasticsearch. */\n    ELASTICSEARCH: 'elasticsearch',\n    /** Memcached. */\n    MEMCACHED: 'memcached',\n    /** CockroachDB. */\n    COCKROACHDB: 'cockroachdb',\n};\nvar DbCassandraConsistencyLevelValues = {\n    /** all. */\n    ALL: 'all',\n    /** each_quorum. */\n    EACH_QUORUM: 'each_quorum',\n    /** quorum. */\n    QUORUM: 'quorum',\n    /** local_quorum. */\n    LOCAL_QUORUM: 'local_quorum',\n    /** one. */\n    ONE: 'one',\n    /** two. */\n    TWO: 'two',\n    /** three. */\n    THREE: 'three',\n    /** local_one. */\n    LOCAL_ONE: 'local_one',\n    /** any. */\n    ANY: 'any',\n    /** serial. */\n    SERIAL: 'serial',\n    /** local_serial. */\n    LOCAL_SERIAL: 'local_serial',\n};\nvar FaasTriggerValues = {\n    /** A response to some data source operation such as a database or filesystem read/write. */\n    DATASOURCE: 'datasource',\n    /** To provide an answer to an inbound HTTP request. */\n    HTTP: 'http',\n    /** A function is set to be executed when messages are sent to a messaging system. */\n    PUBSUB: 'pubsub',\n    /** A function is scheduled to be executed regularly. */\n    TIMER: 'timer',\n    /** If none of the others apply. */\n    OTHER: 'other',\n};\nvar FaasDocumentOperationValues = {\n    /** When a new object is created. */\n    INSERT: 'insert',\n    /** When an object is modified. */\n    EDIT: 'edit',\n    /** When an object is deleted. */\n    DELETE: 'delete',\n};\nvar FaasInvokedProviderValues = {\n    /** Alibaba Cloud. */\n    ALIBABA_CLOUD: 'alibaba_cloud',\n    /** Amazon Web Services. */\n    AWS: 'aws',\n    /** Microsoft Azure. */\n    AZURE: 'azure',\n    /** Google Cloud Platform. */\n    GCP: 'gcp',\n};\nvar NetTransportValues = {\n    /** ip_tcp. */\n    IP_TCP: 'ip_tcp',\n    /** ip_udp. */\n    IP_UDP: 'ip_udp',\n    /** Another IP-based protocol. */\n    IP: 'ip',\n    /** Unix Domain socket. See below. */\n    UNIX: 'unix',\n    /** Named or anonymous pipe. See note below. */\n    PIPE: 'pipe',\n    /** In-process communication. */\n    INPROC: 'inproc',\n    /** Something else (non IP-based). */\n    OTHER: 'other',\n};\nvar NetHostConnectionTypeValues = {\n    /** wifi. */\n    WIFI: 'wifi',\n    /** wired. */\n    WIRED: 'wired',\n    /** cell. */\n    CELL: 'cell',\n    /** unavailable. */\n    UNAVAILABLE: 'unavailable',\n    /** unknown. */\n    UNKNOWN: 'unknown',\n};\nvar NetHostConnectionSubtypeValues = {\n    /** GPRS. */\n    GPRS: 'gprs',\n    /** EDGE. */\n    EDGE: 'edge',\n    /** UMTS. */\n    UMTS: 'umts',\n    /** CDMA. */\n    CDMA: 'cdma',\n    /** EVDO Rel. 0. */\n    EVDO_0: 'evdo_0',\n    /** EVDO Rev. A. */\n    EVDO_A: 'evdo_a',\n    /** CDMA2000 1XRTT. */\n    CDMA2000_1XRTT: 'cdma2000_1xrtt',\n    /** HSDPA. */\n    HSDPA: 'hsdpa',\n    /** HSUPA. */\n    HSUPA: 'hsupa',\n    /** HSPA. */\n    HSPA: 'hspa',\n    /** IDEN. */\n    IDEN: 'iden',\n    /** EVDO Rev. B. */\n    EVDO_B: 'evdo_b',\n    /** LTE. */\n    LTE: 'lte',\n    /** EHRPD. */\n    EHRPD: 'ehrpd',\n    /** HSPAP. */\n    HSPAP: 'hspap',\n    /** GSM. */\n    GSM: 'gsm',\n    /** TD-SCDMA. */\n    TD_SCDMA: 'td_scdma',\n    /** IWLAN. */\n    IWLAN: 'iwlan',\n    /** 5G NR (New Radio). */\n    NR: 'nr',\n    /** 5G NRNSA (New Radio Non-Standalone). */\n    NRNSA: 'nrnsa',\n    /** LTE CA. */\n    LTE_CA: 'lte_ca',\n};\nvar HttpFlavorValues = {\n    /** HTTP 1.0. */\n    HTTP_1_0: '1.0',\n    /** HTTP 1.1. */\n    HTTP_1_1: '1.1',\n    /** HTTP 2. */\n    HTTP_2_0: '2.0',\n    /** SPDY protocol. */\n    SPDY: 'SPDY',\n    /** QUIC protocol. */\n    QUIC: 'QUIC',\n};\nvar MessagingDestinationKindValues = {\n    /** A message sent to a queue. */\n    QUEUE: 'queue',\n    /** A message sent to a topic. */\n    TOPIC: 'topic',\n};\nvar MessagingOperationValues = {\n    /** receive. */\n    RECEIVE: 'receive',\n    /** process. */\n    PROCESS: 'process',\n};\nvar RpcGrpcStatusCodeValues = {\n    /** OK. */\n    OK: 0,\n    /** CANCELLED. */\n    CANCELLED: 1,\n    /** UNKNOWN. */\n    UNKNOWN: 2,\n    /** INVALID_ARGUMENT. */\n    INVALID_ARGUMENT: 3,\n    /** DEADLINE_EXCEEDED. */\n    DEADLINE_EXCEEDED: 4,\n    /** NOT_FOUND. */\n    NOT_FOUND: 5,\n    /** ALREADY_EXISTS. */\n    ALREADY_EXISTS: 6,\n    /** PERMISSION_DENIED. */\n    PERMISSION_DENIED: 7,\n    /** RESOURCE_EXHAUSTED. */\n    RESOURCE_EXHAUSTED: 8,\n    /** FAILED_PRECONDITION. */\n    FAILED_PRECONDITION: 9,\n    /** ABORTED. */\n    ABORTED: 10,\n    /** OUT_OF_RANGE. */\n    OUT_OF_RANGE: 11,\n    /** UNIMPLEMENTED. */\n    UNIMPLEMENTED: 12,\n    /** INTERNAL. */\n    INTERNAL: 13,\n    /** UNAVAILABLE. */\n    UNAVAILABLE: 14,\n    /** DATA_LOSS. */\n    DATA_LOSS: 15,\n    /** UNAUTHENTICATED. */\n    UNAUTHENTICATED: 16,\n};\nvar MessageTypeValues = {\n    /** sent. */\n    SENT: 'SENT',\n    /** received. */\n    RECEIVED: 'RECEIVED',\n};\n//# sourceMappingURL=SemanticAttributes.js.map\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@protobufjs/aspromise/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@protobufjs/base64/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@protobufjs/eventemitter/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@protobufjs/float/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@protobufjs/inquire/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/***/ ((module) => {

eval("\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@protobufjs/pool/index.js?");

/***/ }),

/***/ "./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@protobufjs/utf8/index.js?");

/***/ }),

/***/ "./node_modules/protobufjs/minimal.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/minimal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// minimal library entry point.\n\n\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"./node_modules/protobufjs/src/index-minimal.js\");\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader       = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"./node_modules/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util         = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc          = __webpack_require__(/*! ./rpc */ \"./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots        = __webpack_require__(/*! ./roots */ \"./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/src/index-minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Reader;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/src/reader.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/src/reader_buffer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/src/roots.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"./node_modules/protobufjs/src/rpc/service.js\");\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/src/rpc.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Service;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/src/rpc/service.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = LongBits;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/src/util/longbits.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"./node_modules/protobufjs/src/util/longbits.js\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof __webpack_require__.g !== \"undefined\"\n                   && __webpack_require__.g\n                   && __webpack_require__.g.process\n                   && __webpack_require__.g.process.versions\n                   && __webpack_require__.g.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && __webpack_require__.g\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/src/util/minimal.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Writer;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/src/writer.js?");

/***/ }),

/***/ "./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/protobufjs/src/writer_buffer.js?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _middleware_io_agent_apm_worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @middleware.io/agent-apm-worker */ \"./node_modules/@middleware.io/agent-apm-worker/dist/init.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    fetch(request, env, ctx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            (0,_middleware_io_agent_apm_worker__WEBPACK_IMPORTED_MODULE_0__.init)({\n                projectName: \"demo-cloudflare-project\",\n                serviceName: \"demo-cloudflare-service\",\n                accountKey: \"{ACCOUNT_KEY}\",\n                target: \"https://{ACCOUNT-UID}.middleware.io\"\n            });\n            const sdk = (0,_middleware_io_agent_apm_worker__WEBPACK_IMPORTED_MODULE_0__.track)(request, ctx);\n            sdk.logger.error(\"demo error log\");\n            sdk.logger.info(\"demo info log\");\n            sdk.logger.warn(\"demo warn log\");\n            sdk.logger.debug(\"demo debug log\");\n            const url = new URL(request.url);\n            const response = yield sdk.fetch(`https://httpbin.org${url.pathname}`);\n            return sdk.sendResponse(response);\n        });\n    },\n});\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./src/index.ts?");

/***/ }),

/***/ "./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-3AAH5RA7.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-3AAH5RA7.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createExportLogsServiceRequest: () => (/* binding */ createExportLogsServiceRequest)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/hex-to-base64.js\");\n/* harmony import */ var _opentelemetry_otlp_transformer_build_src_common_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/otlp-transformer/build/src/common/internal */ \"./node_modules/@opentelemetry/otlp-transformer/build/src/common/internal.js\");\n// src/exporters/utils.ts\n\n\nfunction createExportLogsServiceRequest(spans, useHex) {\n  return {\n    resourceLogs: spanRecordsToResourceLogs(spans, useHex)\n  };\n}\nfunction createResourceMap(logRecords) {\n  const resourceMap = /* @__PURE__ */ new Map();\n  for (const record of logRecords) {\n    let ilmMap = resourceMap.get(record.resource);\n    if (!ilmMap) {\n      ilmMap = /* @__PURE__ */ new Map();\n      resourceMap.set(record.resource, ilmMap);\n    }\n    const instrumentationLibraryKey = `opentelemetry-sdk-workers@:`;\n    let records = ilmMap.get(instrumentationLibraryKey);\n    if (!records) {\n      records = [];\n      ilmMap.set(instrumentationLibraryKey, records);\n    }\n    records.push(record);\n  }\n  return resourceMap;\n}\nfunction spanRecordsToResourceLogs(logRecords, useHex) {\n  const resourceMap = createResourceMap(logRecords);\n  const out = [];\n  for (const [resource, ilmMap] of resourceMap) {\n    const scopeResourceLogs = [];\n    for (const [, scopeLogs] of ilmMap) {\n      if (scopeLogs.length > 0) {\n        const { name, version } = scopeLogs[0].instrumentationLibrary;\n        const logs = scopeLogs.map(\n          (logRecord) => sdkLogRecordToOtlpSpan(logRecord, useHex)\n        );\n        scopeResourceLogs.push({\n          scope: { name, version },\n          logRecords: logs\n        });\n      }\n    }\n    const transformedSpans = {\n      resource: {\n        attributes: (0,_opentelemetry_otlp_transformer_build_src_common_internal__WEBPACK_IMPORTED_MODULE_0__.toAttributes)(resource.attributes),\n        droppedAttributesCount: 0\n      },\n      scopeLogs: scopeResourceLogs\n    };\n    out.push(transformedSpans);\n  }\n  const entryIterator = resourceMap.entries();\n  let entry = entryIterator.next();\n  while (!entry.done) {\n    const [resource, ilmMap] = entry.value;\n    entry = entryIterator.next();\n  }\n  return out;\n}\nfunction sdkLogRecordToOtlpSpan(logRecord, useHex) {\n  return {\n    timeUnixNano: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)(logRecord.timestamp),\n    observedTimeUnixNano: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.hrTimeToNanoseconds)(logRecord.observedTimestamp),\n    severityNumber: logRecord.severityNumber,\n    severityText: logRecord.severityText,\n    body: (0,_opentelemetry_otlp_transformer_build_src_common_internal__WEBPACK_IMPORTED_MODULE_0__.toAnyValue)(logRecord.body),\n    attributes: (0,_opentelemetry_otlp_transformer_build_src_common_internal__WEBPACK_IMPORTED_MODULE_0__.toAttributes)(logRecord.attributes),\n    droppedAttributesCount: 0,\n    traceId: useHex ? logRecord.traceId : (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hexToBase64)(logRecord.traceId),\n    spanId: useHex ? logRecord.spanId : (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hexToBase64)(logRecord.spanId)\n  };\n}\n\n\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-3AAH5RA7.mjs?");

/***/ }),

/***/ "./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-RZL4WSYM.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-RZL4WSYM.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   opentelemetry: () => (/* binding */ opentelemetry)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"./node_modules/protobufjs/minimal.js\");\n// src/proto.js\n\nvar $Reader = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader;\nvar $Writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer;\nvar $util = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util;\nvar $root = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.roots[\"default\"] || (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.roots[\"default\"] = {});\nvar opentelemetry = $root.opentelemetry = (() => {\n  const opentelemetry2 = {};\n  opentelemetry2.proto = function() {\n    const proto = {};\n    proto.common = function() {\n      const common = {};\n      common.v1 = function() {\n        const v1 = {};\n        v1.AnyValue = function() {\n          function AnyValue(properties) {\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          AnyValue.prototype.stringValue = null;\n          AnyValue.prototype.boolValue = null;\n          AnyValue.prototype.intValue = null;\n          AnyValue.prototype.doubleValue = null;\n          AnyValue.prototype.arrayValue = null;\n          AnyValue.prototype.kvlistValue = null;\n          AnyValue.prototype.bytesValue = null;\n          let $oneOfFields;\n          Object.defineProperty(AnyValue.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"stringValue\", \"boolValue\", \"intValue\", \"doubleValue\", \"arrayValue\", \"kvlistValue\", \"bytesValue\"]),\n            set: $util.oneOfSetter($oneOfFields)\n          });\n          AnyValue.create = function create(properties) {\n            return new AnyValue(properties);\n          };\n          AnyValue.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.stringValue != null && Object.hasOwnProperty.call(message, \"stringValue\"))\n              writer.uint32(10).string(message.stringValue);\n            if (message.boolValue != null && Object.hasOwnProperty.call(message, \"boolValue\"))\n              writer.uint32(16).bool(message.boolValue);\n            if (message.intValue != null && Object.hasOwnProperty.call(message, \"intValue\"))\n              writer.uint32(24).int64(message.intValue);\n            if (message.doubleValue != null && Object.hasOwnProperty.call(message, \"doubleValue\"))\n              writer.uint32(33).double(message.doubleValue);\n            if (message.arrayValue != null && Object.hasOwnProperty.call(message, \"arrayValue\"))\n              $root.opentelemetry.proto.common.v1.ArrayValue.encode(message.arrayValue, writer.uint32(42).fork()).ldelim();\n            if (message.kvlistValue != null && Object.hasOwnProperty.call(message, \"kvlistValue\"))\n              $root.opentelemetry.proto.common.v1.KeyValueList.encode(message.kvlistValue, writer.uint32(50).fork()).ldelim();\n            if (message.bytesValue != null && Object.hasOwnProperty.call(message, \"bytesValue\"))\n              writer.uint32(58).bytes(message.bytesValue);\n            return writer;\n          };\n          AnyValue.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          AnyValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.AnyValue();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  message.stringValue = reader.string();\n                  break;\n                }\n                case 2: {\n                  message.boolValue = reader.bool();\n                  break;\n                }\n                case 3: {\n                  message.intValue = reader.int64();\n                  break;\n                }\n                case 4: {\n                  message.doubleValue = reader.double();\n                  break;\n                }\n                case 5: {\n                  message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.decode(reader, reader.uint32());\n                  break;\n                }\n                case 6: {\n                  message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.decode(reader, reader.uint32());\n                  break;\n                }\n                case 7: {\n                  message.bytesValue = reader.bytes();\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          AnyValue.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          AnyValue.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            let properties = {};\n            if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n              properties.value = 1;\n              if (!$util.isString(message.stringValue))\n                return \"stringValue: string expected\";\n            }\n            if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n              if (properties.value === 1)\n                return \"value: multiple values\";\n              properties.value = 1;\n              if (typeof message.boolValue !== \"boolean\")\n                return \"boolValue: boolean expected\";\n            }\n            if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n              if (properties.value === 1)\n                return \"value: multiple values\";\n              properties.value = 1;\n              if (!$util.isInteger(message.intValue) && !(message.intValue && $util.isInteger(message.intValue.low) && $util.isInteger(message.intValue.high)))\n                return \"intValue: integer|Long expected\";\n            }\n            if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n              if (properties.value === 1)\n                return \"value: multiple values\";\n              properties.value = 1;\n              if (typeof message.doubleValue !== \"number\")\n                return \"doubleValue: number expected\";\n            }\n            if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n              if (properties.value === 1)\n                return \"value: multiple values\";\n              properties.value = 1;\n              {\n                let error = $root.opentelemetry.proto.common.v1.ArrayValue.verify(message.arrayValue);\n                if (error)\n                  return \"arrayValue.\" + error;\n              }\n            }\n            if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n              if (properties.value === 1)\n                return \"value: multiple values\";\n              properties.value = 1;\n              {\n                let error = $root.opentelemetry.proto.common.v1.KeyValueList.verify(message.kvlistValue);\n                if (error)\n                  return \"kvlistValue.\" + error;\n              }\n            }\n            if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n              if (properties.value === 1)\n                return \"value: multiple values\";\n              properties.value = 1;\n              if (!(message.bytesValue && typeof message.bytesValue.length === \"number\" || $util.isString(message.bytesValue)))\n                return \"bytesValue: buffer expected\";\n            }\n            return null;\n          };\n          AnyValue.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.common.v1.AnyValue)\n              return object;\n            let message = new $root.opentelemetry.proto.common.v1.AnyValue();\n            if (object.stringValue != null)\n              message.stringValue = String(object.stringValue);\n            if (object.boolValue != null)\n              message.boolValue = Boolean(object.boolValue);\n            if (object.intValue != null) {\n              if ($util.Long)\n                (message.intValue = $util.Long.fromValue(object.intValue)).unsigned = false;\n              else if (typeof object.intValue === \"string\")\n                message.intValue = parseInt(object.intValue, 10);\n              else if (typeof object.intValue === \"number\")\n                message.intValue = object.intValue;\n              else if (typeof object.intValue === \"object\")\n                message.intValue = new $util.LongBits(object.intValue.low >>> 0, object.intValue.high >>> 0).toNumber();\n            }\n            if (object.doubleValue != null)\n              message.doubleValue = Number(object.doubleValue);\n            if (object.arrayValue != null) {\n              if (typeof object.arrayValue !== \"object\")\n                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.arrayValue: object expected\");\n              message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.fromObject(object.arrayValue);\n            }\n            if (object.kvlistValue != null) {\n              if (typeof object.kvlistValue !== \"object\")\n                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.kvlistValue: object expected\");\n              message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.fromObject(object.kvlistValue);\n            }\n            if (object.bytesValue != null) {\n              if (typeof object.bytesValue === \"string\")\n                $util.base64.decode(object.bytesValue, message.bytesValue = $util.newBuffer($util.base64.length(object.bytesValue)), 0);\n              else if (object.bytesValue.length >= 0)\n                message.bytesValue = object.bytesValue;\n            }\n            return message;\n          };\n          AnyValue.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n              object.stringValue = message.stringValue;\n              if (options.oneofs)\n                object.value = \"stringValue\";\n            }\n            if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n              object.boolValue = message.boolValue;\n              if (options.oneofs)\n                object.value = \"boolValue\";\n            }\n            if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n              if (typeof message.intValue === \"number\")\n                object.intValue = options.longs === String ? String(message.intValue) : message.intValue;\n              else\n                object.intValue = options.longs === String ? $util.Long.prototype.toString.call(message.intValue) : options.longs === Number ? new $util.LongBits(message.intValue.low >>> 0, message.intValue.high >>> 0).toNumber() : message.intValue;\n              if (options.oneofs)\n                object.value = \"intValue\";\n            }\n            if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n              object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;\n              if (options.oneofs)\n                object.value = \"doubleValue\";\n            }\n            if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n              object.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.toObject(message.arrayValue, options);\n              if (options.oneofs)\n                object.value = \"arrayValue\";\n            }\n            if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n              object.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.toObject(message.kvlistValue, options);\n              if (options.oneofs)\n                object.value = \"kvlistValue\";\n            }\n            if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n              object.bytesValue = options.bytes === String ? $util.base64.encode(message.bytesValue, 0, message.bytesValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytesValue) : message.bytesValue;\n              if (options.oneofs)\n                object.value = \"bytesValue\";\n            }\n            return object;\n          };\n          AnyValue.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          AnyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.common.v1.AnyValue\";\n          };\n          return AnyValue;\n        }();\n        v1.ArrayValue = function() {\n          function ArrayValue(properties) {\n            this.values = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          ArrayValue.prototype.values = $util.emptyArray;\n          ArrayValue.create = function create(properties) {\n            return new ArrayValue(properties);\n          };\n          ArrayValue.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.values != null && message.values.length)\n              for (let i = 0; i < message.values.length; ++i)\n                $root.opentelemetry.proto.common.v1.AnyValue.encode(message.values[i], writer.uint32(10).fork()).ldelim();\n            return writer;\n          };\n          ArrayValue.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          ArrayValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  if (!(message.values && message.values.length))\n                    message.values = [];\n                  message.values.push($root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32()));\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          ArrayValue.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          ArrayValue.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n              if (!Array.isArray(message.values))\n                return \"values: array expected\";\n              for (let i = 0; i < message.values.length; ++i) {\n                let error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.values[i]);\n                if (error)\n                  return \"values.\" + error;\n              }\n            }\n            return null;\n          };\n          ArrayValue.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.common.v1.ArrayValue)\n              return object;\n            let message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n            if (object.values) {\n              if (!Array.isArray(object.values))\n                throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: array expected\");\n              message.values = [];\n              for (let i = 0; i < object.values.length; ++i) {\n                if (typeof object.values[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: object expected\");\n                message.values[i] = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.values[i]);\n              }\n            }\n            return message;\n          };\n          ArrayValue.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.values = [];\n            if (message.values && message.values.length) {\n              object.values = [];\n              for (let j = 0; j < message.values.length; ++j)\n                object.values[j] = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.values[j], options);\n            }\n            return object;\n          };\n          ArrayValue.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          ArrayValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.common.v1.ArrayValue\";\n          };\n          return ArrayValue;\n        }();\n        v1.KeyValueList = function() {\n          function KeyValueList(properties) {\n            this.values = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          KeyValueList.prototype.values = $util.emptyArray;\n          KeyValueList.create = function create(properties) {\n            return new KeyValueList(properties);\n          };\n          KeyValueList.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.values != null && message.values.length)\n              for (let i = 0; i < message.values.length; ++i)\n                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.values[i], writer.uint32(10).fork()).ldelim();\n            return writer;\n          };\n          KeyValueList.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          KeyValueList.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  if (!(message.values && message.values.length))\n                    message.values = [];\n                  message.values.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          KeyValueList.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          KeyValueList.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n              if (!Array.isArray(message.values))\n                return \"values: array expected\";\n              for (let i = 0; i < message.values.length; ++i) {\n                let error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.values[i]);\n                if (error)\n                  return \"values.\" + error;\n              }\n            }\n            return null;\n          };\n          KeyValueList.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.common.v1.KeyValueList)\n              return object;\n            let message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n            if (object.values) {\n              if (!Array.isArray(object.values))\n                throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: array expected\");\n              message.values = [];\n              for (let i = 0; i < object.values.length; ++i) {\n                if (typeof object.values[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: object expected\");\n                message.values[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.values[i]);\n              }\n            }\n            return message;\n          };\n          KeyValueList.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.values = [];\n            if (message.values && message.values.length) {\n              object.values = [];\n              for (let j = 0; j < message.values.length; ++j)\n                object.values[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.values[j], options);\n            }\n            return object;\n          };\n          KeyValueList.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          KeyValueList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValueList\";\n          };\n          return KeyValueList;\n        }();\n        v1.KeyValue = function() {\n          function KeyValue(properties) {\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          KeyValue.prototype.key = \"\";\n          KeyValue.prototype.value = null;\n          KeyValue.create = function create(properties) {\n            return new KeyValue(properties);\n          };\n          KeyValue.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n              writer.uint32(10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n              $root.opentelemetry.proto.common.v1.AnyValue.encode(message.value, writer.uint32(18).fork()).ldelim();\n            return writer;\n          };\n          KeyValue.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          KeyValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValue();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  message.key = reader.string();\n                  break;\n                }\n                case 2: {\n                  message.value = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          KeyValue.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          KeyValue.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\")) {\n              if (!$util.isString(message.key))\n                return \"key: string expected\";\n            }\n            if (message.value != null && message.hasOwnProperty(\"value\")) {\n              let error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.value);\n              if (error)\n                return \"value.\" + error;\n            }\n            return null;\n          };\n          KeyValue.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.common.v1.KeyValue)\n              return object;\n            let message = new $root.opentelemetry.proto.common.v1.KeyValue();\n            if (object.key != null)\n              message.key = String(object.key);\n            if (object.value != null) {\n              if (typeof object.value !== \"object\")\n                throw TypeError(\".opentelemetry.proto.common.v1.KeyValue.value: object expected\");\n              message.value = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.value);\n            }\n            return message;\n          };\n          KeyValue.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.defaults) {\n              object.key = \"\";\n              object.value = null;\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n              object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n              object.value = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.value, options);\n            return object;\n          };\n          KeyValue.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          KeyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValue\";\n          };\n          return KeyValue;\n        }();\n        v1.InstrumentationScope = function() {\n          function InstrumentationScope(properties) {\n            this.attributes = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          InstrumentationScope.prototype.name = \"\";\n          InstrumentationScope.prototype.version = \"\";\n          InstrumentationScope.prototype.attributes = $util.emptyArray;\n          InstrumentationScope.prototype.droppedAttributesCount = 0;\n          InstrumentationScope.create = function create(properties) {\n            return new InstrumentationScope(properties);\n          };\n          InstrumentationScope.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n              writer.uint32(10).string(message.name);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n              writer.uint32(18).string(message.version);\n            if (message.attributes != null && message.attributes.length)\n              for (let i = 0; i < message.attributes.length; ++i)\n                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(26).fork()).ldelim();\n            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n              writer.uint32(32).uint32(message.droppedAttributesCount);\n            return writer;\n          };\n          InstrumentationScope.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          InstrumentationScope.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  message.name = reader.string();\n                  break;\n                }\n                case 2: {\n                  message.version = reader.string();\n                  break;\n                }\n                case 3: {\n                  if (!(message.attributes && message.attributes.length))\n                    message.attributes = [];\n                  message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                  break;\n                }\n                case 4: {\n                  message.droppedAttributesCount = reader.uint32();\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          InstrumentationScope.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          InstrumentationScope.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\")) {\n              if (!$util.isString(message.name))\n                return \"name: string expected\";\n            }\n            if (message.version != null && message.hasOwnProperty(\"version\")) {\n              if (!$util.isString(message.version))\n                return \"version: string expected\";\n            }\n            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n              if (!Array.isArray(message.attributes))\n                return \"attributes: array expected\";\n              for (let i = 0; i < message.attributes.length; ++i) {\n                let error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                if (error)\n                  return \"attributes.\" + error;\n              }\n            }\n            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\")) {\n              if (!$util.isInteger(message.droppedAttributesCount))\n                return \"droppedAttributesCount: integer expected\";\n            }\n            return null;\n          };\n          InstrumentationScope.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.common.v1.InstrumentationScope)\n              return object;\n            let message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n            if (object.name != null)\n              message.name = String(object.name);\n            if (object.version != null)\n              message.version = String(object.version);\n            if (object.attributes) {\n              if (!Array.isArray(object.attributes))\n                throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: array expected\");\n              message.attributes = [];\n              for (let i = 0; i < object.attributes.length; ++i) {\n                if (typeof object.attributes[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: object expected\");\n                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n              }\n            }\n            if (object.droppedAttributesCount != null)\n              message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n            return message;\n          };\n          InstrumentationScope.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.attributes = [];\n            if (options.defaults) {\n              object.name = \"\";\n              object.version = \"\";\n              object.droppedAttributesCount = 0;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n              object.name = message.name;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n              object.version = message.version;\n            if (message.attributes && message.attributes.length) {\n              object.attributes = [];\n              for (let j = 0; j < message.attributes.length; ++j)\n                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n            }\n            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n              object.droppedAttributesCount = message.droppedAttributesCount;\n            return object;\n          };\n          InstrumentationScope.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          InstrumentationScope.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.common.v1.InstrumentationScope\";\n          };\n          return InstrumentationScope;\n        }();\n        return v1;\n      }();\n      return common;\n    }();\n    proto.resource = function() {\n      const resource = {};\n      resource.v1 = function() {\n        const v1 = {};\n        v1.Resource = function() {\n          function Resource(properties) {\n            this.attributes = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          Resource.prototype.attributes = $util.emptyArray;\n          Resource.prototype.droppedAttributesCount = 0;\n          Resource.create = function create(properties) {\n            return new Resource(properties);\n          };\n          Resource.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.attributes != null && message.attributes.length)\n              for (let i = 0; i < message.attributes.length; ++i)\n                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(10).fork()).ldelim();\n            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n              writer.uint32(16).uint32(message.droppedAttributesCount);\n            return writer;\n          };\n          Resource.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          Resource.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.resource.v1.Resource();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  if (!(message.attributes && message.attributes.length))\n                    message.attributes = [];\n                  message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                  break;\n                }\n                case 2: {\n                  message.droppedAttributesCount = reader.uint32();\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          Resource.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          Resource.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n              if (!Array.isArray(message.attributes))\n                return \"attributes: array expected\";\n              for (let i = 0; i < message.attributes.length; ++i) {\n                let error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                if (error)\n                  return \"attributes.\" + error;\n              }\n            }\n            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\")) {\n              if (!$util.isInteger(message.droppedAttributesCount))\n                return \"droppedAttributesCount: integer expected\";\n            }\n            return null;\n          };\n          Resource.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.resource.v1.Resource)\n              return object;\n            let message = new $root.opentelemetry.proto.resource.v1.Resource();\n            if (object.attributes) {\n              if (!Array.isArray(object.attributes))\n                throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: array expected\");\n              message.attributes = [];\n              for (let i = 0; i < object.attributes.length; ++i) {\n                if (typeof object.attributes[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: object expected\");\n                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n              }\n            }\n            if (object.droppedAttributesCount != null)\n              message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n            return message;\n          };\n          Resource.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.attributes = [];\n            if (options.defaults)\n              object.droppedAttributesCount = 0;\n            if (message.attributes && message.attributes.length) {\n              object.attributes = [];\n              for (let j = 0; j < message.attributes.length; ++j)\n                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n            }\n            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n              object.droppedAttributesCount = message.droppedAttributesCount;\n            return object;\n          };\n          Resource.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          Resource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.resource.v1.Resource\";\n          };\n          return Resource;\n        }();\n        return v1;\n      }();\n      return resource;\n    }();\n    proto.trace = function() {\n      const trace = {};\n      trace.v1 = function() {\n        const v1 = {};\n        v1.TracesData = function() {\n          function TracesData(properties) {\n            this.resourceSpans = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          TracesData.prototype.resourceSpans = $util.emptyArray;\n          TracesData.create = function create(properties) {\n            return new TracesData(properties);\n          };\n          TracesData.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.resourceSpans != null && message.resourceSpans.length)\n              for (let i = 0; i < message.resourceSpans.length; ++i)\n                $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(10).fork()).ldelim();\n            return writer;\n          };\n          TracesData.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          TracesData.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.TracesData();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  if (!(message.resourceSpans && message.resourceSpans.length))\n                    message.resourceSpans = [];\n                  message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          TracesData.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          TracesData.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n              if (!Array.isArray(message.resourceSpans))\n                return \"resourceSpans: array expected\";\n              for (let i = 0; i < message.resourceSpans.length; ++i) {\n                let error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                if (error)\n                  return \"resourceSpans.\" + error;\n              }\n            }\n            return null;\n          };\n          TracesData.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.trace.v1.TracesData)\n              return object;\n            let message = new $root.opentelemetry.proto.trace.v1.TracesData();\n            if (object.resourceSpans) {\n              if (!Array.isArray(object.resourceSpans))\n                throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: array expected\");\n              message.resourceSpans = [];\n              for (let i = 0; i < object.resourceSpans.length; ++i) {\n                if (typeof object.resourceSpans[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: object expected\");\n                message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n              }\n            }\n            return message;\n          };\n          TracesData.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.resourceSpans = [];\n            if (message.resourceSpans && message.resourceSpans.length) {\n              object.resourceSpans = [];\n              for (let j = 0; j < message.resourceSpans.length; ++j)\n                object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n            }\n            return object;\n          };\n          TracesData.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          TracesData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.TracesData\";\n          };\n          return TracesData;\n        }();\n        v1.ResourceSpans = function() {\n          function ResourceSpans(properties) {\n            this.scopeSpans = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          ResourceSpans.prototype.resource = null;\n          ResourceSpans.prototype.scopeSpans = $util.emptyArray;\n          ResourceSpans.prototype.schemaUrl = \"\";\n          ResourceSpans.create = function create(properties) {\n            return new ResourceSpans(properties);\n          };\n          ResourceSpans.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n              $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(10).fork()).ldelim();\n            if (message.scopeSpans != null && message.scopeSpans.length)\n              for (let i = 0; i < message.scopeSpans.length; ++i)\n                $root.opentelemetry.proto.trace.v1.ScopeSpans.encode(message.scopeSpans[i], writer.uint32(18).fork()).ldelim();\n            if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n              writer.uint32(26).string(message.schemaUrl);\n            return writer;\n          };\n          ResourceSpans.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          ResourceSpans.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                  break;\n                }\n                case 2: {\n                  if (!(message.scopeSpans && message.scopeSpans.length))\n                    message.scopeSpans = [];\n                  message.scopeSpans.push($root.opentelemetry.proto.trace.v1.ScopeSpans.decode(reader, reader.uint32()));\n                  break;\n                }\n                case 3: {\n                  message.schemaUrl = reader.string();\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          ResourceSpans.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          ResourceSpans.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n              let error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n              if (error)\n                return \"resource.\" + error;\n            }\n            if (message.scopeSpans != null && message.hasOwnProperty(\"scopeSpans\")) {\n              if (!Array.isArray(message.scopeSpans))\n                return \"scopeSpans: array expected\";\n              for (let i = 0; i < message.scopeSpans.length; ++i) {\n                let error = $root.opentelemetry.proto.trace.v1.ScopeSpans.verify(message.scopeSpans[i]);\n                if (error)\n                  return \"scopeSpans.\" + error;\n              }\n            }\n            if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\")) {\n              if (!$util.isString(message.schemaUrl))\n                return \"schemaUrl: string expected\";\n            }\n            return null;\n          };\n          ResourceSpans.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.trace.v1.ResourceSpans)\n              return object;\n            let message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n            if (object.resource != null) {\n              if (typeof object.resource !== \"object\")\n                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.resource: object expected\");\n              message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n            }\n            if (object.scopeSpans) {\n              if (!Array.isArray(object.scopeSpans))\n                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: array expected\");\n              message.scopeSpans = [];\n              for (let i = 0; i < object.scopeSpans.length; ++i) {\n                if (typeof object.scopeSpans[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: object expected\");\n                message.scopeSpans[i] = $root.opentelemetry.proto.trace.v1.ScopeSpans.fromObject(object.scopeSpans[i]);\n              }\n            }\n            if (object.schemaUrl != null)\n              message.schemaUrl = String(object.schemaUrl);\n            return message;\n          };\n          ResourceSpans.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.scopeSpans = [];\n            if (options.defaults) {\n              object.resource = null;\n              object.schemaUrl = \"\";\n            }\n            if (message.resource != null && message.hasOwnProperty(\"resource\"))\n              object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n            if (message.scopeSpans && message.scopeSpans.length) {\n              object.scopeSpans = [];\n              for (let j = 0; j < message.scopeSpans.length; ++j)\n                object.scopeSpans[j] = $root.opentelemetry.proto.trace.v1.ScopeSpans.toObject(message.scopeSpans[j], options);\n            }\n            if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n              object.schemaUrl = message.schemaUrl;\n            return object;\n          };\n          ResourceSpans.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          ResourceSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ResourceSpans\";\n          };\n          return ResourceSpans;\n        }();\n        v1.ScopeSpans = function() {\n          function ScopeSpans(properties) {\n            this.spans = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          ScopeSpans.prototype.scope = null;\n          ScopeSpans.prototype.spans = $util.emptyArray;\n          ScopeSpans.prototype.schemaUrl = \"\";\n          ScopeSpans.create = function create(properties) {\n            return new ScopeSpans(properties);\n          };\n          ScopeSpans.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n              $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(10).fork()).ldelim();\n            if (message.spans != null && message.spans.length)\n              for (let i = 0; i < message.spans.length; ++i)\n                $root.opentelemetry.proto.trace.v1.Span.encode(message.spans[i], writer.uint32(18).fork()).ldelim();\n            if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n              writer.uint32(26).string(message.schemaUrl);\n            return writer;\n          };\n          ScopeSpans.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          ScopeSpans.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                  break;\n                }\n                case 2: {\n                  if (!(message.spans && message.spans.length))\n                    message.spans = [];\n                  message.spans.push($root.opentelemetry.proto.trace.v1.Span.decode(reader, reader.uint32()));\n                  break;\n                }\n                case 3: {\n                  message.schemaUrl = reader.string();\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          ScopeSpans.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          ScopeSpans.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n              let error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n              if (error)\n                return \"scope.\" + error;\n            }\n            if (message.spans != null && message.hasOwnProperty(\"spans\")) {\n              if (!Array.isArray(message.spans))\n                return \"spans: array expected\";\n              for (let i = 0; i < message.spans.length; ++i) {\n                let error = $root.opentelemetry.proto.trace.v1.Span.verify(message.spans[i]);\n                if (error)\n                  return \"spans.\" + error;\n              }\n            }\n            if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\")) {\n              if (!$util.isString(message.schemaUrl))\n                return \"schemaUrl: string expected\";\n            }\n            return null;\n          };\n          ScopeSpans.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.trace.v1.ScopeSpans)\n              return object;\n            let message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n            if (object.scope != null) {\n              if (typeof object.scope !== \"object\")\n                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.scope: object expected\");\n              message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n            }\n            if (object.spans) {\n              if (!Array.isArray(object.spans))\n                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: array expected\");\n              message.spans = [];\n              for (let i = 0; i < object.spans.length; ++i) {\n                if (typeof object.spans[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: object expected\");\n                message.spans[i] = $root.opentelemetry.proto.trace.v1.Span.fromObject(object.spans[i]);\n              }\n            }\n            if (object.schemaUrl != null)\n              message.schemaUrl = String(object.schemaUrl);\n            return message;\n          };\n          ScopeSpans.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.spans = [];\n            if (options.defaults) {\n              object.scope = null;\n              object.schemaUrl = \"\";\n            }\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n              object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n            if (message.spans && message.spans.length) {\n              object.spans = [];\n              for (let j = 0; j < message.spans.length; ++j)\n                object.spans[j] = $root.opentelemetry.proto.trace.v1.Span.toObject(message.spans[j], options);\n            }\n            if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n              object.schemaUrl = message.schemaUrl;\n            return object;\n          };\n          ScopeSpans.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          ScopeSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ScopeSpans\";\n          };\n          return ScopeSpans;\n        }();\n        v1.Span = function() {\n          function Span(properties) {\n            this.attributes = [];\n            this.events = [];\n            this.links = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          Span.prototype.traceId = $util.newBuffer([]);\n          Span.prototype.spanId = $util.newBuffer([]);\n          Span.prototype.traceState = \"\";\n          Span.prototype.parentSpanId = $util.newBuffer([]);\n          Span.prototype.name = \"\";\n          Span.prototype.kind = 0;\n          Span.prototype.startTimeUnixNano = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n          Span.prototype.endTimeUnixNano = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n          Span.prototype.attributes = $util.emptyArray;\n          Span.prototype.droppedAttributesCount = 0;\n          Span.prototype.events = $util.emptyArray;\n          Span.prototype.droppedEventsCount = 0;\n          Span.prototype.links = $util.emptyArray;\n          Span.prototype.droppedLinksCount = 0;\n          Span.prototype.status = null;\n          Span.create = function create(properties) {\n            return new Span(properties);\n          };\n          Span.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n              writer.uint32(10).bytes(message.traceId);\n            if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n              writer.uint32(18).bytes(message.spanId);\n            if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n              writer.uint32(26).string(message.traceState);\n            if (message.parentSpanId != null && Object.hasOwnProperty.call(message, \"parentSpanId\"))\n              writer.uint32(34).bytes(message.parentSpanId);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n              writer.uint32(42).string(message.name);\n            if (message.kind != null && Object.hasOwnProperty.call(message, \"kind\"))\n              writer.uint32(48).int32(message.kind);\n            if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n              writer.uint32(57).fixed64(message.startTimeUnixNano);\n            if (message.endTimeUnixNano != null && Object.hasOwnProperty.call(message, \"endTimeUnixNano\"))\n              writer.uint32(65).fixed64(message.endTimeUnixNano);\n            if (message.attributes != null && message.attributes.length)\n              for (let i = 0; i < message.attributes.length; ++i)\n                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(74).fork()).ldelim();\n            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n              writer.uint32(80).uint32(message.droppedAttributesCount);\n            if (message.events != null && message.events.length)\n              for (let i = 0; i < message.events.length; ++i)\n                $root.opentelemetry.proto.trace.v1.Span.Event.encode(message.events[i], writer.uint32(90).fork()).ldelim();\n            if (message.droppedEventsCount != null && Object.hasOwnProperty.call(message, \"droppedEventsCount\"))\n              writer.uint32(96).uint32(message.droppedEventsCount);\n            if (message.links != null && message.links.length)\n              for (let i = 0; i < message.links.length; ++i)\n                $root.opentelemetry.proto.trace.v1.Span.Link.encode(message.links[i], writer.uint32(106).fork()).ldelim();\n            if (message.droppedLinksCount != null && Object.hasOwnProperty.call(message, \"droppedLinksCount\"))\n              writer.uint32(112).uint32(message.droppedLinksCount);\n            if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n              $root.opentelemetry.proto.trace.v1.Status.encode(message.status, writer.uint32(122).fork()).ldelim();\n            return writer;\n          };\n          Span.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          Span.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  message.traceId = reader.bytes();\n                  break;\n                }\n                case 2: {\n                  message.spanId = reader.bytes();\n                  break;\n                }\n                case 3: {\n                  message.traceState = reader.string();\n                  break;\n                }\n                case 4: {\n                  message.parentSpanId = reader.bytes();\n                  break;\n                }\n                case 5: {\n                  message.name = reader.string();\n                  break;\n                }\n                case 6: {\n                  message.kind = reader.int32();\n                  break;\n                }\n                case 7: {\n                  message.startTimeUnixNano = reader.fixed64();\n                  break;\n                }\n                case 8: {\n                  message.endTimeUnixNano = reader.fixed64();\n                  break;\n                }\n                case 9: {\n                  if (!(message.attributes && message.attributes.length))\n                    message.attributes = [];\n                  message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                  break;\n                }\n                case 10: {\n                  message.droppedAttributesCount = reader.uint32();\n                  break;\n                }\n                case 11: {\n                  if (!(message.events && message.events.length))\n                    message.events = [];\n                  message.events.push($root.opentelemetry.proto.trace.v1.Span.Event.decode(reader, reader.uint32()));\n                  break;\n                }\n                case 12: {\n                  message.droppedEventsCount = reader.uint32();\n                  break;\n                }\n                case 13: {\n                  if (!(message.links && message.links.length))\n                    message.links = [];\n                  message.links.push($root.opentelemetry.proto.trace.v1.Span.Link.decode(reader, reader.uint32()));\n                  break;\n                }\n                case 14: {\n                  message.droppedLinksCount = reader.uint32();\n                  break;\n                }\n                case 15: {\n                  message.status = $root.opentelemetry.proto.trace.v1.Status.decode(reader, reader.uint32());\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          Span.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          Span.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.traceId != null && message.hasOwnProperty(\"traceId\")) {\n              if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                return \"traceId: buffer expected\";\n            }\n            if (message.spanId != null && message.hasOwnProperty(\"spanId\")) {\n              if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                return \"spanId: buffer expected\";\n            }\n            if (message.traceState != null && message.hasOwnProperty(\"traceState\")) {\n              if (!$util.isString(message.traceState))\n                return \"traceState: string expected\";\n            }\n            if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\")) {\n              if (!(message.parentSpanId && typeof message.parentSpanId.length === \"number\" || $util.isString(message.parentSpanId)))\n                return \"parentSpanId: buffer expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\")) {\n              if (!$util.isString(message.name))\n                return \"name: string expected\";\n            }\n            if (message.kind != null && message.hasOwnProperty(\"kind\"))\n              switch (message.kind) {\n                default:\n                  return \"kind: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                  break;\n              }\n            if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\")) {\n              if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                return \"startTimeUnixNano: integer|Long expected\";\n            }\n            if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\")) {\n              if (!$util.isInteger(message.endTimeUnixNano) && !(message.endTimeUnixNano && $util.isInteger(message.endTimeUnixNano.low) && $util.isInteger(message.endTimeUnixNano.high)))\n                return \"endTimeUnixNano: integer|Long expected\";\n            }\n            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n              if (!Array.isArray(message.attributes))\n                return \"attributes: array expected\";\n              for (let i = 0; i < message.attributes.length; ++i) {\n                let error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                if (error)\n                  return \"attributes.\" + error;\n              }\n            }\n            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\")) {\n              if (!$util.isInteger(message.droppedAttributesCount))\n                return \"droppedAttributesCount: integer expected\";\n            }\n            if (message.events != null && message.hasOwnProperty(\"events\")) {\n              if (!Array.isArray(message.events))\n                return \"events: array expected\";\n              for (let i = 0; i < message.events.length; ++i) {\n                let error = $root.opentelemetry.proto.trace.v1.Span.Event.verify(message.events[i]);\n                if (error)\n                  return \"events.\" + error;\n              }\n            }\n            if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\")) {\n              if (!$util.isInteger(message.droppedEventsCount))\n                return \"droppedEventsCount: integer expected\";\n            }\n            if (message.links != null && message.hasOwnProperty(\"links\")) {\n              if (!Array.isArray(message.links))\n                return \"links: array expected\";\n              for (let i = 0; i < message.links.length; ++i) {\n                let error = $root.opentelemetry.proto.trace.v1.Span.Link.verify(message.links[i]);\n                if (error)\n                  return \"links.\" + error;\n              }\n            }\n            if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\")) {\n              if (!$util.isInteger(message.droppedLinksCount))\n                return \"droppedLinksCount: integer expected\";\n            }\n            if (message.status != null && message.hasOwnProperty(\"status\")) {\n              let error = $root.opentelemetry.proto.trace.v1.Status.verify(message.status);\n              if (error)\n                return \"status.\" + error;\n            }\n            return null;\n          };\n          Span.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.trace.v1.Span)\n              return object;\n            let message = new $root.opentelemetry.proto.trace.v1.Span();\n            if (object.traceId != null) {\n              if (typeof object.traceId === \"string\")\n                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n              else if (object.traceId.length >= 0)\n                message.traceId = object.traceId;\n            }\n            if (object.spanId != null) {\n              if (typeof object.spanId === \"string\")\n                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n              else if (object.spanId.length >= 0)\n                message.spanId = object.spanId;\n            }\n            if (object.traceState != null)\n              message.traceState = String(object.traceState);\n            if (object.parentSpanId != null) {\n              if (typeof object.parentSpanId === \"string\")\n                $util.base64.decode(object.parentSpanId, message.parentSpanId = $util.newBuffer($util.base64.length(object.parentSpanId)), 0);\n              else if (object.parentSpanId.length >= 0)\n                message.parentSpanId = object.parentSpanId;\n            }\n            if (object.name != null)\n              message.name = String(object.name);\n            switch (object.kind) {\n              default:\n                if (typeof object.kind === \"number\") {\n                  message.kind = object.kind;\n                  break;\n                }\n                break;\n              case \"SPAN_KIND_UNSPECIFIED\":\n              case 0:\n                message.kind = 0;\n                break;\n              case \"SPAN_KIND_INTERNAL\":\n              case 1:\n                message.kind = 1;\n                break;\n              case \"SPAN_KIND_SERVER\":\n              case 2:\n                message.kind = 2;\n                break;\n              case \"SPAN_KIND_CLIENT\":\n              case 3:\n                message.kind = 3;\n                break;\n              case \"SPAN_KIND_PRODUCER\":\n              case 4:\n                message.kind = 4;\n                break;\n              case \"SPAN_KIND_CONSUMER\":\n              case 5:\n                message.kind = 5;\n                break;\n            }\n            if (object.startTimeUnixNano != null) {\n              if ($util.Long)\n                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n              else if (typeof object.startTimeUnixNano === \"string\")\n                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n              else if (typeof object.startTimeUnixNano === \"number\")\n                message.startTimeUnixNano = object.startTimeUnixNano;\n              else if (typeof object.startTimeUnixNano === \"object\")\n                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n            }\n            if (object.endTimeUnixNano != null) {\n              if ($util.Long)\n                (message.endTimeUnixNano = $util.Long.fromValue(object.endTimeUnixNano)).unsigned = false;\n              else if (typeof object.endTimeUnixNano === \"string\")\n                message.endTimeUnixNano = parseInt(object.endTimeUnixNano, 10);\n              else if (typeof object.endTimeUnixNano === \"number\")\n                message.endTimeUnixNano = object.endTimeUnixNano;\n              else if (typeof object.endTimeUnixNano === \"object\")\n                message.endTimeUnixNano = new $util.LongBits(object.endTimeUnixNano.low >>> 0, object.endTimeUnixNano.high >>> 0).toNumber();\n            }\n            if (object.attributes) {\n              if (!Array.isArray(object.attributes))\n                throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: array expected\");\n              message.attributes = [];\n              for (let i = 0; i < object.attributes.length; ++i) {\n                if (typeof object.attributes[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: object expected\");\n                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n              }\n            }\n            if (object.droppedAttributesCount != null)\n              message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n            if (object.events) {\n              if (!Array.isArray(object.events))\n                throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: array expected\");\n              message.events = [];\n              for (let i = 0; i < object.events.length; ++i) {\n                if (typeof object.events[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: object expected\");\n                message.events[i] = $root.opentelemetry.proto.trace.v1.Span.Event.fromObject(object.events[i]);\n              }\n            }\n            if (object.droppedEventsCount != null)\n              message.droppedEventsCount = object.droppedEventsCount >>> 0;\n            if (object.links) {\n              if (!Array.isArray(object.links))\n                throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: array expected\");\n              message.links = [];\n              for (let i = 0; i < object.links.length; ++i) {\n                if (typeof object.links[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: object expected\");\n                message.links[i] = $root.opentelemetry.proto.trace.v1.Span.Link.fromObject(object.links[i]);\n              }\n            }\n            if (object.droppedLinksCount != null)\n              message.droppedLinksCount = object.droppedLinksCount >>> 0;\n            if (object.status != null) {\n              if (typeof object.status !== \"object\")\n                throw TypeError(\".opentelemetry.proto.trace.v1.Span.status: object expected\");\n              message.status = $root.opentelemetry.proto.trace.v1.Status.fromObject(object.status);\n            }\n            return message;\n          };\n          Span.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n              object.attributes = [];\n              object.events = [];\n              object.links = [];\n            }\n            if (options.defaults) {\n              if (options.bytes === String)\n                object.traceId = \"\";\n              else {\n                object.traceId = [];\n                if (options.bytes !== Array)\n                  object.traceId = $util.newBuffer(object.traceId);\n              }\n              if (options.bytes === String)\n                object.spanId = \"\";\n              else {\n                object.spanId = [];\n                if (options.bytes !== Array)\n                  object.spanId = $util.newBuffer(object.spanId);\n              }\n              object.traceState = \"\";\n              if (options.bytes === String)\n                object.parentSpanId = \"\";\n              else {\n                object.parentSpanId = [];\n                if (options.bytes !== Array)\n                  object.parentSpanId = $util.newBuffer(object.parentSpanId);\n              }\n              object.name = \"\";\n              object.kind = options.enums === String ? \"SPAN_KIND_UNSPECIFIED\" : 0;\n              if ($util.Long) {\n                let long = new $util.Long(0, 0, false);\n                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n              } else\n                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n              if ($util.Long) {\n                let long = new $util.Long(0, 0, false);\n                object.endTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n              } else\n                object.endTimeUnixNano = options.longs === String ? \"0\" : 0;\n              object.droppedAttributesCount = 0;\n              object.droppedEventsCount = 0;\n              object.droppedLinksCount = 0;\n              object.status = null;\n            }\n            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n              object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n              object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n              object.traceState = message.traceState;\n            if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n              object.parentSpanId = options.bytes === String ? $util.base64.encode(message.parentSpanId, 0, message.parentSpanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.parentSpanId) : message.parentSpanId;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n              object.name = message.name;\n            if (message.kind != null && message.hasOwnProperty(\"kind\"))\n              object.kind = options.enums === String ? $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] === void 0 ? message.kind : $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] : message.kind;\n            if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n              if (typeof message.startTimeUnixNano === \"number\")\n                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n              else\n                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n            if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n              if (typeof message.endTimeUnixNano === \"number\")\n                object.endTimeUnixNano = options.longs === String ? String(message.endTimeUnixNano) : message.endTimeUnixNano;\n              else\n                object.endTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.endTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.endTimeUnixNano.low >>> 0, message.endTimeUnixNano.high >>> 0).toNumber() : message.endTimeUnixNano;\n            if (message.attributes && message.attributes.length) {\n              object.attributes = [];\n              for (let j = 0; j < message.attributes.length; ++j)\n                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n            }\n            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n              object.droppedAttributesCount = message.droppedAttributesCount;\n            if (message.events && message.events.length) {\n              object.events = [];\n              for (let j = 0; j < message.events.length; ++j)\n                object.events[j] = $root.opentelemetry.proto.trace.v1.Span.Event.toObject(message.events[j], options);\n            }\n            if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n              object.droppedEventsCount = message.droppedEventsCount;\n            if (message.links && message.links.length) {\n              object.links = [];\n              for (let j = 0; j < message.links.length; ++j)\n                object.links[j] = $root.opentelemetry.proto.trace.v1.Span.Link.toObject(message.links[j], options);\n            }\n            if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n              object.droppedLinksCount = message.droppedLinksCount;\n            if (message.status != null && message.hasOwnProperty(\"status\"))\n              object.status = $root.opentelemetry.proto.trace.v1.Status.toObject(message.status, options);\n            return object;\n          };\n          Span.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          Span.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span\";\n          };\n          Span.SpanKind = function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"SPAN_KIND_UNSPECIFIED\"] = 0;\n            values[valuesById[1] = \"SPAN_KIND_INTERNAL\"] = 1;\n            values[valuesById[2] = \"SPAN_KIND_SERVER\"] = 2;\n            values[valuesById[3] = \"SPAN_KIND_CLIENT\"] = 3;\n            values[valuesById[4] = \"SPAN_KIND_PRODUCER\"] = 4;\n            values[valuesById[5] = \"SPAN_KIND_CONSUMER\"] = 5;\n            return values;\n          }();\n          Span.Event = function() {\n            function Event(properties) {\n              this.attributes = [];\n              if (properties) {\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                  if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n              }\n            }\n            Event.prototype.timeUnixNano = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n            Event.prototype.name = \"\";\n            Event.prototype.attributes = $util.emptyArray;\n            Event.prototype.droppedAttributesCount = 0;\n            Event.create = function create(properties) {\n              return new Event(properties);\n            };\n            Event.encode = function encode(message, writer) {\n              if (!writer)\n                writer = $Writer.create();\n              if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                writer.uint32(9).fixed64(message.timeUnixNano);\n              if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(18).string(message.name);\n              if (message.attributes != null && message.attributes.length)\n                for (let i = 0; i < message.attributes.length; ++i)\n                  $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(26).fork()).ldelim();\n              if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                writer.uint32(32).uint32(message.droppedAttributesCount);\n              return writer;\n            };\n            Event.encodeDelimited = function encodeDelimited(message, writer) {\n              return this.encode(message, writer).ldelim();\n            };\n            Event.decode = function decode(reader, length) {\n              if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n              let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n              while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                  case 1: {\n                    message.timeUnixNano = reader.fixed64();\n                    break;\n                  }\n                  case 2: {\n                    message.name = reader.string();\n                    break;\n                  }\n                  case 3: {\n                    if (!(message.attributes && message.attributes.length))\n                      message.attributes = [];\n                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                    break;\n                  }\n                  case 4: {\n                    message.droppedAttributesCount = reader.uint32();\n                    break;\n                  }\n                  default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n              }\n              return message;\n            };\n            Event.decodeDelimited = function decodeDelimited(reader) {\n              if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n              return this.decode(reader, reader.uint32());\n            };\n            Event.verify = function verify(message) {\n              if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n              if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\")) {\n                if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                  return \"timeUnixNano: integer|Long expected\";\n              }\n              if (message.name != null && message.hasOwnProperty(\"name\")) {\n                if (!$util.isString(message.name))\n                  return \"name: string expected\";\n              }\n              if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                if (!Array.isArray(message.attributes))\n                  return \"attributes: array expected\";\n                for (let i = 0; i < message.attributes.length; ++i) {\n                  let error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                  if (error)\n                    return \"attributes.\" + error;\n                }\n              }\n              if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\")) {\n                if (!$util.isInteger(message.droppedAttributesCount))\n                  return \"droppedAttributesCount: integer expected\";\n              }\n              return null;\n            };\n            Event.fromObject = function fromObject(object) {\n              if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Event)\n                return object;\n              let message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n              if (object.timeUnixNano != null) {\n                if ($util.Long)\n                  (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                else if (typeof object.timeUnixNano === \"string\")\n                  message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                else if (typeof object.timeUnixNano === \"number\")\n                  message.timeUnixNano = object.timeUnixNano;\n                else if (typeof object.timeUnixNano === \"object\")\n                  message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n              }\n              if (object.name != null)\n                message.name = String(object.name);\n              if (object.attributes) {\n                if (!Array.isArray(object.attributes))\n                  throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: array expected\");\n                message.attributes = [];\n                for (let i = 0; i < object.attributes.length; ++i) {\n                  if (typeof object.attributes[i] !== \"object\")\n                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: object expected\");\n                  message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                }\n              }\n              if (object.droppedAttributesCount != null)\n                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n              return message;\n            };\n            Event.toObject = function toObject(message, options) {\n              if (!options)\n                options = {};\n              let object = {};\n              if (options.arrays || options.defaults)\n                object.attributes = [];\n              if (options.defaults) {\n                if ($util.Long) {\n                  let long = new $util.Long(0, 0, false);\n                  object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                  object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                object.name = \"\";\n                object.droppedAttributesCount = 0;\n              }\n              if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                if (typeof message.timeUnixNano === \"number\")\n                  object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                else\n                  object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n              if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n              if (message.attributes && message.attributes.length) {\n                object.attributes = [];\n                for (let j = 0; j < message.attributes.length; ++j)\n                  object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n              }\n              if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                object.droppedAttributesCount = message.droppedAttributesCount;\n              return object;\n            };\n            Event.prototype.toJSON = function toJSON() {\n              return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n            Event.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n              if (typeUrlPrefix === void 0) {\n                typeUrlPrefix = \"type.googleapis.com\";\n              }\n              return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Event\";\n            };\n            return Event;\n          }();\n          Span.Link = function() {\n            function Link(properties) {\n              this.attributes = [];\n              if (properties) {\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                  if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n              }\n            }\n            Link.prototype.traceId = $util.newBuffer([]);\n            Link.prototype.spanId = $util.newBuffer([]);\n            Link.prototype.traceState = \"\";\n            Link.prototype.attributes = $util.emptyArray;\n            Link.prototype.droppedAttributesCount = 0;\n            Link.create = function create(properties) {\n              return new Link(properties);\n            };\n            Link.encode = function encode(message, writer) {\n              if (!writer)\n                writer = $Writer.create();\n              if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                writer.uint32(10).bytes(message.traceId);\n              if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                writer.uint32(18).bytes(message.spanId);\n              if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                writer.uint32(26).string(message.traceState);\n              if (message.attributes != null && message.attributes.length)\n                for (let i = 0; i < message.attributes.length; ++i)\n                  $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(34).fork()).ldelim();\n              if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                writer.uint32(40).uint32(message.droppedAttributesCount);\n              return writer;\n            };\n            Link.encodeDelimited = function encodeDelimited(message, writer) {\n              return this.encode(message, writer).ldelim();\n            };\n            Link.decode = function decode(reader, length) {\n              if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n              let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n              while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                  case 1: {\n                    message.traceId = reader.bytes();\n                    break;\n                  }\n                  case 2: {\n                    message.spanId = reader.bytes();\n                    break;\n                  }\n                  case 3: {\n                    message.traceState = reader.string();\n                    break;\n                  }\n                  case 4: {\n                    if (!(message.attributes && message.attributes.length))\n                      message.attributes = [];\n                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                    break;\n                  }\n                  case 5: {\n                    message.droppedAttributesCount = reader.uint32();\n                    break;\n                  }\n                  default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n              }\n              return message;\n            };\n            Link.decodeDelimited = function decodeDelimited(reader) {\n              if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n              return this.decode(reader, reader.uint32());\n            };\n            Link.verify = function verify(message) {\n              if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n              if (message.traceId != null && message.hasOwnProperty(\"traceId\")) {\n                if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                  return \"traceId: buffer expected\";\n              }\n              if (message.spanId != null && message.hasOwnProperty(\"spanId\")) {\n                if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                  return \"spanId: buffer expected\";\n              }\n              if (message.traceState != null && message.hasOwnProperty(\"traceState\")) {\n                if (!$util.isString(message.traceState))\n                  return \"traceState: string expected\";\n              }\n              if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                if (!Array.isArray(message.attributes))\n                  return \"attributes: array expected\";\n                for (let i = 0; i < message.attributes.length; ++i) {\n                  let error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                  if (error)\n                    return \"attributes.\" + error;\n                }\n              }\n              if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\")) {\n                if (!$util.isInteger(message.droppedAttributesCount))\n                  return \"droppedAttributesCount: integer expected\";\n              }\n              return null;\n            };\n            Link.fromObject = function fromObject(object) {\n              if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Link)\n                return object;\n              let message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n              if (object.traceId != null) {\n                if (typeof object.traceId === \"string\")\n                  $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                else if (object.traceId.length >= 0)\n                  message.traceId = object.traceId;\n              }\n              if (object.spanId != null) {\n                if (typeof object.spanId === \"string\")\n                  $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                else if (object.spanId.length >= 0)\n                  message.spanId = object.spanId;\n              }\n              if (object.traceState != null)\n                message.traceState = String(object.traceState);\n              if (object.attributes) {\n                if (!Array.isArray(object.attributes))\n                  throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: array expected\");\n                message.attributes = [];\n                for (let i = 0; i < object.attributes.length; ++i) {\n                  if (typeof object.attributes[i] !== \"object\")\n                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: object expected\");\n                  message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                }\n              }\n              if (object.droppedAttributesCount != null)\n                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n              return message;\n            };\n            Link.toObject = function toObject(message, options) {\n              if (!options)\n                options = {};\n              let object = {};\n              if (options.arrays || options.defaults)\n                object.attributes = [];\n              if (options.defaults) {\n                if (options.bytes === String)\n                  object.traceId = \"\";\n                else {\n                  object.traceId = [];\n                  if (options.bytes !== Array)\n                    object.traceId = $util.newBuffer(object.traceId);\n                }\n                if (options.bytes === String)\n                  object.spanId = \"\";\n                else {\n                  object.spanId = [];\n                  if (options.bytes !== Array)\n                    object.spanId = $util.newBuffer(object.spanId);\n                }\n                object.traceState = \"\";\n                object.droppedAttributesCount = 0;\n              }\n              if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n              if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n              if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                object.traceState = message.traceState;\n              if (message.attributes && message.attributes.length) {\n                object.attributes = [];\n                for (let j = 0; j < message.attributes.length; ++j)\n                  object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n              }\n              if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                object.droppedAttributesCount = message.droppedAttributesCount;\n              return object;\n            };\n            Link.prototype.toJSON = function toJSON() {\n              return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n            Link.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n              if (typeUrlPrefix === void 0) {\n                typeUrlPrefix = \"type.googleapis.com\";\n              }\n              return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Link\";\n            };\n            return Link;\n          }();\n          return Span;\n        }();\n        v1.Status = function() {\n          function Status(properties) {\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          Status.prototype.message = \"\";\n          Status.prototype.code = 0;\n          Status.create = function create(properties) {\n            return new Status(properties);\n          };\n          Status.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n              writer.uint32(18).string(message.message);\n            if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n              writer.uint32(24).int32(message.code);\n            return writer;\n          };\n          Status.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          Status.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Status();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 2: {\n                  message.message = reader.string();\n                  break;\n                }\n                case 3: {\n                  message.code = reader.int32();\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          Status.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          Status.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\")) {\n              if (!$util.isString(message.message))\n                return \"message: string expected\";\n            }\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n              switch (message.code) {\n                default:\n                  return \"code: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                  break;\n              }\n            return null;\n          };\n          Status.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.trace.v1.Status)\n              return object;\n            let message = new $root.opentelemetry.proto.trace.v1.Status();\n            if (object.message != null)\n              message.message = String(object.message);\n            switch (object.code) {\n              default:\n                if (typeof object.code === \"number\") {\n                  message.code = object.code;\n                  break;\n                }\n                break;\n              case \"STATUS_CODE_UNSET\":\n              case 0:\n                message.code = 0;\n                break;\n              case \"STATUS_CODE_OK\":\n              case 1:\n                message.code = 1;\n                break;\n              case \"STATUS_CODE_ERROR\":\n              case 2:\n                message.code = 2;\n                break;\n            }\n            return message;\n          };\n          Status.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.defaults) {\n              object.message = \"\";\n              object.code = options.enums === String ? \"STATUS_CODE_UNSET\" : 0;\n            }\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n              object.message = message.message;\n            if (message.code != null && message.hasOwnProperty(\"code\"))\n              object.code = options.enums === String ? $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] === void 0 ? message.code : $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] : message.code;\n            return object;\n          };\n          Status.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Status\";\n          };\n          Status.StatusCode = function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"STATUS_CODE_UNSET\"] = 0;\n            values[valuesById[1] = \"STATUS_CODE_OK\"] = 1;\n            values[valuesById[2] = \"STATUS_CODE_ERROR\"] = 2;\n            return values;\n          }();\n          return Status;\n        }();\n        return v1;\n      }();\n      return trace;\n    }();\n    proto.logs = function() {\n      const logs = {};\n      logs.v1 = function() {\n        const v1 = {};\n        v1.LogsData = function() {\n          function LogsData(properties) {\n            this.resourceLogs = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          LogsData.prototype.resourceLogs = $util.emptyArray;\n          LogsData.create = function create(properties) {\n            return new LogsData(properties);\n          };\n          LogsData.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.resourceLogs != null && message.resourceLogs.length)\n              for (let i = 0; i < message.resourceLogs.length; ++i)\n                $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(10).fork()).ldelim();\n            return writer;\n          };\n          LogsData.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          LogsData.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogsData();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  if (!(message.resourceLogs && message.resourceLogs.length))\n                    message.resourceLogs = [];\n                  message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          LogsData.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          LogsData.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n              if (!Array.isArray(message.resourceLogs))\n                return \"resourceLogs: array expected\";\n              for (let i = 0; i < message.resourceLogs.length; ++i) {\n                let error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                if (error)\n                  return \"resourceLogs.\" + error;\n              }\n            }\n            return null;\n          };\n          LogsData.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.logs.v1.LogsData)\n              return object;\n            let message = new $root.opentelemetry.proto.logs.v1.LogsData();\n            if (object.resourceLogs) {\n              if (!Array.isArray(object.resourceLogs))\n                throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: array expected\");\n              message.resourceLogs = [];\n              for (let i = 0; i < object.resourceLogs.length; ++i) {\n                if (typeof object.resourceLogs[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: object expected\");\n                message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n              }\n            }\n            return message;\n          };\n          LogsData.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.resourceLogs = [];\n            if (message.resourceLogs && message.resourceLogs.length) {\n              object.resourceLogs = [];\n              for (let j = 0; j < message.resourceLogs.length; ++j)\n                object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n            }\n            return object;\n          };\n          LogsData.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          LogsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogsData\";\n          };\n          return LogsData;\n        }();\n        v1.ResourceLogs = function() {\n          function ResourceLogs(properties) {\n            this.scopeLogs = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          ResourceLogs.prototype.resource = null;\n          ResourceLogs.prototype.scopeLogs = $util.emptyArray;\n          ResourceLogs.prototype.schemaUrl = \"\";\n          ResourceLogs.create = function create(properties) {\n            return new ResourceLogs(properties);\n          };\n          ResourceLogs.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n              $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(10).fork()).ldelim();\n            if (message.scopeLogs != null && message.scopeLogs.length)\n              for (let i = 0; i < message.scopeLogs.length; ++i)\n                $root.opentelemetry.proto.logs.v1.ScopeLogs.encode(message.scopeLogs[i], writer.uint32(18).fork()).ldelim();\n            if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n              writer.uint32(26).string(message.schemaUrl);\n            return writer;\n          };\n          ResourceLogs.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          ResourceLogs.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                  break;\n                }\n                case 2: {\n                  if (!(message.scopeLogs && message.scopeLogs.length))\n                    message.scopeLogs = [];\n                  message.scopeLogs.push($root.opentelemetry.proto.logs.v1.ScopeLogs.decode(reader, reader.uint32()));\n                  break;\n                }\n                case 3: {\n                  message.schemaUrl = reader.string();\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          ResourceLogs.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          ResourceLogs.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n              let error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n              if (error)\n                return \"resource.\" + error;\n            }\n            if (message.scopeLogs != null && message.hasOwnProperty(\"scopeLogs\")) {\n              if (!Array.isArray(message.scopeLogs))\n                return \"scopeLogs: array expected\";\n              for (let i = 0; i < message.scopeLogs.length; ++i) {\n                let error = $root.opentelemetry.proto.logs.v1.ScopeLogs.verify(message.scopeLogs[i]);\n                if (error)\n                  return \"scopeLogs.\" + error;\n              }\n            }\n            if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\")) {\n              if (!$util.isString(message.schemaUrl))\n                return \"schemaUrl: string expected\";\n            }\n            return null;\n          };\n          ResourceLogs.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.logs.v1.ResourceLogs)\n              return object;\n            let message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n            if (object.resource != null) {\n              if (typeof object.resource !== \"object\")\n                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.resource: object expected\");\n              message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n            }\n            if (object.scopeLogs) {\n              if (!Array.isArray(object.scopeLogs))\n                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: array expected\");\n              message.scopeLogs = [];\n              for (let i = 0; i < object.scopeLogs.length; ++i) {\n                if (typeof object.scopeLogs[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: object expected\");\n                message.scopeLogs[i] = $root.opentelemetry.proto.logs.v1.ScopeLogs.fromObject(object.scopeLogs[i]);\n              }\n            }\n            if (object.schemaUrl != null)\n              message.schemaUrl = String(object.schemaUrl);\n            return message;\n          };\n          ResourceLogs.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.scopeLogs = [];\n            if (options.defaults) {\n              object.resource = null;\n              object.schemaUrl = \"\";\n            }\n            if (message.resource != null && message.hasOwnProperty(\"resource\"))\n              object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n            if (message.scopeLogs && message.scopeLogs.length) {\n              object.scopeLogs = [];\n              for (let j = 0; j < message.scopeLogs.length; ++j)\n                object.scopeLogs[j] = $root.opentelemetry.proto.logs.v1.ScopeLogs.toObject(message.scopeLogs[j], options);\n            }\n            if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n              object.schemaUrl = message.schemaUrl;\n            return object;\n          };\n          ResourceLogs.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          ResourceLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ResourceLogs\";\n          };\n          return ResourceLogs;\n        }();\n        v1.ScopeLogs = function() {\n          function ScopeLogs(properties) {\n            this.logRecords = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          ScopeLogs.prototype.scope = null;\n          ScopeLogs.prototype.logRecords = $util.emptyArray;\n          ScopeLogs.prototype.schemaUrl = \"\";\n          ScopeLogs.create = function create(properties) {\n            return new ScopeLogs(properties);\n          };\n          ScopeLogs.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n              $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(10).fork()).ldelim();\n            if (message.logRecords != null && message.logRecords.length)\n              for (let i = 0; i < message.logRecords.length; ++i)\n                $root.opentelemetry.proto.logs.v1.LogRecord.encode(message.logRecords[i], writer.uint32(18).fork()).ldelim();\n            if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n              writer.uint32(26).string(message.schemaUrl);\n            return writer;\n          };\n          ScopeLogs.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          ScopeLogs.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                  break;\n                }\n                case 2: {\n                  if (!(message.logRecords && message.logRecords.length))\n                    message.logRecords = [];\n                  message.logRecords.push($root.opentelemetry.proto.logs.v1.LogRecord.decode(reader, reader.uint32()));\n                  break;\n                }\n                case 3: {\n                  message.schemaUrl = reader.string();\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          ScopeLogs.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          ScopeLogs.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n              let error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n              if (error)\n                return \"scope.\" + error;\n            }\n            if (message.logRecords != null && message.hasOwnProperty(\"logRecords\")) {\n              if (!Array.isArray(message.logRecords))\n                return \"logRecords: array expected\";\n              for (let i = 0; i < message.logRecords.length; ++i) {\n                let error = $root.opentelemetry.proto.logs.v1.LogRecord.verify(message.logRecords[i]);\n                if (error)\n                  return \"logRecords.\" + error;\n              }\n            }\n            if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\")) {\n              if (!$util.isString(message.schemaUrl))\n                return \"schemaUrl: string expected\";\n            }\n            return null;\n          };\n          ScopeLogs.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.logs.v1.ScopeLogs)\n              return object;\n            let message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n            if (object.scope != null) {\n              if (typeof object.scope !== \"object\")\n                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.scope: object expected\");\n              message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n            }\n            if (object.logRecords) {\n              if (!Array.isArray(object.logRecords))\n                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: array expected\");\n              message.logRecords = [];\n              for (let i = 0; i < object.logRecords.length; ++i) {\n                if (typeof object.logRecords[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: object expected\");\n                message.logRecords[i] = $root.opentelemetry.proto.logs.v1.LogRecord.fromObject(object.logRecords[i]);\n              }\n            }\n            if (object.schemaUrl != null)\n              message.schemaUrl = String(object.schemaUrl);\n            return message;\n          };\n          ScopeLogs.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.logRecords = [];\n            if (options.defaults) {\n              object.scope = null;\n              object.schemaUrl = \"\";\n            }\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n              object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n            if (message.logRecords && message.logRecords.length) {\n              object.logRecords = [];\n              for (let j = 0; j < message.logRecords.length; ++j)\n                object.logRecords[j] = $root.opentelemetry.proto.logs.v1.LogRecord.toObject(message.logRecords[j], options);\n            }\n            if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n              object.schemaUrl = message.schemaUrl;\n            return object;\n          };\n          ScopeLogs.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          ScopeLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ScopeLogs\";\n          };\n          return ScopeLogs;\n        }();\n        v1.SeverityNumber = function() {\n          const valuesById = {}, values = Object.create(valuesById);\n          values[valuesById[0] = \"SEVERITY_NUMBER_UNSPECIFIED\"] = 0;\n          values[valuesById[1] = \"SEVERITY_NUMBER_TRACE\"] = 1;\n          values[valuesById[2] = \"SEVERITY_NUMBER_TRACE2\"] = 2;\n          values[valuesById[3] = \"SEVERITY_NUMBER_TRACE3\"] = 3;\n          values[valuesById[4] = \"SEVERITY_NUMBER_TRACE4\"] = 4;\n          values[valuesById[5] = \"SEVERITY_NUMBER_DEBUG\"] = 5;\n          values[valuesById[6] = \"SEVERITY_NUMBER_DEBUG2\"] = 6;\n          values[valuesById[7] = \"SEVERITY_NUMBER_DEBUG3\"] = 7;\n          values[valuesById[8] = \"SEVERITY_NUMBER_DEBUG4\"] = 8;\n          values[valuesById[9] = \"SEVERITY_NUMBER_INFO\"] = 9;\n          values[valuesById[10] = \"SEVERITY_NUMBER_INFO2\"] = 10;\n          values[valuesById[11] = \"SEVERITY_NUMBER_INFO3\"] = 11;\n          values[valuesById[12] = \"SEVERITY_NUMBER_INFO4\"] = 12;\n          values[valuesById[13] = \"SEVERITY_NUMBER_WARN\"] = 13;\n          values[valuesById[14] = \"SEVERITY_NUMBER_WARN2\"] = 14;\n          values[valuesById[15] = \"SEVERITY_NUMBER_WARN3\"] = 15;\n          values[valuesById[16] = \"SEVERITY_NUMBER_WARN4\"] = 16;\n          values[valuesById[17] = \"SEVERITY_NUMBER_ERROR\"] = 17;\n          values[valuesById[18] = \"SEVERITY_NUMBER_ERROR2\"] = 18;\n          values[valuesById[19] = \"SEVERITY_NUMBER_ERROR3\"] = 19;\n          values[valuesById[20] = \"SEVERITY_NUMBER_ERROR4\"] = 20;\n          values[valuesById[21] = \"SEVERITY_NUMBER_FATAL\"] = 21;\n          values[valuesById[22] = \"SEVERITY_NUMBER_FATAL2\"] = 22;\n          values[valuesById[23] = \"SEVERITY_NUMBER_FATAL3\"] = 23;\n          values[valuesById[24] = \"SEVERITY_NUMBER_FATAL4\"] = 24;\n          return values;\n        }();\n        v1.LogRecordFlags = function() {\n          const valuesById = {}, values = Object.create(valuesById);\n          values[valuesById[0] = \"LOG_RECORD_FLAG_UNSPECIFIED\"] = 0;\n          values[valuesById[255] = \"LOG_RECORD_FLAG_TRACE_FLAGS_MASK\"] = 255;\n          return values;\n        }();\n        v1.LogRecord = function() {\n          function LogRecord(properties) {\n            this.attributes = [];\n            if (properties) {\n              for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                  this[keys[i]] = properties[keys[i]];\n            }\n          }\n          LogRecord.prototype.timeUnixNano = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n          LogRecord.prototype.observedTimeUnixNano = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n          LogRecord.prototype.severityNumber = 0;\n          LogRecord.prototype.severityText = \"\";\n          LogRecord.prototype.body = null;\n          LogRecord.prototype.attributes = $util.emptyArray;\n          LogRecord.prototype.droppedAttributesCount = 0;\n          LogRecord.prototype.flags = 0;\n          LogRecord.prototype.traceId = $util.newBuffer([]);\n          LogRecord.prototype.spanId = $util.newBuffer([]);\n          LogRecord.create = function create(properties) {\n            return new LogRecord(properties);\n          };\n          LogRecord.encode = function encode(message, writer) {\n            if (!writer)\n              writer = $Writer.create();\n            if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n              writer.uint32(9).fixed64(message.timeUnixNano);\n            if (message.severityNumber != null && Object.hasOwnProperty.call(message, \"severityNumber\"))\n              writer.uint32(16).int32(message.severityNumber);\n            if (message.severityText != null && Object.hasOwnProperty.call(message, \"severityText\"))\n              writer.uint32(26).string(message.severityText);\n            if (message.body != null && Object.hasOwnProperty.call(message, \"body\"))\n              $root.opentelemetry.proto.common.v1.AnyValue.encode(message.body, writer.uint32(42).fork()).ldelim();\n            if (message.attributes != null && message.attributes.length)\n              for (let i = 0; i < message.attributes.length; ++i)\n                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(50).fork()).ldelim();\n            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n              writer.uint32(56).uint32(message.droppedAttributesCount);\n            if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n              writer.uint32(69).fixed32(message.flags);\n            if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n              writer.uint32(74).bytes(message.traceId);\n            if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n              writer.uint32(82).bytes(message.spanId);\n            if (message.observedTimeUnixNano != null && Object.hasOwnProperty.call(message, \"observedTimeUnixNano\"))\n              writer.uint32(89).fixed64(message.observedTimeUnixNano);\n            return writer;\n          };\n          LogRecord.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n          };\n          LogRecord.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n              reader = $Reader.create(reader);\n            let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n            while (reader.pos < end) {\n              let tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1: {\n                  message.timeUnixNano = reader.fixed64();\n                  break;\n                }\n                case 11: {\n                  message.observedTimeUnixNano = reader.fixed64();\n                  break;\n                }\n                case 2: {\n                  message.severityNumber = reader.int32();\n                  break;\n                }\n                case 3: {\n                  message.severityText = reader.string();\n                  break;\n                }\n                case 5: {\n                  message.body = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                  break;\n                }\n                case 6: {\n                  if (!(message.attributes && message.attributes.length))\n                    message.attributes = [];\n                  message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                  break;\n                }\n                case 7: {\n                  message.droppedAttributesCount = reader.uint32();\n                  break;\n                }\n                case 8: {\n                  message.flags = reader.fixed32();\n                  break;\n                }\n                case 9: {\n                  message.traceId = reader.bytes();\n                  break;\n                }\n                case 10: {\n                  message.spanId = reader.bytes();\n                  break;\n                }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          LogRecord.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n              reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n          };\n          LogRecord.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n              return \"object expected\";\n            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\")) {\n              if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                return \"timeUnixNano: integer|Long expected\";\n            }\n            if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\")) {\n              if (!$util.isInteger(message.observedTimeUnixNano) && !(message.observedTimeUnixNano && $util.isInteger(message.observedTimeUnixNano.low) && $util.isInteger(message.observedTimeUnixNano.high)))\n                return \"observedTimeUnixNano: integer|Long expected\";\n            }\n            if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n              switch (message.severityNumber) {\n                default:\n                  return \"severityNumber: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 11:\n                case 12:\n                case 13:\n                case 14:\n                case 15:\n                case 16:\n                case 17:\n                case 18:\n                case 19:\n                case 20:\n                case 21:\n                case 22:\n                case 23:\n                case 24:\n                  break;\n              }\n            if (message.severityText != null && message.hasOwnProperty(\"severityText\")) {\n              if (!$util.isString(message.severityText))\n                return \"severityText: string expected\";\n            }\n            if (message.body != null && message.hasOwnProperty(\"body\")) {\n              let error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.body);\n              if (error)\n                return \"body.\" + error;\n            }\n            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n              if (!Array.isArray(message.attributes))\n                return \"attributes: array expected\";\n              for (let i = 0; i < message.attributes.length; ++i) {\n                let error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                if (error)\n                  return \"attributes.\" + error;\n              }\n            }\n            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\")) {\n              if (!$util.isInteger(message.droppedAttributesCount))\n                return \"droppedAttributesCount: integer expected\";\n            }\n            if (message.flags != null && message.hasOwnProperty(\"flags\")) {\n              if (!$util.isInteger(message.flags))\n                return \"flags: integer expected\";\n            }\n            if (message.traceId != null && message.hasOwnProperty(\"traceId\")) {\n              if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                return \"traceId: buffer expected\";\n            }\n            if (message.spanId != null && message.hasOwnProperty(\"spanId\")) {\n              if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                return \"spanId: buffer expected\";\n            }\n            return null;\n          };\n          LogRecord.fromObject = function fromObject(object) {\n            if (object instanceof $root.opentelemetry.proto.logs.v1.LogRecord)\n              return object;\n            let message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n            if (object.timeUnixNano != null) {\n              if ($util.Long)\n                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n              else if (typeof object.timeUnixNano === \"string\")\n                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n              else if (typeof object.timeUnixNano === \"number\")\n                message.timeUnixNano = object.timeUnixNano;\n              else if (typeof object.timeUnixNano === \"object\")\n                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n            }\n            if (object.observedTimeUnixNano != null) {\n              if ($util.Long)\n                (message.observedTimeUnixNano = $util.Long.fromValue(object.observedTimeUnixNano)).unsigned = false;\n              else if (typeof object.observedTimeUnixNano === \"string\")\n                message.observedTimeUnixNano = parseInt(object.observedTimeUnixNano, 10);\n              else if (typeof object.observedTimeUnixNano === \"number\")\n                message.observedTimeUnixNano = object.observedTimeUnixNano;\n              else if (typeof object.observedTimeUnixNano === \"object\")\n                message.observedTimeUnixNano = new $util.LongBits(object.observedTimeUnixNano.low >>> 0, object.observedTimeUnixNano.high >>> 0).toNumber();\n            }\n            switch (object.severityNumber) {\n              default:\n                if (typeof object.severityNumber === \"number\") {\n                  message.severityNumber = object.severityNumber;\n                  break;\n                }\n                break;\n              case \"SEVERITY_NUMBER_UNSPECIFIED\":\n              case 0:\n                message.severityNumber = 0;\n                break;\n              case \"SEVERITY_NUMBER_TRACE\":\n              case 1:\n                message.severityNumber = 1;\n                break;\n              case \"SEVERITY_NUMBER_TRACE2\":\n              case 2:\n                message.severityNumber = 2;\n                break;\n              case \"SEVERITY_NUMBER_TRACE3\":\n              case 3:\n                message.severityNumber = 3;\n                break;\n              case \"SEVERITY_NUMBER_TRACE4\":\n              case 4:\n                message.severityNumber = 4;\n                break;\n              case \"SEVERITY_NUMBER_DEBUG\":\n              case 5:\n                message.severityNumber = 5;\n                break;\n              case \"SEVERITY_NUMBER_DEBUG2\":\n              case 6:\n                message.severityNumber = 6;\n                break;\n              case \"SEVERITY_NUMBER_DEBUG3\":\n              case 7:\n                message.severityNumber = 7;\n                break;\n              case \"SEVERITY_NUMBER_DEBUG4\":\n              case 8:\n                message.severityNumber = 8;\n                break;\n              case \"SEVERITY_NUMBER_INFO\":\n              case 9:\n                message.severityNumber = 9;\n                break;\n              case \"SEVERITY_NUMBER_INFO2\":\n              case 10:\n                message.severityNumber = 10;\n                break;\n              case \"SEVERITY_NUMBER_INFO3\":\n              case 11:\n                message.severityNumber = 11;\n                break;\n              case \"SEVERITY_NUMBER_INFO4\":\n              case 12:\n                message.severityNumber = 12;\n                break;\n              case \"SEVERITY_NUMBER_WARN\":\n              case 13:\n                message.severityNumber = 13;\n                break;\n              case \"SEVERITY_NUMBER_WARN2\":\n              case 14:\n                message.severityNumber = 14;\n                break;\n              case \"SEVERITY_NUMBER_WARN3\":\n              case 15:\n                message.severityNumber = 15;\n                break;\n              case \"SEVERITY_NUMBER_WARN4\":\n              case 16:\n                message.severityNumber = 16;\n                break;\n              case \"SEVERITY_NUMBER_ERROR\":\n              case 17:\n                message.severityNumber = 17;\n                break;\n              case \"SEVERITY_NUMBER_ERROR2\":\n              case 18:\n                message.severityNumber = 18;\n                break;\n              case \"SEVERITY_NUMBER_ERROR3\":\n              case 19:\n                message.severityNumber = 19;\n                break;\n              case \"SEVERITY_NUMBER_ERROR4\":\n              case 20:\n                message.severityNumber = 20;\n                break;\n              case \"SEVERITY_NUMBER_FATAL\":\n              case 21:\n                message.severityNumber = 21;\n                break;\n              case \"SEVERITY_NUMBER_FATAL2\":\n              case 22:\n                message.severityNumber = 22;\n                break;\n              case \"SEVERITY_NUMBER_FATAL3\":\n              case 23:\n                message.severityNumber = 23;\n                break;\n              case \"SEVERITY_NUMBER_FATAL4\":\n              case 24:\n                message.severityNumber = 24;\n                break;\n            }\n            if (object.severityText != null)\n              message.severityText = String(object.severityText);\n            if (object.body != null) {\n              if (typeof object.body !== \"object\")\n                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.body: object expected\");\n              message.body = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.body);\n            }\n            if (object.attributes) {\n              if (!Array.isArray(object.attributes))\n                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: array expected\");\n              message.attributes = [];\n              for (let i = 0; i < object.attributes.length; ++i) {\n                if (typeof object.attributes[i] !== \"object\")\n                  throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: object expected\");\n                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n              }\n            }\n            if (object.droppedAttributesCount != null)\n              message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n            if (object.flags != null)\n              message.flags = object.flags >>> 0;\n            if (object.traceId != null) {\n              if (typeof object.traceId === \"string\")\n                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n              else if (object.traceId.length >= 0)\n                message.traceId = object.traceId;\n            }\n            if (object.spanId != null) {\n              if (typeof object.spanId === \"string\")\n                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n              else if (object.spanId.length >= 0)\n                message.spanId = object.spanId;\n            }\n            return message;\n          };\n          LogRecord.toObject = function toObject(message, options) {\n            if (!options)\n              options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n              object.attributes = [];\n            if (options.defaults) {\n              if ($util.Long) {\n                let long = new $util.Long(0, 0, false);\n                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n              } else\n                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n              object.severityNumber = options.enums === String ? \"SEVERITY_NUMBER_UNSPECIFIED\" : 0;\n              object.severityText = \"\";\n              object.body = null;\n              object.droppedAttributesCount = 0;\n              object.flags = 0;\n              if (options.bytes === String)\n                object.traceId = \"\";\n              else {\n                object.traceId = [];\n                if (options.bytes !== Array)\n                  object.traceId = $util.newBuffer(object.traceId);\n              }\n              if (options.bytes === String)\n                object.spanId = \"\";\n              else {\n                object.spanId = [];\n                if (options.bytes !== Array)\n                  object.spanId = $util.newBuffer(object.spanId);\n              }\n              if ($util.Long) {\n                let long = new $util.Long(0, 0, false);\n                object.observedTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n              } else\n                object.observedTimeUnixNano = options.longs === String ? \"0\" : 0;\n            }\n            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n              if (typeof message.timeUnixNano === \"number\")\n                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n              else\n                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n            if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n              object.severityNumber = options.enums === String ? $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] === void 0 ? message.severityNumber : $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] : message.severityNumber;\n            if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n              object.severityText = message.severityText;\n            if (message.body != null && message.hasOwnProperty(\"body\"))\n              object.body = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.body, options);\n            if (message.attributes && message.attributes.length) {\n              object.attributes = [];\n              for (let j = 0; j < message.attributes.length; ++j)\n                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n            }\n            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n              object.droppedAttributesCount = message.droppedAttributesCount;\n            if (message.flags != null && message.hasOwnProperty(\"flags\"))\n              object.flags = message.flags;\n            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n              object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n              object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n            if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n              if (typeof message.observedTimeUnixNano === \"number\")\n                object.observedTimeUnixNano = options.longs === String ? String(message.observedTimeUnixNano) : message.observedTimeUnixNano;\n              else\n                object.observedTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.observedTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.observedTimeUnixNano.low >>> 0, message.observedTimeUnixNano.high >>> 0).toNumber() : message.observedTimeUnixNano;\n            return object;\n          };\n          LogRecord.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n          };\n          LogRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === void 0) {\n              typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogRecord\";\n          };\n          return LogRecord;\n        }();\n        return v1;\n      }();\n      return logs;\n    }();\n    proto.collector = function() {\n      const collector = {};\n      collector.logs = function() {\n        const logs = {};\n        logs.v1 = function() {\n          const v1 = {};\n          v1.LogsService = function() {\n            function LogsService(rpcImpl, requestDelimited, responseDelimited) {\n              protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n            }\n            (LogsService.prototype = Object.create(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.rpc.Service.prototype)).constructor = LogsService;\n            LogsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n              return new this(rpcImpl, requestDelimited, responseDelimited);\n            };\n            Object.defineProperty(LogsService.prototype[\"export\"] = function export_(request, callback) {\n              return this.rpcCall(export_, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse, request, callback);\n            }, \"name\", { value: \"Export\" });\n            return LogsService;\n          }();\n          v1.ExportLogsServiceRequest = function() {\n            function ExportLogsServiceRequest(properties) {\n              this.resourceLogs = [];\n              if (properties) {\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                  if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n              }\n            }\n            ExportLogsServiceRequest.prototype.resourceLogs = $util.emptyArray;\n            ExportLogsServiceRequest.create = function create(properties) {\n              return new ExportLogsServiceRequest(properties);\n            };\n            ExportLogsServiceRequest.encode = function encode(message, writer) {\n              if (!writer)\n                writer = $Writer.create();\n              if (message.resourceLogs != null && message.resourceLogs.length)\n                for (let i = 0; i < message.resourceLogs.length; ++i)\n                  $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(10).fork()).ldelim();\n              return writer;\n            };\n            ExportLogsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n              return this.encode(message, writer).ldelim();\n            };\n            ExportLogsServiceRequest.decode = function decode(reader, length) {\n              if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n              let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n              while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                  case 1: {\n                    if (!(message.resourceLogs && message.resourceLogs.length))\n                      message.resourceLogs = [];\n                    message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                    break;\n                  }\n                  default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n              }\n              return message;\n            };\n            ExportLogsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n              if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n              return this.decode(reader, reader.uint32());\n            };\n            ExportLogsServiceRequest.verify = function verify(message) {\n              if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n              if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                if (!Array.isArray(message.resourceLogs))\n                  return \"resourceLogs: array expected\";\n                for (let i = 0; i < message.resourceLogs.length; ++i) {\n                  let error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                  if (error)\n                    return \"resourceLogs.\" + error;\n                }\n              }\n              return null;\n            };\n            ExportLogsServiceRequest.fromObject = function fromObject(object) {\n              if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)\n                return object;\n              let message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n              if (object.resourceLogs) {\n                if (!Array.isArray(object.resourceLogs))\n                  throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: array expected\");\n                message.resourceLogs = [];\n                for (let i = 0; i < object.resourceLogs.length; ++i) {\n                  if (typeof object.resourceLogs[i] !== \"object\")\n                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: object expected\");\n                  message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                }\n              }\n              return message;\n            };\n            ExportLogsServiceRequest.toObject = function toObject(message, options) {\n              if (!options)\n                options = {};\n              let object = {};\n              if (options.arrays || options.defaults)\n                object.resourceLogs = [];\n              if (message.resourceLogs && message.resourceLogs.length) {\n                object.resourceLogs = [];\n                for (let j = 0; j < message.resourceLogs.length; ++j)\n                  object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n              }\n              return object;\n            };\n            ExportLogsServiceRequest.prototype.toJSON = function toJSON() {\n              return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n            ExportLogsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n              if (typeUrlPrefix === void 0) {\n                typeUrlPrefix = \"type.googleapis.com\";\n              }\n              return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\";\n            };\n            return ExportLogsServiceRequest;\n          }();\n          v1.ExportLogsServiceResponse = function() {\n            function ExportLogsServiceResponse(properties) {\n              if (properties) {\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                  if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n              }\n            }\n            ExportLogsServiceResponse.create = function create(properties) {\n              return new ExportLogsServiceResponse(properties);\n            };\n            ExportLogsServiceResponse.encode = function encode(message, writer) {\n              if (!writer)\n                writer = $Writer.create();\n              return writer;\n            };\n            ExportLogsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n              return this.encode(message, writer).ldelim();\n            };\n            ExportLogsServiceResponse.decode = function decode(reader, length) {\n              if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n              let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n              while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                  default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n              }\n              return message;\n            };\n            ExportLogsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n              if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n              return this.decode(reader, reader.uint32());\n            };\n            ExportLogsServiceResponse.verify = function verify(message) {\n              if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n              return null;\n            };\n            ExportLogsServiceResponse.fromObject = function fromObject(object) {\n              if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)\n                return object;\n              return new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n            };\n            ExportLogsServiceResponse.toObject = function toObject() {\n              return {};\n            };\n            ExportLogsServiceResponse.prototype.toJSON = function toJSON() {\n              return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n            ExportLogsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n              if (typeUrlPrefix === void 0) {\n                typeUrlPrefix = \"type.googleapis.com\";\n              }\n              return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\";\n            };\n            return ExportLogsServiceResponse;\n          }();\n          return v1;\n        }();\n        return logs;\n      }();\n      collector.trace = function() {\n        const trace = {};\n        trace.v1 = function() {\n          const v1 = {};\n          v1.TraceService = function() {\n            function TraceService(rpcImpl, requestDelimited, responseDelimited) {\n              protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n            }\n            (TraceService.prototype = Object.create(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.rpc.Service.prototype)).constructor = TraceService;\n            TraceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n              return new this(rpcImpl, requestDelimited, responseDelimited);\n            };\n            Object.defineProperty(TraceService.prototype[\"export\"] = function export_(request, callback) {\n              return this.rpcCall(export_, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse, request, callback);\n            }, \"name\", { value: \"Export\" });\n            return TraceService;\n          }();\n          v1.ExportTraceServiceRequest = function() {\n            function ExportTraceServiceRequest(properties) {\n              this.resourceSpans = [];\n              if (properties) {\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                  if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n              }\n            }\n            ExportTraceServiceRequest.prototype.resourceSpans = $util.emptyArray;\n            ExportTraceServiceRequest.create = function create(properties) {\n              return new ExportTraceServiceRequest(properties);\n            };\n            ExportTraceServiceRequest.encode = function encode(message, writer) {\n              if (!writer)\n                writer = $Writer.create();\n              if (message.resourceSpans != null && message.resourceSpans.length)\n                for (let i = 0; i < message.resourceSpans.length; ++i)\n                  $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(10).fork()).ldelim();\n              return writer;\n            };\n            ExportTraceServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n              return this.encode(message, writer).ldelim();\n            };\n            ExportTraceServiceRequest.decode = function decode(reader, length) {\n              if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n              let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n              while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                  case 1: {\n                    if (!(message.resourceSpans && message.resourceSpans.length))\n                      message.resourceSpans = [];\n                    message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                    break;\n                  }\n                  default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n              }\n              return message;\n            };\n            ExportTraceServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n              if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n              return this.decode(reader, reader.uint32());\n            };\n            ExportTraceServiceRequest.verify = function verify(message) {\n              if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n              if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                if (!Array.isArray(message.resourceSpans))\n                  return \"resourceSpans: array expected\";\n                for (let i = 0; i < message.resourceSpans.length; ++i) {\n                  let error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                  if (error)\n                    return \"resourceSpans.\" + error;\n                }\n              }\n              return null;\n            };\n            ExportTraceServiceRequest.fromObject = function fromObject(object) {\n              if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest)\n                return object;\n              let message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n              if (object.resourceSpans) {\n                if (!Array.isArray(object.resourceSpans))\n                  throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: array expected\");\n                message.resourceSpans = [];\n                for (let i = 0; i < object.resourceSpans.length; ++i) {\n                  if (typeof object.resourceSpans[i] !== \"object\")\n                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: object expected\");\n                  message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                }\n              }\n              return message;\n            };\n            ExportTraceServiceRequest.toObject = function toObject(message, options) {\n              if (!options)\n                options = {};\n              let object = {};\n              if (options.arrays || options.defaults)\n                object.resourceSpans = [];\n              if (message.resourceSpans && message.resourceSpans.length) {\n                object.resourceSpans = [];\n                for (let j = 0; j < message.resourceSpans.length; ++j)\n                  object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n              }\n              return object;\n            };\n            ExportTraceServiceRequest.prototype.toJSON = function toJSON() {\n              return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n            ExportTraceServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n              if (typeUrlPrefix === void 0) {\n                typeUrlPrefix = \"type.googleapis.com\";\n              }\n              return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\";\n            };\n            return ExportTraceServiceRequest;\n          }();\n          v1.ExportTraceServiceResponse = function() {\n            function ExportTraceServiceResponse(properties) {\n              if (properties) {\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                  if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n              }\n            }\n            ExportTraceServiceResponse.create = function create(properties) {\n              return new ExportTraceServiceResponse(properties);\n            };\n            ExportTraceServiceResponse.encode = function encode(message, writer) {\n              if (!writer)\n                writer = $Writer.create();\n              return writer;\n            };\n            ExportTraceServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n              return this.encode(message, writer).ldelim();\n            };\n            ExportTraceServiceResponse.decode = function decode(reader, length) {\n              if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n              let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n              while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                  default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n              }\n              return message;\n            };\n            ExportTraceServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n              if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n              return this.decode(reader, reader.uint32());\n            };\n            ExportTraceServiceResponse.verify = function verify(message) {\n              if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n              return null;\n            };\n            ExportTraceServiceResponse.fromObject = function fromObject(object) {\n              if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse)\n                return object;\n              return new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n            };\n            ExportTraceServiceResponse.toObject = function toObject() {\n              return {};\n            };\n            ExportTraceServiceResponse.prototype.toJSON = function toJSON() {\n              return this.constructor.toObject(this, protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n            ExportTraceServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n              if (typeUrlPrefix === void 0) {\n                typeUrlPrefix = \"type.googleapis.com\";\n              }\n              return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\";\n            };\n            return ExportTraceServiceResponse;\n          }();\n          return v1;\n        }();\n        return trace;\n      }();\n      return collector;\n    }();\n    return proto;\n  }();\n  return opentelemetry2;\n})();\n\n\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-RZL4WSYM.mjs?");

/***/ }),

/***/ "./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-Z5VEH2XZ.mjs":
/*!***************************************************************************************!*\
  !*** ./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-Z5VEH2XZ.mjs ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OTLPCloudflareExporterBase: () => (/* binding */ OTLPCloudflareExporterBase),\n/* harmony export */   __privateAdd: () => (/* binding */ __privateAdd),\n/* harmony export */   __privateGet: () => (/* binding */ __privateGet),\n/* harmony export */   __privateMethod: () => (/* binding */ __privateMethod),\n/* harmony export */   __privateSet: () => (/* binding */ __privateSet)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/baggage/utils.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/* harmony import */ var _opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/otlp-exporter-base */ \"./node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js\");\n/* harmony import */ var _opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/otlp-exporter-base */ \"./node_modules/@opentelemetry/otlp-exporter-base/build/esm/types.js\");\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/exporters/OTLPCloudflareExporterBase.ts\n\n\n\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_freeGlobal.js\nvar freeGlobal = typeof global == \"object\" && global && global.Object === Object && global;\nvar freeGlobal_default = freeGlobal;\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_root.js\nvar freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\nvar root = freeGlobal_default || freeSelf || Function(\"return this\")();\nvar root_default = root;\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Symbol.js\nvar Symbol2 = root_default.Symbol;\nvar Symbol_default = Symbol2;\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getRawTag.js\nvar objectProto = Object.prototype;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar nativeObjectToString = objectProto.toString;\nvar symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n  try {\n    value[symToStringTag] = void 0;\n    var unmasked = true;\n  } catch (e) {\n  }\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\nvar getRawTag_default = getRawTag;\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_objectToString.js\nvar objectProto2 = Object.prototype;\nvar nativeObjectToString2 = objectProto2.toString;\nfunction objectToString(value) {\n  return nativeObjectToString2.call(value);\n}\nvar objectToString_default = objectToString;\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseGetTag.js\nvar nullTag = \"[object Null]\";\nvar undefinedTag = \"[object Undefined]\";\nvar symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === void 0 ? undefinedTag : nullTag;\n  }\n  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);\n}\nvar baseGetTag_default = baseGetTag;\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isObjectLike.js\nfunction isObjectLike(value) {\n  return value != null && typeof value == \"object\";\n}\nvar isObjectLike_default = isObjectLike;\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_overArg.js\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\nvar overArg_default = overArg;\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getPrototype.js\nvar getPrototype = overArg_default(Object.getPrototypeOf, Object);\nvar getPrototype_default = getPrototype;\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isPlainObject.js\nvar objectTag = \"[object Object]\";\nvar funcProto = Function.prototype;\nvar objectProto3 = Object.prototype;\nvar funcToString = funcProto.toString;\nvar hasOwnProperty2 = objectProto3.hasOwnProperty;\nvar objectCtorString = funcToString.call(Object);\nfunction isPlainObject(value) {\n  if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype_default(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty2.call(proto, \"constructor\") && proto.constructor;\n  return typeof Ctor == \"function\" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\n}\nvar isPlainObject_default = isPlainObject;\n\n// ../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isError.js\nvar domExcTag = \"[object DOMException]\";\nvar errorTag = \"[object Error]\";\nfunction isError(value) {\n  if (!isObjectLike_default(value)) {\n    return false;\n  }\n  var tag = baseGetTag_default(value);\n  return tag == errorTag || tag == domExcTag || typeof value.message == \"string\" && typeof value.name == \"string\" && !isPlainObject_default(value);\n}\nvar isError_default = isError;\n\n// src/exporters/OTLPCloudflareExporterBase.ts\nvar OTLPCloudflareExporterBase = class {\n  constructor(config = {}) {\n    this.DEFAULT_HEADERS = {};\n    this._sendingPromises = [];\n    this.url = this.getUrl(config);\n    if (config.metadata) {\n      _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.warn(\"Metadata cannot be set when using http\");\n    }\n    this.headers = Object.assign(\n      this.DEFAULT_HEADERS,\n      (0,_opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_1__.parseHeaders)(config.headers)\n    );\n    this._concurrencyLimit = typeof config.concurrencyLimit === \"number\" ? config.concurrencyLimit : Infinity;\n    this.timeoutMillis = (0,_opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_1__.configureExporterTimeout)(config.timeoutMillis);\n    this.enableCompression = config.compress ?? true;\n  }\n  static parseEnv(env, exporterType) {\n    const headers = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.parseKeyPairsIntoRecord(env[`OTEL_EXPORTER_OTLP_${exporterType}_HEADERS`] ?? env[\"OTEL_EXPORTER_OTLP_HEADERS\"] ?? \"\");\n    const compressRawValue = env[`OTEL_EXPORTER_${exporterType}_COMPRESSION_ENABLED`] ?? env[\"OTEL_EXPORTER_COMPRESSION_ENABLED\"] ?? \"true\";\n    const compress = !(compressRawValue === \"0\" || compressRawValue === \"false\");\n    return {\n      endpoints: {\n        default: env[\"OTEL_EXPORTER_OTLP_ENDPOINT\"] ?? env[\"OTLP_ENDPOINT\"],\n        traces: env[\"OTEL_EXPORTER_OTLP_TRACES_ENDPOINT\"],\n        logs: env[\"OTEL_EXPORTER_OTLP_LOGS_ENDPOINT\"]\n      },\n      headers,\n      compress\n    };\n  }\n  export(items, resultCallback) {\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.ExportResultCode.FAILED,\n        error: new Error(\"Concurrent export limit reached\")\n      });\n      return;\n    }\n    this._export(items).then(() => {\n      resultCallback({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.ExportResultCode.SUCCESS });\n    }).catch((error) => {\n      resultCallback({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.ExportResultCode.FAILED, error });\n    });\n  }\n  _export(items) {\n    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.diag.debug(\"items to be sent\", items);\n    return this.send(items);\n  }\n  compress(response) {\n    if (!this.enableCompression) {\n      return { body: response.body, headers: {} };\n    }\n    const compressionStream = new CompressionStream(\"gzip\");\n    const compressedBody = response.body.pipeThrough(compressionStream);\n    return { body: compressedBody, headers: { \"content-encoding\": \"gzip\" } };\n  }\n  send(items) {\n    const serviceRequest = this.convert(items);\n    let body = serviceRequest instanceof Uint8Array ? serviceRequest : JSON.stringify(serviceRequest);\n    const signal = AbortSignal.timeout(\n      this.timeoutMillis\n    );\n    const responseBuffer = new Response(body);\n    const compressed = this.compress(responseBuffer);\n    const promise = fetch(this.url, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": this.contentType,\n        ...compressed.headers,\n        ...this.headers\n      },\n      body: compressed.body,\n      signal\n    }).then((res) => {\n      if (!res.ok) {\n        throw new _opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_4__.OTLPExporterError(res.statusText, res.status);\n      }\n    }).catch((error) => {\n      if (isError_default(error)) {\n        if (error.name === \"TimeoutError\") {\n          throw new _opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_4__.OTLPExporterError(\"Request Timeout\");\n        }\n      }\n      throw new _opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_4__.OTLPExporterError(`There was an error sending spans:\n\t${error}\nDouble check that your exporter URL is correct and the endpoint is valid.`);\n    });\n    this._sendingPromises.push(promise);\n    return promise;\n  }\n  shutdown() {\n    throw new Error(\"Shutdown is not supported by this exporter.\");\n  }\n};\n\n\n/**\n * @license\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"es\" -o ./`\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-Z5VEH2XZ.mjs?");

/***/ }),

/***/ "./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/exporters/OTLPProtoTraceExporter.mjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/exporters/OTLPProtoTraceExporter.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OTLPProtoTraceExporter: () => (/* binding */ OTLPProtoTraceExporter)\n/* harmony export */ });\n/* harmony import */ var _chunk_RZL4WSYM_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk-RZL4WSYM.mjs */ \"./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-RZL4WSYM.mjs\");\n/* harmony import */ var _chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunk-Z5VEH2XZ.mjs */ \"./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-Z5VEH2XZ.mjs\");\n/* harmony import */ var _opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/otlp-exporter-base */ \"./node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js\");\n/* harmony import */ var _opentelemetry_otlp_transformer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/otlp-transformer */ \"./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/index.js\");\n\n\n\n// src/exporters/OTLPProtoTraceExporter.ts\n\n\nvar {\n  proto: {\n    collector: {\n      trace: {\n        v1: { ExportTraceServiceRequest }\n      }\n    }\n  }\n} = _chunk_RZL4WSYM_mjs__WEBPACK_IMPORTED_MODULE_0__.opentelemetry;\nvar DEFAULT_COLLECTOR_RESOURCE_PATH = \"v1/traces\";\nvar OTLPProtoTraceExporter = class extends _chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.OTLPCloudflareExporterBase {\n  constructor(config) {\n    super(config);\n    this.contentType = \"application/x-protobuf\";\n  }\n  static fromEnv(env) {\n    return new OTLPProtoTraceExporter(_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.OTLPCloudflareExporterBase.parseEnv(env, \"TRACES\"));\n  }\n  convert(spans) {\n    const convertedSpans = (0,_opentelemetry_otlp_transformer__WEBPACK_IMPORTED_MODULE_2__.createExportTraceServiceRequest)(spans, false);\n    const message = ExportTraceServiceRequest.create(convertedSpans);\n    return ExportTraceServiceRequest.encode(message).finish();\n  }\n  getUrl(config) {\n    if (typeof config.url === \"string\") {\n      return config.url;\n    }\n    if (config.endpoints?.traces?.length > 0) {\n      return (0,_opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_3__.appendRootPathToUrlIfNeeded)(config.endpoints.traces);\n    }\n    if (config.endpoints?.default?.length > 0) {\n      return (0,_opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_3__.appendResourcePathToUrl)(config.endpoints.default, DEFAULT_COLLECTOR_RESOURCE_PATH);\n    }\n    throw new Error(\"You must provide a valid URL for this exporter. Make sure either config.url or env.OTEL_EXPORTER_OTLP_ENDPOINT are specified.\");\n  }\n};\n\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/exporters/OTLPProtoTraceExporter.mjs?");

/***/ }),

/***/ "./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/index.mjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/index.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OTLPJsonLogExporter: () => (/* binding */ OTLPJsonLogExporter),\n/* harmony export */   OTLPJsonTraceExporter: () => (/* binding */ OTLPJsonTraceExporter),\n/* harmony export */   WorkersSDK: () => (/* binding */ WorkersSDK),\n/* harmony export */   api: () => (/* reexport module object */ _opentelemetry_api__WEBPACK_IMPORTED_MODULE_17__),\n/* harmony export */   core: () => (/* reexport module object */ _opentelemetry_core__WEBPACK_IMPORTED_MODULE_18__),\n/* harmony export */   tracing: () => (/* reexport module object */ _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_19__)\n/* harmony export */ });\n/* harmony import */ var _chunk_3AAH5RA7_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-3AAH5RA7.mjs */ \"./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-3AAH5RA7.mjs\");\n/* harmony import */ var _chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-Z5VEH2XZ.mjs */ \"./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/chunk-Z5VEH2XZ.mjs\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/otlp-exporter-base */ \"./node_modules/@opentelemetry/otlp-exporter-base/build/esm/util.js\");\n/* harmony import */ var _opentelemetry_otlp_transformer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/otlp-transformer */ \"./node_modules/@opentelemetry/otlp-transformer/build/esm/trace/index.js\");\n/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/resources */ \"./node_modules/@opentelemetry/resources/build/esm/Resource.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @opentelemetry/api */ \"./node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/propagation/composite.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/platform/browser/globalThis.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @opentelemetry/core */ \"./node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\");\n/* harmony import */ var _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/sdk-trace-base */ \"./node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"./node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js\");\n\n\n\n// src/index.ts\n\n\n\n\n// src/exporters/OTLPJsonTraceExporter.ts\n\n\nvar DEFAULT_COLLECTOR_RESOURCE_PATH = \"v1/traces\";\nvar OTLPJsonTraceExporter = class extends _chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.OTLPCloudflareExporterBase {\n  constructor() {\n    super(...arguments);\n    this.contentType = \"application/json\";\n  }\n  static fromEnv(env) {\n    return new OTLPJsonTraceExporter(_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.OTLPCloudflareExporterBase.parseEnv(env, \"TRACES\"));\n  }\n  convert(spans) {\n    return (0,_opentelemetry_otlp_transformer__WEBPACK_IMPORTED_MODULE_2__.createExportTraceServiceRequest)(spans, true);\n  }\n  getUrl(config) {\n    if (typeof config.url === \"string\") {\n      return config.url;\n    }\n    if (config.endpoints?.traces?.length > 0) {\n      return (0,_opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_3__.appendRootPathToUrlIfNeeded)(config.endpoints.traces);\n    }\n    if (config.endpoints?.default?.length > 0) {\n      return (0,_opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_3__.appendResourcePathToUrl)(config.endpoints.default, DEFAULT_COLLECTOR_RESOURCE_PATH);\n    }\n    throw new Error(\"You must provide a valid URL for this exporter. Make sure either config.url or env.OTEL_EXPORTER_OTLP_ENDPOINT are specified.\");\n  }\n};\n\n// src/exporters/OTLPJsonLogExporter.ts\n\nvar DEFAULT_COLLECTOR_RESOURCE_PATH2 = \"v1/logs\";\nvar OTLPJsonLogExporter = class extends _chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.OTLPCloudflareExporterBase {\n  constructor() {\n    super(...arguments);\n    this.contentType = \"application/json\";\n  }\n  static fromEnv(env) {\n    return new OTLPJsonLogExporter(_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.OTLPCloudflareExporterBase.parseEnv(env, \"LOGS\"));\n  }\n  convert(logRecords) {\n    return (0,_chunk_3AAH5RA7_mjs__WEBPACK_IMPORTED_MODULE_0__.createExportLogsServiceRequest)(logRecords, true);\n  }\n  getUrl(config) {\n    if (typeof config.url === \"string\") {\n      return config.url;\n    }\n    if (config.endpoints?.logs?.length > 0) {\n      return (0,_opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_3__.appendRootPathToUrlIfNeeded)(config.endpoints.logs);\n    }\n    if (config.endpoints?.default?.length > 0) {\n      return (0,_opentelemetry_otlp_exporter_base__WEBPACK_IMPORTED_MODULE_3__.appendResourcePathToUrl)(config.endpoints.default, DEFAULT_COLLECTOR_RESOURCE_PATH2);\n    }\n    throw new Error(\"You must provide a valid URL for this exporter. Make sure either config.url or env.OTEL_EXPORTER_OTLP_ENDPOINT are specified.\");\n  }\n};\n\n// src/sdk.ts\n\n\n\n\n\n// src/EventSpanProcessor.ts\n\nvar EventSpanProcessor = class {\n  constructor(exporter) {\n    this.exporter = exporter;\n    this.spans = /* @__PURE__ */ new Set();\n  }\n  forceFlush() {\n    return new Promise((resolve, reject) => {\n      this.exporter.export(Array.from(this.spans), (result) => {\n        if (result.code === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.ExportResultCode.SUCCESS) {\n          this.spans.clear();\n          resolve();\n        } else {\n          reject(result.error);\n        }\n      });\n    });\n  }\n  onStart(_, __) {\n  }\n  onEnd(span) {\n    this.spans.add(span);\n  }\n  shutdown() {\n    throw new Error(\"Method not implemented.\");\n  }\n};\n\n// src/SimpleContext.ts\nvar SimpleContext = class {\n  constructor() {\n    this._data = /* @__PURE__ */ new Map();\n  }\n  getValue(key) {\n    return this._data.get(key);\n  }\n  setValue(key, value) {\n    this._data.set(key, value);\n    return this;\n  }\n  deleteValue(key) {\n    this._data.delete(key);\n    return this;\n  }\n};\n\n// src/sdk.ts\n\n\n// ../../node_modules/.pnpm/diary@0.4.3/node_modules/diary/diary/browser/index.mjs\nvar e = [];\nvar a = (e2) => new RegExp(e2.replace(/\\*/g, \".*\") + \"$\");\nvar r = (r2) => {\n  e = r2.split(/[\\s,]+/).map(a);\n};\nvar s = (a2, r2, s2, ...l2) => {\n  for (let n2 = e.length; n2--; )\n    if (e[n2].test(a2))\n      return r2({ name: a2, level: s2, messages: l2 });\n};\nvar l = (e2) => {\n  let a2 = \"\";\n  const r2 = console[\"fatal\" === e2.level ? \"error\" : e2.level];\n  if (e2.name && (a2 += `[${e2.name}] `), \"object\" == typeof e2.messages[0])\n    r2(a2, ...e2.messages);\n  else {\n    r2(a2 + e2.messages.shift(), ...e2.messages);\n  }\n};\nvar n = (e2, a2) => ({ fatal: s.bind(0, e2, a2 = a2 || l, \"fatal\"), error: s.bind(0, e2, a2, \"error\"), warn: s.bind(0, e2, a2, \"warn\"), debug: s.bind(0, e2, a2, \"debug\"), info: s.bind(0, e2, a2, \"info\"), log: s.bind(0, e2, a2, \"log\") });\nvar o = n(\"\");\nvar t = o.fatal;\nvar g = o.error;\nvar i = o.warn;\nvar f = o.debug;\nvar b = o.info;\nvar d = o.log;\n\n// src/HeadersTextExtractor.ts\nvar HeadersTextMapper = class {\n  keys(carrier) {\n    return Array.from(carrier.keys());\n  }\n  get(carrier, key) {\n    if (key.toLowerCase() === \"set-cookie\") {\n      return carrier.getAll(key);\n    }\n    return carrier.get(key);\n  }\n  set(carrier, key, value) {\n    carrier.set(key, value);\n  }\n};\n\n// src/utils.ts\nfunction cloneRequest(request) {\n  const url = new URL(request.url);\n  return new Request(url.toString(), new Request(request, {}));\n}\n\n// src/sdk.ts\nvar headersTextMapper = new HeadersTextMapper();\nvar _flushed, _logs, _env, _ingestEvent, ingestEvent_fn, _parseAttributes, parseAttributes_fn, _isValidAttributeKey, isValidAttributeKey_fn, _isPrintableString, isPrintableString_fn, _isValidAndNotEmptyKey, isValidAndNotEmptyKey_fn;\nvar _WorkersSDK = class {\n  constructor(eventOrRequest, ctx, envOrConfig, configOrUnk) {\n    this.eventOrRequest = eventOrRequest;\n    this.ctx = ctx;\n    (0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateAdd)(this, _ingestEvent);\n    this.allowedHeaders = [\"user-agent\", \"cf-ray\"];\n    this.allowedSearch = /.*/;\n    (0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateAdd)(this, _flushed, false);\n    (0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateAdd)(this, _logs, []);\n    (0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateAdd)(this, _env, void 0);\n    this.res = this.sendResponse.bind(this);\n    let config;\n    let env = {};\n    if (configOrUnk == null) {\n      config = envOrConfig;\n    } else {\n      config = configOrUnk;\n      env = envOrConfig;\n    }\n    (0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateSet)(this, _env, env);\n    if (config.service == null || config.service?.length == 0) {\n      throw new Error(\"You must provide a service name via `service`.\");\n    }\n    const resource = config.resource ?? new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource({\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.TELEMETRY_SDK_NAME]: \"opentelemetry-sdk-workers\",\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.CLOUD_PROVIDER]: \"cloudflare\",\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.CLOUD_PLATFORM]: \"workers\",\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.SERVICE_NAME]: config.service,\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.FAAS_NAME]: config.service,\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: \"Cloudflare-Workers\"\n    });\n    if (config && config.resource && config.resource.attributes) {\n      if (\"project.name\" in config.resource.attributes) {\n        this.projectName = config.resource.attributes[\"project.name\"];\n      }\n      if (\"service.name\" in config.resource.attributes) {\n        this.serviceName = config.resource.attributes[\"service.name\"];\n      }\n    }\n    if (\"traceExporter\" in config) {\n      this.traceExporter = config.traceExporter;\n    } else {\n      const { endpoint, ...exporterConfig } = config;\n      this.traceExporter = new OTLPJsonTraceExporter({\n        endpoints: { default: endpoint },\n        ...exporterConfig\n      });\n    }\n    const sampler = config.sampler ?? new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_7__.AlwaysOnSampler();\n    this.traceProvider = new _opentelemetry_sdk_trace_base__WEBPACK_IMPORTED_MODULE_8__.BasicTracerProvider({\n      sampler,\n      resource\n    });\n    const spanProcessor = new EventSpanProcessor(this.traceExporter);\n    this.traceProvider.addSpanProcessor(spanProcessor);\n    this.propagator = config.propagator ?? new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_9__.CompositePropagator({\n      propagators: [new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_10__.W3CTraceContextPropagator(), new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_11__.W3CBaggagePropagator()]\n    });\n    this.requestTracer = this.traceProvider.getTracer(\"opentelemetry-sdk-workers\", \"0.1.0\");\n    const { span, spanContext } = this.initSpan();\n    this.span = span;\n    this.spanContext = spanContext;\n    this.logExporter = config.logExporter;\n    this.logExportEnabled = config.logExporter != null;\n    this.consoleLogEnabled = config.consoleLogEnabled ?? false;\n    r(\"*\");\n    this.logger = n(config.service, (event) => {\n      const { name, level, messages } = event;\n      const consoleLevel = level === \"fatal\" ? \"error\" : level;\n      if (this.consoleLogEnabled) {\n        const [message, extra] = messages;\n        console[consoleLevel](message, extra ? JSON.stringify(extra) : \"\");\n      }\n      if (this.logExporter) {\n        (0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateMethod)(this, _ingestEvent, ingestEvent_fn).call(this, event);\n      }\n    });\n  }\n  get env() {\n    return new Proxy((0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateGet)(this, _env), {\n      get: (target, prop, reciever) => {\n        const binding = Reflect.get(target, prop, reciever);\n        return {\n          fetch: (request, init) => {\n            return this._fetch(binding, request, init);\n          }\n        };\n      }\n    });\n  }\n  static fromEnv(eventOrRequest, env, ctx, config = {}) {\n    const rawAttributes = env[\"OTEL_RESOURCE_ATTRIBUTES\"];\n    const attributes = (0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateMethod)(this, _parseAttributes, parseAttributes_fn).call(this, rawAttributes);\n    const serviceName = env[\"OTEL_SERVICE_NAME\"];\n    if (serviceName === null) {\n      throw new Error(\"You must provide a service name via env.OTEL_SERVICE_NAME.\");\n    }\n    if (serviceName) {\n      attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.SERVICE_NAME] = serviceName;\n    }\n    const resource = new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource(attributes).merge(new _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_5__.Resource({\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.TELEMETRY_SDK_NAME]: \"opentelemetry-sdk-workers\",\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.CLOUD_PROVIDER]: \"cloudflare\",\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.CLOUD_PLATFORM]: \"workers\",\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.FAAS_NAME]: attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.SERVICE_NAME],\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.PROCESS_RUNTIME_NAME]: \"Cloudflare-Workers\"\n    }));\n    const rawLoggingValue = env[\"OTEL_EXPORTER_LOGS_ENABLED\"];\n    const rawConsoleLogValue = env[\"OTEL_EXPORTER_LOGS_CONSOLE_ENABLED\"];\n    const loggingEnabled = rawLoggingValue === \"1\" || rawLoggingValue === \"true\";\n    const consoleEnabled = rawConsoleLogValue === \"1\" || rawConsoleLogValue === \"true\";\n    return new _WorkersSDK(eventOrRequest, ctx, env, {\n      service: attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_6__.SemanticResourceAttributes.SERVICE_NAME],\n      resource,\n      traceExporter: OTLPJsonTraceExporter.fromEnv(env),\n      logExporter: loggingEnabled ? OTLPJsonLogExporter.fromEnv(env) : void 0,\n      consoleLogEnabled: consoleEnabled,\n      ...config\n    });\n  }\n  async fetch(request, requestInitr) {\n    return this._fetch(_opentelemetry_core__WEBPACK_IMPORTED_MODULE_12__._globalThis, request, requestInitr);\n  }\n  sendResponse(response) {\n    this.span.setAttributes({\n      [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_STATUS_CODE]: response.status\n    });\n    for (const headerKey of response.headers.keys()) {\n      if (headerKey === \"set-cookie\") {\n        continue;\n      }\n      if (!this.allowedHeaders.some(\n        (allowed) => typeof allowed === \"string\" ? headerKey === allowed : allowed.test(headerKey)\n      )) {\n        continue;\n      }\n      this.span.setAttribute(`http.response.header.${headerKey.toLowerCase()}`, [\n        response.headers.get(headerKey)\n      ]);\n    }\n    let endTime = Date.now();\n    if (this.startTime === endTime) {\n      endTime += 0.01;\n    }\n    this.span.end(endTime);\n    this.ctx.waitUntil(this.end());\n    return response;\n  }\n  captureException(ex) {\n    this.span.recordException(ex);\n    let endTime = Date.now();\n    if (this.startTime === endTime) {\n      endTime += 0.01;\n    }\n    this.span.end(endTime);\n    this.ctx.waitUntil(this.end());\n  }\n  async _fetch(fetchTarget, request, requestInitr) {\n    let downstreamRequest;\n    if (request instanceof Request) {\n      downstreamRequest = cloneRequest(request);\n    } else {\n      downstreamRequest = new Request(request, requestInitr);\n    }\n    const childSpan = this.createSpan(downstreamRequest);\n    this.propagator.inject(this.spanContext, downstreamRequest.headers, headersTextMapper);\n    if ((0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateGet)(this, _flushed)) {\n      console.warn(\n        \"Fetch request sent after worker spans were flushed. Avoid using instance.fetch after calling sendResponse or captureException.\"\n      );\n    }\n    try {\n      const response = await fetchTarget.fetch(downstreamRequest);\n      this.endSpan(downstreamRequest, childSpan, response);\n      return response;\n    } catch (reason) {\n      this.endSpan(downstreamRequest, childSpan, reason);\n      return reason;\n    }\n  }\n  createSpan(request) {\n    const method = (request.method ?? \"GET\").toUpperCase();\n    const spanName = `HTTP ${method}`;\n    const url = new URL(request.url);\n    const childSpan = this.requestTracer.startSpan(spanName, {\n      kind: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_14__.SpanKind.CLIENT,\n      attributes: {\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_METHOD]: method,\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_URL]: request.url,\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_TARGET]: `${url.pathname}${url.search}`,\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_HOST]: url.host,\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_SCHEME]: url.protocol.replace(\":\", \"\")\n      }\n    }, this.spanContext);\n    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_15__.trace.setSpan(this.spanContext, childSpan);\n    return childSpan;\n  }\n  endSpan(request, span, responseOrError) {\n    const url = new URL(\"url\" in responseOrError ? responseOrError.url : request.url);\n    if (responseOrError instanceof Response) {\n      span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_STATUS_CODE, responseOrError.status);\n    } else {\n      span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_STATUS_CODE, responseOrError[\"status\"] ?? 0);\n      span.recordException(responseOrError, new Date());\n    }\n    span.end(new Date());\n  }\n  async end() {\n    try {\n      const exportPromises = [\n        this.traceProvider.forceFlush()\n      ];\n      if (this.logExporter) {\n        exportPromises.push(new Promise((resolve, reject) => {\n          this.logExporter.export((0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateGet)(this, _logs), (result) => {\n            if (result.code === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.ExportResultCode.SUCCESS) {\n              resolve();\n            } else {\n              reject(result.error);\n            }\n          });\n        }));\n      }\n      await Promise.all(exportPromises);\n    } catch (error) {\n      console.error(\"Failed to exporter open telemetry data:\", error);\n      console.error(\"Make sure that your endpoint and/or exporters are correctly configured.\");\n    }\n  }\n  initSpan() {\n    const context = new SimpleContext();\n    let name;\n    if (\"type\" in this.eventOrRequest) {\n      const scheduledEvent = this.eventOrRequest;\n      name = `scheduled ${scheduledEvent.cron ?? scheduledEvent.scheduledTime}`;\n    } else {\n      if (!this.eventOrRequest) {\n        throw new Error(\"You must provide the request to start for fetch events!\");\n      }\n      const url = new URL(this.eventOrRequest.url);\n      name = `fetch ${this.eventOrRequest.method} ${url.pathname}`;\n      this.propagator.extract(context, this.eventOrRequest.headers, headersTextMapper);\n    }\n    const span = this.requestTracer.startSpan(\n      name,\n      {\n        kind: \"type\" in this.eventOrRequest ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_14__.SpanKind.SERVER : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_14__.SpanKind.INTERNAL,\n        startTime: Date.now()\n      },\n      context\n    );\n    _opentelemetry_api__WEBPACK_IMPORTED_MODULE_15__.trace.setSpan(context, span);\n    if (\"type\" in this.eventOrRequest) {\n      const scheduledEvent = this.eventOrRequest;\n      span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.FAAS_TRIGGER, \"timer\");\n      span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.FAAS_TIME, scheduledEvent.scheduledTime);\n      if (scheduledEvent.cron) {\n        span.setAttribute(_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.FAAS_CRON, scheduledEvent.cron);\n      }\n    } else {\n      const request = this.eventOrRequest;\n      const url = new URL(request.url);\n      const searchParams = new URLSearchParams();\n      for (const [key, value] of url.searchParams) {\n        if (Array.isArray(this.allowedSearch)) {\n          if (this.allowedSearch.some(\n            (allowed) => typeof allowed === \"string\" ? allowed === key : allowed.test(key)\n          )) {\n            searchParams.append(key, value);\n          }\n        } else if (this.allowedSearch.test(key)) {\n          searchParams.append(key, value);\n        }\n      }\n      const search = searchParams.toString();\n      const target = `${url.pathname}${search === \"\" ? \"\" : `?${search}`}`;\n      span.setAttributes({\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_METHOD]: request.method,\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_URL]: request.url,\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_TARGET]: target,\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_HOST]: url.host,\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.NET_HOST_NAME]: url.hostname,\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.NET_HOST_PORT]: url.port,\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_SCHEME]: url.protocol.substring(0, url.protocol.length - 1),\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_USER_AGENT]: request.headers.get(\"user-agent\"),\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.NET_PEER_IP]: request.headers.get(\"cf-connecting-ip\"),\n        [_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_13__.SemanticAttributes.HTTP_CLIENT_IP]: request.headers.get(\"cf-connecting-ip\")\n      });\n      for (const headerKey of request.headers.keys()) {\n        if (headerKey === \"cookie\") {\n          continue;\n        }\n        if (!this.allowedHeaders.some(\n          (allowed) => typeof allowed === \"string\" ? headerKey === allowed : allowed.test(headerKey)\n        )) {\n          continue;\n        }\n        span.setAttribute(`http.request.header.${headerKey.toLowerCase()}`, [request.headers.get(headerKey)]);\n      }\n    }\n    return { span, spanContext: context };\n  }\n};\nvar WorkersSDK = _WorkersSDK;\n_flushed = new WeakMap();\n_logs = new WeakMap();\n_env = new WeakMap();\n_ingestEvent = new WeakSet();\ningestEvent_fn = function(event) {\n  const { spanId, traceId, traceFlags } = this.span.spanContext();\n  const { level: defaultLevel, name, messages } = event;\n  const level = defaultLevel === \"log\" ? \"info\" : defaultLevel;\n  let severityNumber;\n  switch (level) {\n    case \"debug\":\n      severityNumber = 5;\n      break;\n    case \"info\":\n      severityNumber = 9;\n      break;\n    case \"warn\":\n      severityNumber = 13;\n      break;\n    case \"error\":\n      severityNumber = 17;\n      break;\n    case \"fatal\":\n      severityNumber = 21;\n      break;\n  }\n  const [message, extra] = messages;\n  let attributes = Object.assign(extra ? extra : {}, { \"project.name\": this.projectName, \"service.name\": this.serviceName });\n  (0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateGet)(this, _logs).push({\n    timestamp: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_16__.hrTime)(Date.now()),\n    observedTimestamp: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_16__.hrTime)(Date.now()),\n    spanId,\n    traceId,\n    traceFlags,\n    severityText: level.toUpperCase(),\n    severityNumber,\n    body: `${message}`,\n    instrumentationLibrary: {\n      name: \"opentelemetry-sdk-workers\"\n    },\n    resource: this.traceProvider.resource,\n    attributes\n  });\n};\n_parseAttributes = new WeakSet();\nparseAttributes_fn = function(rawEnvAttributes) {\n  if (!rawEnvAttributes)\n    return {};\n  const attributes = {};\n  const rawAttributes = rawEnvAttributes.split(\",\", -1);\n  for (const rawAttribute of rawAttributes) {\n    const keyValuePair = rawAttribute.split(\"=\", -1);\n    if (keyValuePair.length !== 2) {\n      continue;\n    }\n    let [key, value] = keyValuePair;\n    key = key.trim();\n    value = value.trim().split('^\"|\"$').join(\"\");\n    if (!(0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateMethod)(this, _isValidAndNotEmptyKey, isValidAndNotEmptyKey_fn).call(this, key)) {\n      throw new Error(`Attribute key should be a ASCII string with a length greater than 0 and not exceed 255 characters.`);\n    }\n    if (!(0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateMethod)(this, _isValidAttributeKey, isValidAttributeKey_fn).call(this, value)) {\n      throw new Error(`Attribute value should be a ASCII string with a length not exceed 255 characters`);\n    }\n    attributes[key] = value;\n  }\n  return attributes;\n};\n_isValidAttributeKey = new WeakSet();\nisValidAttributeKey_fn = function(name) {\n  return name.length <= 255 && (0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateMethod)(this, _isPrintableString, isPrintableString_fn).call(this, name);\n};\n_isPrintableString = new WeakSet();\nisPrintableString_fn = function(str) {\n  for (let i2 = 0; i2 < str.length; i2++) {\n    const ch = str.charAt(i2);\n    if (ch <= \" \" || ch >= \"~\") {\n      return false;\n    }\n  }\n  return true;\n};\n_isValidAndNotEmptyKey = new WeakSet();\nisValidAndNotEmptyKey_fn = function(str) {\n  return str.length > 0 && (0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateMethod)(this, _isValidAttributeKey, isValidAttributeKey_fn).call(this, str);\n};\n(0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateAdd)(WorkersSDK, _parseAttributes);\n(0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateAdd)(WorkersSDK, _isValidAttributeKey);\n(0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateAdd)(WorkersSDK, _isPrintableString);\n(0,_chunk_Z5VEH2XZ_mjs__WEBPACK_IMPORTED_MODULE_1__.__privateAdd)(WorkersSDK, _isValidAndNotEmptyKey);\n\n\n\n//# sourceURL=webpack://my-wrangler-webpack-project/./node_modules/@middleware.io/opentelemetry-sdk-workers/dist/index.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;